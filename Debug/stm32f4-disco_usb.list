
stm32f4-disco_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  0800ff20  0800ff20  0001ff20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801082c  0801082c  000302dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801082c  0801082c  0002082c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010834  08010834  000302dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010834  08010834  00020834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010838  08010838  00020838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0801083c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302dc  2**0
                  CONTENTS
 10 .bss          0000ad08  200002dc  200002dc  000302dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000afe4  2000afe4  000302dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022125  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f3b  00000000  00000000  00052431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b20  00000000  00000000  00057370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001908  00000000  00000000  00058e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000959d  00000000  00000000  0005a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f526  00000000  00000000  00063d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3fb  00000000  00000000  0008325b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015d656  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083f0  00000000  00000000  0015d6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff04 	.word	0x0800ff04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	0800ff04 	.word	0x0800ff04

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10a      	bne.n	8000ef4 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ef0:	bf00      	nop
 8000ef2:	e7fe      	b.n	8000ef2 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000ef4:	2008      	movs	r0, #8
 8000ef6:	f00a ffd7 	bl	800bea8 <pvPortMalloc>
 8000efa:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10a      	bne.n	8000f18 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8000f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f06:	f383 8811 	msr	BASEPRI, r3
 8000f0a:	f3bf 8f6f 	isb	sy
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	60bb      	str	r3, [r7, #8]
}
 8000f14:	bf00      	nop
 8000f16:	e7fe      	b.n	8000f16 <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d012      	beq.n	8000f44 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 8000f1e:	f00a fea1 	bl	800bc64 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000f3c:	f00a fec2 	bl	800bcc4 <vPortExitCritical>

		xReturn = pdPASS;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000f44:	697b      	ldr	r3, [r7, #20]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d141      	bne.n	8000ff0 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000f6c:	4b38      	ldr	r3, [pc, #224]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <FreeRTOS_CLIProcessCommand+0x100>)
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e037      	b.n	8000fe4 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000f7e:	69b8      	ldr	r0, [r7, #24]
 8000f80:	f7ff f930 	bl	80001e4 <strlen>
 8000f84:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	69b9      	ldr	r1, [r7, #24]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f00c fe9f 	bl	800dcce <strncmp>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d121      	bne.n	8000fda <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	d005      	beq.n	8000fae <FreeRTOS_CLIProcessCommand+0x5a>
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d115      	bne.n	8000fda <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db18      	blt.n	8000fee <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f8d7 	bl	8001170 <prvGetNumberOfParameters>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d00c      	beq.n	8000fee <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000fd8:	e009      	b.n	8000fee <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1c3      	bne.n	8000f74 <FreeRTOS_CLIProcessCommand+0x20>
 8000fec:	e000      	b.n	8000ff0 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8000fee:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00b      	beq.n	8001010 <FreeRTOS_CLIProcessCommand+0xbc>
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d108      	bne.n	8001010 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4915      	ldr	r1, [pc, #84]	; (8001058 <FreeRTOS_CLIProcessCommand+0x104>)
 8001002:	68b8      	ldr	r0, [r7, #8]
 8001004:	f00c fe77 	bl	800dcf6 <strncpy>
		pxCommand = NULL;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e01a      	b.n	8001046 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00f      	beq.n	8001038 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	4798      	blx	r3
 8001028:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10a      	bne.n	8001046 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e006      	b.n	8001046 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <FreeRTOS_CLIProcessCommand+0x108>)
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	f00c fe5a 	bl	800dcf6 <strncpy>
		xReturn = pdFALSE;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8001046:	69fb      	ldr	r3, [r7, #28]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002f8 	.word	0x200002f8
 8001054:	20000000 	.word	0x20000000
 8001058:	0800ff58 	.word	0x0800ff58
 800105c:	0800ffb0 	.word	0x0800ffb0

08001060 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800107a:	e03b      	b.n	80010f4 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <FreeRTOS_CLIGetParameter+0x3a>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b20      	cmp	r3, #32
 8001090:	d1f4      	bne.n	800107c <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001092:	e002      	b.n	800109a <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <FreeRTOS_CLIGetParameter+0x4a>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b20      	cmp	r3, #32
 80010a8:	d0f4      	beq.n	8001094 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d025      	beq.n	80010fe <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d119      	bne.n	80010f4 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010c4:	e007      	b.n	80010d6 <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <FreeRTOS_CLIGetParameter+0x86>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d1ef      	bne.n	80010c6 <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
				}

				break;
 80010f2:	e006      	b.n	8001102 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3c2      	bcc.n	8001082 <FreeRTOS_CLIGetParameter+0x22>
 80010fc:	e002      	b.n	8001104 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 80010fe:	bf00      	nop
 8001100:	e000      	b.n	8001104 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 8001102:	bf00      	nop
		}
	}

	return pcReturn;
 8001104:	693b      	ldr	r3, [r7, #16]
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <prvHelpCommand+0x54>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <prvHelpCommand+0x54>)
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <prvHelpCommand+0x58>)
 800112c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <prvHelpCommand+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f00c fddb 	bl	800dcf6 <strncpy>
	pxCommand = pxCommand->pxNext;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <prvHelpCommand+0x54>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <prvHelpCommand+0x54>)
 8001148:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <prvHelpCommand+0x54>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e001      	b.n	800115c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800115c:	697b      	ldr	r3, [r7, #20]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200002fc 	.word	0x200002fc
 800116c:	20000000 	.word	0x20000000

08001170 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8001180:	e014      	b.n	80011ac <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b20      	cmp	r3, #32
 8001188:	d10b      	bne.n	80011a2 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d00a      	beq.n	80011a6 <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3301      	adds	r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	e001      	b.n	80011a6 <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e6      	bne.n	8001182 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d105      	bne.n	80011c6 <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <task_led>:
}led_t;

led_t green_led;
led_t red_led;

void task_led(void *param){
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]
	while(1){
		if (led->timeout == 0){
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <task_led+0x1c>
			vTaskDelay(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f008 fd6e 	bl	8009ccc <vTaskDelay>
 80011f0:	e7f7      	b.n	80011e2 <task_led+0xc>

		}
		else{
			HAL_GPIO_TogglePin(led->port, led->pin);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4610      	mov	r0, r2
 80011fe:	f001 f894 	bl	800232a <HAL_GPIO_TogglePin>
			vTaskDelay(led->timeout);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4618      	mov	r0, r3
 8001208:	f008 fd60 	bl	8009ccc <vTaskDelay>
		if (led->timeout == 0){
 800120c:	e7e9      	b.n	80011e2 <task_led+0xc>

0800120e <task_print>:
		vTaskDelay(1000);
		queue_print((uint8_t*)text, size);
	}
}

void task_print(void *param){
 800120e:	b580      	push	{r7, lr}
 8001210:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001214:	af00      	add	r7, sp, #0
 8001216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800121a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800121e:	6018      	str	r0, [r3, #0]
	uint8_t buf[512];
	while(!is_usb_on()) vTaskDelay(100);
 8001220:	e002      	b.n	8001228 <task_print+0x1a>
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f008 fd52 	bl	8009ccc <vTaskDelay>
 8001228:	f00b f99e 	bl	800c568 <is_usb_on>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f7      	beq.n	8001222 <task_print+0x14>
	while(1){
		Print_Task((uint8_t *)&buf);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f00b f9dc 	bl	800c5f4 <Print_Task>
 800123c:	e7f9      	b.n	8001232 <task_print+0x24>

0800123e <prvTaskStatsCommand>:
	}
}


static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
    ( void ) xWriteBufferLen;
    vTaskList(pcWriteBuffer);
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f009 fd68 	bl	800ad20 <vTaskList>
    return pdFALSE;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <prvLedCommand>:

static BaseType_t prvLedCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b093      	sub	sp, #76	; 0x4c
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    char parameter1[10], parameter2[10], parameter3[10];

    BaseType_t xParameterStringLength;
    GPIO_PinState pin_state;

    parameters = FreeRTOS_CLIGetParameter( pcCommandString,
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	461a      	mov	r2, r3
 800126e:	2101      	movs	r1, #1
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fef5 	bl	8001060 <FreeRTOS_CLIGetParameter>
 8001276:	6438      	str	r0, [r7, #64]	; 0x40
    				1,
					&xParameterStringLength );
    strncpy(parameter1, parameters, xParameterStringLength);
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	461a      	mov	r2, r3
 800127c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001282:	4618      	mov	r0, r3
 8001284:	f00c fd37 	bl	800dcf6 <strncpy>
    parameter1[xParameterStringLength] = '\0';
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3348      	adds	r3, #72	; 0x48
 800128c:	443b      	add	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	f803 2c18 	strb.w	r2, [r3, #-24]

    if (strcmp("green",parameter1) == 0){
 8001294:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001298:	4619      	mov	r1, r3
 800129a:	4898      	ldr	r0, [pc, #608]	; (80014fc <prvLedCommand+0x2a0>)
 800129c:	f7fe ff98 	bl	80001d0 <strcmp>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <prvLedCommand+0x50>
    	led = &green_led;
 80012a6:	4b96      	ldr	r3, [pc, #600]	; (8001500 <prvLedCommand+0x2a4>)
 80012a8:	647b      	str	r3, [r7, #68]	; 0x44
 80012aa:	e026      	b.n	80012fa <prvLedCommand+0x9e>
    }
	else if(strcmp("red",parameter1) == 0){
 80012ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b0:	4619      	mov	r1, r3
 80012b2:	4894      	ldr	r0, [pc, #592]	; (8001504 <prvLedCommand+0x2a8>)
 80012b4:	f7fe ff8c 	bl	80001d0 <strcmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <prvLedCommand+0x68>

		led = &red_led;
 80012be:	4b92      	ldr	r3, [pc, #584]	; (8001508 <prvLedCommand+0x2ac>)
 80012c0:	647b      	str	r3, [r7, #68]	; 0x44
 80012c2:	e01a      	b.n	80012fa <prvLedCommand+0x9e>
	}

	else {
		strncpy( pcWriteBuffer, "invalid parameter. should be red or green", 1 + strlen("invalid parameter. should be red or green") );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a91      	ldr	r2, [pc, #580]	; (800150c <prvLedCommand+0x2b0>)
 80012c8:	4614      	mov	r4, r2
 80012ca:	469c      	mov	ip, r3
 80012cc:	f104 0e20 	add.w	lr, r4, #32
 80012d0:	4665      	mov	r5, ip
 80012d2:	4626      	mov	r6, r4
 80012d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012d6:	6028      	str	r0, [r5, #0]
 80012d8:	6069      	str	r1, [r5, #4]
 80012da:	60aa      	str	r2, [r5, #8]
 80012dc:	60eb      	str	r3, [r5, #12]
 80012de:	3410      	adds	r4, #16
 80012e0:	f10c 0c10 	add.w	ip, ip, #16
 80012e4:	4574      	cmp	r4, lr
 80012e6:	d1f3      	bne.n	80012d0 <prvLedCommand+0x74>
 80012e8:	4662      	mov	r2, ip
 80012ea:	4623      	mov	r3, r4
 80012ec:	cb03      	ldmia	r3!, {r0, r1}
 80012ee:	6010      	str	r0, [r2, #0]
 80012f0:	6051      	str	r1, [r2, #4]
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	8113      	strh	r3, [r2, #8]
		return pdFALSE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e0fc      	b.n	80014f4 <prvLedCommand+0x298>
	}
	parameters = FreeRTOS_CLIGetParameter( pcCommandString,
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	461a      	mov	r2, r3
 8001300:	2102      	movs	r1, #2
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff feac 	bl	8001060 <FreeRTOS_CLIGetParameter>
 8001308:	6438      	str	r0, [r7, #64]	; 0x40
					2,
					&xParameterStringLength );
	strncpy(parameter2, parameters, xParameterStringLength);
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	461a      	mov	r2, r3
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001314:	4618      	mov	r0, r3
 8001316:	f00c fcee 	bl	800dcf6 <strncpy>
	parameter2[xParameterStringLength] = '\0';
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3348      	adds	r3, #72	; 0x48
 800131e:	443b      	add	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	f803 2c24 	strb.w	r2, [r3, #-36]

	if (strcmp("on",parameter2) == 0){
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4878      	ldr	r0, [pc, #480]	; (8001510 <prvLedCommand+0x2b4>)
 800132e:	f7fe ff4f 	bl	80001d0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d123      	bne.n	8001380 <prvLedCommand+0x124>
		led->timeout = 0;
 8001338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
		pin_state = HAL_GPIO_ReadPin(led->port, led->pin);
 800133e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001344:	889b      	ldrh	r3, [r3, #4]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f000 ffbd 	bl	80022c8 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (!pin_state){
 8001354:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 80ca 	bne.w	80014f2 <prvLedCommand+0x296>
			HAL_GPIO_TogglePin(led->port, led->pin);
 800135e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f000 ffde 	bl	800232a <HAL_GPIO_TogglePin>
			strncpy( pcWriteBuffer, "led on", 1 + strlen("led on"));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4a68      	ldr	r2, [pc, #416]	; (8001514 <prvLedCommand+0x2b8>)
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	6018      	str	r0, [r3, #0]
 8001376:	8891      	ldrh	r1, [r2, #4]
 8001378:	7992      	ldrb	r2, [r2, #6]
 800137a:	8099      	strh	r1, [r3, #4]
 800137c:	719a      	strb	r2, [r3, #6]
 800137e:	e0b8      	b.n	80014f2 <prvLedCommand+0x296>
		}
	}
	else if (strcmp("off",parameter2) == 0){
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4864      	ldr	r0, [pc, #400]	; (8001518 <prvLedCommand+0x2bc>)
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d12b      	bne.n	80013ea <prvLedCommand+0x18e>
		led->timeout = 0;
 8001392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
		pin_state = HAL_GPIO_ReadPin(led->port, led->pin);
 8001398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f000 ff90 	bl	80022c8 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (pin_state){
 80013ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <prvLedCommand+0x17a>
			HAL_GPIO_TogglePin(led->port, led->pin);
 80013b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f000 ffb2 	bl	800232a <HAL_GPIO_TogglePin>
			strncpy( pcWriteBuffer, "led off", 1 + strlen("led off"));
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4954      	ldr	r1, [pc, #336]	; (800151c <prvLedCommand+0x2c0>)
 80013ca:	461a      	mov	r2, r3
 80013cc:	460b      	mov	r3, r1
 80013ce:	cb03      	ldmia	r3!, {r0, r1}
 80013d0:	6010      	str	r0, [r2, #0]
 80013d2:	6051      	str	r1, [r2, #4]
 80013d4:	e08d      	b.n	80014f2 <prvLedCommand+0x296>

		}
		else{
			strncpy( pcWriteBuffer, "led already off", 1 + strlen("led already off"));
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4a51      	ldr	r2, [pc, #324]	; (8001520 <prvLedCommand+0x2c4>)
 80013da:	461c      	mov	r4, r3
 80013dc:	4615      	mov	r5, r2
 80013de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e0:	6020      	str	r0, [r4, #0]
 80013e2:	6061      	str	r1, [r4, #4]
 80013e4:	60a2      	str	r2, [r4, #8]
 80013e6:	60e3      	str	r3, [r4, #12]
 80013e8:	e083      	b.n	80014f2 <prvLedCommand+0x296>

		}

	}
	else if(strcmp("toggle",parameter2) == 0){
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	484c      	ldr	r0, [pc, #304]	; (8001524 <prvLedCommand+0x2c8>)
 80013f2:	f7fe feed 	bl	80001d0 <strcmp>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d162      	bne.n	80014c2 <prvLedCommand+0x266>
		parameters = FreeRTOS_CLIGetParameter( pcCommandString,
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	461a      	mov	r2, r3
 8001402:	2103      	movs	r1, #3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fe2b 	bl	8001060 <FreeRTOS_CLIGetParameter>
 800140a:	6438      	str	r0, [r7, #64]	; 0x40
				3,
				&xParameterStringLength );
		strncpy(parameter3, parameters, xParameterStringLength);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	461a      	mov	r2, r3
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001416:	4618      	mov	r0, r3
 8001418:	f00c fc6d 	bl	800dcf6 <strncpy>
		parameter3[xParameterStringLength] = '\0';
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3348      	adds	r3, #72	; 0x48
 8001420:	443b      	add	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	f803 2c30 	strb.w	r2, [r3, #-48]
		if (parameter3[0] == '\0'){
 8001428:	7e3b      	ldrb	r3, [r7, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <prvLedCommand+0x200>
			led->timeout = 0;
 800142e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
			HAL_GPIO_TogglePin(led->port, led->pin);
 8001434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 ff73 	bl	800232a <HAL_GPIO_TogglePin>
			strncpy( pcWriteBuffer, "led toggle", 1 + strlen("led toggle"));
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4938      	ldr	r1, [pc, #224]	; (8001528 <prvLedCommand+0x2cc>)
 8001448:	461a      	mov	r2, r3
 800144a:	460b      	mov	r3, r1
 800144c:	cb03      	ldmia	r3!, {r0, r1}
 800144e:	6010      	str	r0, [r2, #0]
 8001450:	6051      	str	r1, [r2, #4]
 8001452:	8819      	ldrh	r1, [r3, #0]
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	8111      	strh	r1, [r2, #8]
 8001458:	7293      	strb	r3, [r2, #10]
 800145a:	e04a      	b.n	80014f2 <prvLedCommand+0x296>
		}
		else {
			int32_t num = atoi(parameter3);
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f00b fd13 	bl	800ce8c <atoi>
 8001466:	63f8      	str	r0, [r7, #60]	; 0x3c
			if (num < 0){
 8001468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800146a:	2b00      	cmp	r3, #0
 800146c:	da19      	bge.n	80014a2 <prvLedCommand+0x246>
				strncpy( pcWriteBuffer, "invalid parameter. should be 0 or higher", 1 + strlen("invalid parameter. should be 0 or higher"));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4a2e      	ldr	r2, [pc, #184]	; (800152c <prvLedCommand+0x2d0>)
 8001472:	4614      	mov	r4, r2
 8001474:	469c      	mov	ip, r3
 8001476:	f104 0e20 	add.w	lr, r4, #32
 800147a:	4665      	mov	r5, ip
 800147c:	4626      	mov	r6, r4
 800147e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001480:	6028      	str	r0, [r5, #0]
 8001482:	6069      	str	r1, [r5, #4]
 8001484:	60aa      	str	r2, [r5, #8]
 8001486:	60eb      	str	r3, [r5, #12]
 8001488:	3410      	adds	r4, #16
 800148a:	f10c 0c10 	add.w	ip, ip, #16
 800148e:	4574      	cmp	r4, lr
 8001490:	d1f3      	bne.n	800147a <prvLedCommand+0x21e>
 8001492:	4662      	mov	r2, ip
 8001494:	4623      	mov	r3, r4
 8001496:	cb03      	ldmia	r3!, {r0, r1}
 8001498:	6010      	str	r0, [r2, #0]
 800149a:	6051      	str	r1, [r2, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	7213      	strb	r3, [r2, #8]
 80014a0:	e027      	b.n	80014f2 <prvLedCommand+0x296>
			}
			else{
				led->timeout = num;
 80014a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a6:	609a      	str	r2, [r3, #8]
				strncpy( pcWriteBuffer, "led toggle interval set", 1 + strlen("led toggle interval set"));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <prvLedCommand+0x2d4>)
 80014ac:	461d      	mov	r5, r3
 80014ae:	4614      	mov	r4, r2
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	6028      	str	r0, [r5, #0]
 80014b4:	6069      	str	r1, [r5, #4]
 80014b6:	60aa      	str	r2, [r5, #8]
 80014b8:	60eb      	str	r3, [r5, #12]
 80014ba:	cc03      	ldmia	r4!, {r0, r1}
 80014bc:	6128      	str	r0, [r5, #16]
 80014be:	6169      	str	r1, [r5, #20]
 80014c0:	e017      	b.n	80014f2 <prvLedCommand+0x296>

		}

	}
	else{
		strncpy( pcWriteBuffer, "invalid parameter. should be on, off, or toggle xx", 1 + strlen("invalid parameter. should be on, off, or toggle xx"));
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <prvLedCommand+0x2d8>)
 80014c6:	4614      	mov	r4, r2
 80014c8:	469c      	mov	ip, r3
 80014ca:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014ce:	4665      	mov	r5, ip
 80014d0:	4626      	mov	r6, r4
 80014d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d4:	6028      	str	r0, [r5, #0]
 80014d6:	6069      	str	r1, [r5, #4]
 80014d8:	60aa      	str	r2, [r5, #8]
 80014da:	60eb      	str	r3, [r5, #12]
 80014dc:	3410      	adds	r4, #16
 80014de:	f10c 0c10 	add.w	ip, ip, #16
 80014e2:	4574      	cmp	r4, lr
 80014e4:	d1f3      	bne.n	80014ce <prvLedCommand+0x272>
 80014e6:	4663      	mov	r3, ip
 80014e8:	4622      	mov	r2, r4
 80014ea:	8811      	ldrh	r1, [r2, #0]
 80014ec:	7892      	ldrb	r2, [r2, #2]
 80014ee:	8019      	strh	r1, [r3, #0]
 80014f0:	709a      	strb	r2, [r3, #2]
	}
    return pdFALSE;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	374c      	adds	r7, #76	; 0x4c
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fc:	08010020 	.word	0x08010020
 8001500:	20000304 	.word	0x20000304
 8001504:	08010028 	.word	0x08010028
 8001508:	20000310 	.word	0x20000310
 800150c:	0801002c 	.word	0x0801002c
 8001510:	08010058 	.word	0x08010058
 8001514:	0801005c 	.word	0x0801005c
 8001518:	08010064 	.word	0x08010064
 800151c:	08010068 	.word	0x08010068
 8001520:	08010070 	.word	0x08010070
 8001524:	08010080 	.word	0x08010080
 8001528:	08010088 	.word	0x08010088
 800152c:	08010094 	.word	0x08010094
 8001530:	080100c0 	.word	0x080100c0
 8001534:	080100d8 	.word	0x080100d8

08001538 <prvTaskStatsTexto>:

    return pdFALSE;
}

static BaseType_t prvTaskStatsTexto(char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]

  strcpy(pcWriteBuffer, (char *)"Isto é apenas um teste, testando 1 2 3...\r\n");
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <prvTaskStatsTexto+0x4c>)
 8001548:	4614      	mov	r4, r2
 800154a:	469c      	mov	ip, r3
 800154c:	f104 0e20 	add.w	lr, r4, #32
 8001550:	4665      	mov	r5, ip
 8001552:	4626      	mov	r6, r4
 8001554:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001556:	6028      	str	r0, [r5, #0]
 8001558:	6069      	str	r1, [r5, #4]
 800155a:	60aa      	str	r2, [r5, #8]
 800155c:	60eb      	str	r3, [r5, #12]
 800155e:	3410      	adds	r4, #16
 8001560:	f10c 0c10 	add.w	ip, ip, #16
 8001564:	4574      	cmp	r4, lr
 8001566:	d1f3      	bne.n	8001550 <prvTaskStatsTexto+0x18>
 8001568:	4665      	mov	r5, ip
 800156a:	4623      	mov	r3, r4
 800156c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800156e:	6028      	str	r0, [r5, #0]
 8001570:	6069      	str	r1, [r5, #4]
 8001572:	60aa      	str	r2, [r5, #8]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	732b      	strb	r3, [r5, #12]
  return pdFALSE;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001582:	bf00      	nop
 8001584:	0801018c 	.word	0x0801018c

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f000 fbb7 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001592:	f000 f85b 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001596:	f000 f8c3 	bl	8001720 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800159a:	f006 fd1b 	bl	8007fd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800159e:	4a20      	ldr	r2, [pc, #128]	; (8001620 <main+0x98>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4820      	ldr	r0, [pc, #128]	; (8001624 <main+0x9c>)
 80015a4:	f006 fd60 	bl	8008068 <osThreadNew>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <main+0xa0>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  green_led.timeout = 500;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <main+0xa4>)
 80015b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b4:	609a      	str	r2, [r3, #8]
  green_led.port = GPIOD;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <main+0xa4>)
 80015b8:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <main+0xa8>)
 80015ba:	601a      	str	r2, [r3, #0]
  green_led.pin = GPIO_PIN_13;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <main+0xa4>)
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	809a      	strh	r2, [r3, #4]

  red_led.timeout = 250;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <main+0xac>)
 80015c6:	22fa      	movs	r2, #250	; 0xfa
 80015c8:	609a      	str	r2, [r3, #8]
  red_led.port = GPIOD;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <main+0xac>)
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <main+0xa8>)
 80015ce:	601a      	str	r2, [r3, #0]
  red_led.pin = GPIO_PIN_14;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <main+0xac>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d6:	809a      	strh	r2, [r3, #4]

  xTaskCreate(task_led, "green LED task", 256, &green_led, 1, NULL);
 80015d8:	2300      	movs	r3, #0
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2301      	movs	r3, #1
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <main+0xa4>)
 80015e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e6:	4914      	ldr	r1, [pc, #80]	; (8001638 <main+0xb0>)
 80015e8:	4814      	ldr	r0, [pc, #80]	; (800163c <main+0xb4>)
 80015ea:	f008 fa13 	bl	8009a14 <xTaskCreate>
  xTaskCreate(task_led, "red LED task", 256, &red_led, 2, NULL);
 80015ee:	2300      	movs	r3, #0
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2302      	movs	r3, #2
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <main+0xac>)
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	4910      	ldr	r1, [pc, #64]	; (8001640 <main+0xb8>)
 80015fe:	480f      	ldr	r0, [pc, #60]	; (800163c <main+0xb4>)
 8001600:	f008 fa08 	bl	8009a14 <xTaskCreate>
  //xTaskCreate(task_usb, "Tarefa USB", 256, NULL, 2, NULL);
  xTaskCreate(task_print, "print task", 512, NULL, 2, NULL);
 8001604:	2300      	movs	r3, #0
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2302      	movs	r3, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001612:	490c      	ldr	r1, [pc, #48]	; (8001644 <main+0xbc>)
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <main+0xc0>)
 8001616:	f008 f9fd 	bl	8009a14 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800161a:	f006 fcff 	bl	800801c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161e:	e7fe      	b.n	800161e <main+0x96>
 8001620:	080103e0 	.word	0x080103e0
 8001624:	080017c5 	.word	0x080017c5
 8001628:	20000300 	.word	0x20000300
 800162c:	20000304 	.word	0x20000304
 8001630:	40020c00 	.word	0x40020c00
 8001634:	20000310 	.word	0x20000310
 8001638:	08010330 	.word	0x08010330
 800163c:	080011d7 	.word	0x080011d7
 8001640:	08010340 	.word	0x08010340
 8001644:	08010350 	.word	0x08010350
 8001648:	0800120f 	.word	0x0800120f

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2230      	movs	r2, #48	; 0x30
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f00b fd4b 	bl	800d0f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <SystemClock_Config+0xcc>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <SystemClock_Config+0xcc>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	; 0x40
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <SystemClock_Config+0xcc>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <SystemClock_Config+0xd0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <SystemClock_Config+0xd0>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <SystemClock_Config+0xd0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016bc:	2304      	movs	r3, #4
 80016be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c0:	23a8      	movs	r3, #168	; 0xa8
 80016c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 f8c1 	bl	8003858 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016dc:	f000 f93e 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2302      	movs	r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2105      	movs	r1, #5
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fb22 	bl	8003d48 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800170a:	f000 f927 	bl	800195c <Error_Handler>
  }
}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	; 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_GPIO_Init+0x9c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a18      	ldr	r2, [pc, #96]	; (80017bc <MX_GPIO_Init+0x9c>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a11      	ldr	r2, [pc, #68]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_GPIO_Init+0x9c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <MX_GPIO_Init+0xa0>)
 8001792:	f000 fdb1 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001796:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800179a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_GPIO_Init+0xa0>)
 80017b0:	f000 fbee 	bl	8001f90 <HAL_GPIO_Init>

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0a6      	sub	sp, #152	; 0x98
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80017cc:	f00a fd56 	bl	800c27c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 80017d0:	f00a fe8e 	bl	800c4f0 <init_usb_rtos_obj>
  //char data[32];

  /* Infinite loop */
	//Peripheral_Descriptor_t xConsole;
	int8_t cInputIndex = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 80017da:	4851      	ldr	r0, [pc, #324]	; (8001920 <StartDefaultTask+0x15c>)
 80017dc:	f7ff fb76 	bl	8000ecc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 80017e0:	4850      	ldr	r0, [pc, #320]	; (8001924 <StartDefaultTask+0x160>)
 80017e2:	f7ff fb73 	bl	8000ecc <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xLedCommand);
 80017e6:	4850      	ldr	r0, [pc, #320]	; (8001928 <StartDefaultTask+0x164>)
 80017e8:	f7ff fb70 	bl	8000ecc <FreeRTOS_CLIRegisterCommand>
//  FreeRTOS_CLIRegisterCommand(&xHarmonicCommand);
    char data[128];
      int amount = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      BaseType_t xMoreDataToFollow;

      for(;;){
    	  amount = CDC_Receivem_FS((uint8_t*)&data, portMAX_DELAY);
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	f04f 31ff 	mov.w	r1, #4294967295
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00a fec0 	bl	800c580 <CDC_Receivem_FS>
 8001800:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    	  for (int i = 0; i<amount; i++){
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800180a:	e081      	b.n	8001910 <StartDefaultTask+0x14c>
    		  if (data[i] == '\r'){
 800180c:	f107 0208 	add.w	r2, r7, #8
 8001810:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b0d      	cmp	r3, #13
 800181a:	d138      	bne.n	800188e <StartDefaultTask+0xca>
    			  queue_print((uint8_t*)"\n\r", 2);
 800181c:	2102      	movs	r1, #2
 800181e:	4843      	ldr	r0, [pc, #268]	; (800192c <StartDefaultTask+0x168>)
 8001820:	f00a fec2 	bl	800c5a8 <queue_print>
    			  if (cInputIndex != 0){
 8001824:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8001828:	2b00      	cmp	r3, #0
 800182a:	d06c      	beq.n	8001906 <StartDefaultTask+0x142>

    				  do{
    					  xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, pcOutputString, MAX_OUTPUT_LENGTH);
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	493f      	ldr	r1, [pc, #252]	; (8001930 <StartDefaultTask+0x16c>)
 8001832:	4840      	ldr	r0, [pc, #256]	; (8001934 <StartDefaultTask+0x170>)
 8001834:	f7ff fb8e 	bl	8000f54 <FreeRTOS_CLIProcessCommand>
 8001838:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    					  if (strlen(pcOutputString)){
 800183c:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <StartDefaultTask+0x16c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d017      	beq.n	8001874 <StartDefaultTask+0xb0>
    						  sprintf(pcOutputString + strlen(pcOutputString), "\n\r");
 8001844:	483a      	ldr	r0, [pc, #232]	; (8001930 <StartDefaultTask+0x16c>)
 8001846:	f7fe fccd 	bl	80001e4 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	4a38      	ldr	r2, [pc, #224]	; (8001930 <StartDefaultTask+0x16c>)
 800184e:	4413      	add	r3, r2
 8001850:	4936      	ldr	r1, [pc, #216]	; (800192c <StartDefaultTask+0x168>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00c f9d0 	bl	800dbf8 <siprintf>
    						  queue_print((uint8_t*)pcOutputString, strlen(pcOutputString));
 8001858:	4835      	ldr	r0, [pc, #212]	; (8001930 <StartDefaultTask+0x16c>)
 800185a:	f7fe fcc3 	bl	80001e4 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4833      	ldr	r0, [pc, #204]	; (8001930 <StartDefaultTask+0x16c>)
 8001864:	f00a fea0 	bl	800c5a8 <queue_print>
    					  	  memset(pcOutputString, 0, MAX_OUTPUT_LENGTH);
 8001868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186c:	2100      	movs	r1, #0
 800186e:	4830      	ldr	r0, [pc, #192]	; (8001930 <StartDefaultTask+0x16c>)
 8001870:	f00b fc41 	bl	800d0f6 <memset>
    					  }
    				  }while (xMoreDataToFollow != pdFALSE);
 8001874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1d7      	bne.n	800182c <StartDefaultTask+0x68>

    				  cInputIndex = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    				  memset(pcInputString, 0, MAX_INPUT_LENGTH);
 8001882:	2232      	movs	r2, #50	; 0x32
 8001884:	2100      	movs	r1, #0
 8001886:	482b      	ldr	r0, [pc, #172]	; (8001934 <StartDefaultTask+0x170>)
 8001888:	f00b fc35 	bl	800d0f6 <memset>
 800188c:	e03b      	b.n	8001906 <StartDefaultTask+0x142>
    			  }
    		  }
    		  else{
    			  if (data[i] == 127){ //backspace
 800188e:	f107 0208 	add.w	r2, r7, #8
 8001892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b7f      	cmp	r3, #127	; 0x7f
 800189c:	d117      	bne.n	80018ce <StartDefaultTask+0x10a>
    				  if (cInputIndex > 0){
 800189e:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dd2f      	ble.n	8001906 <StartDefaultTask+0x142>
    					  cInputIndex--;
 80018a6:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    					  pcInputString[cInputIndex] = 0;
 80018b4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80018b8:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <StartDefaultTask+0x170>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	54d1      	strb	r1, [r2, r3]
    					  queue_print((uint8_t*)&data, amount);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00a fe6e 	bl	800c5a8 <queue_print>
 80018cc:	e01b      	b.n	8001906 <StartDefaultTask+0x142>
    				  }
    			  }
    			  else{
    				  if (cInputIndex <MAX_INPUT_LENGTH){
 80018ce:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80018d2:	2b31      	cmp	r3, #49	; 0x31
 80018d4:	dc17      	bgt.n	8001906 <StartDefaultTask+0x142>
    					  pcInputString[cInputIndex] = data[i];
 80018d6:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80018da:	f107 0108 	add.w	r1, r7, #8
 80018de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80018e2:	440a      	add	r2, r1
 80018e4:	7811      	ldrb	r1, [r2, #0]
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <StartDefaultTask+0x170>)
 80018e8:	54d1      	strb	r1, [r2, r3]
    					  cInputIndex++;
 80018ea:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    					  queue_print((uint8_t*)&data, amount);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001900:	4618      	mov	r0, r3
 8001902:	f00a fe51 	bl	800c5a8 <queue_print>
    	  for (int i = 0; i<amount; i++){
 8001906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001910:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001918:	429a      	cmp	r2, r3
 800191a:	f6ff af77 	blt.w	800180c <StartDefaultTask+0x48>
    	  amount = CDC_Receivem_FS((uint8_t*)&data, portMAX_DELAY);
 800191e:	e768      	b.n	80017f2 <StartDefaultTask+0x2e>
 8001920:	08010414 	.word	0x08010414
 8001924:	08010404 	.word	0x08010404
 8001928:	08010424 	.word	0x08010424
 800192c:	0801035c 	.word	0x0801035c
 8001930:	2000031c 	.word	0x2000031c
 8001934:	2000051c 	.word	0x2000051c

08001938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800194a:	f000 f9fb 	bl	8001d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_MspInit+0x54>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_MspInit+0x54>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_MspInit+0x54>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_MspInit+0x54>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_MspInit+0x54>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_MspInit+0x54>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	210f      	movs	r1, #15
 80019aa:	f06f 0001 	mvn.w	r0, #1
 80019ae:	f000 fac5 	bl	8001f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_InitTick+0xd4>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_InitTick+0xd4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6453      	str	r3, [r2, #68]	; 0x44
 80019e0:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <HAL_InitTick+0xd4>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ec:	f107 020c 	add.w	r2, r7, #12
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fbb2 	bl	8004160 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019fc:	f002 fb9c 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8001a00:	4603      	mov	r3, r0
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <HAL_InitTick+0xd8>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9b      	lsrs	r3, r3, #18
 8001a10:	3b01      	subs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <HAL_InitTick+0xe0>)
 8001a18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a3c:	f002 fbc2 	bl	80041c4 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11b      	bne.n	8001a86 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a4e:	4813      	ldr	r0, [pc, #76]	; (8001a9c <HAL_InitTick+0xdc>)
 8001a50:	f002 fc12 	bl	8004278 <HAL_TIM_Base_Start_IT>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d111      	bne.n	8001a86 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a62:	2019      	movs	r0, #25
 8001a64:	f000 fa86 	bl	8001f74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	d808      	bhi.n	8001a80 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	2019      	movs	r0, #25
 8001a74:	f000 fa62 	bl	8001f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_InitTick+0xe4>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e002      	b.n	8001a86 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3730      	adds	r7, #48	; 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	431bde83 	.word	0x431bde83
 8001a9c:	20000550 	.word	0x20000550
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	20000010 	.word	0x20000010

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ada:	f002 fc3d 	bl	8004358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000550 	.word	0x20000550

08001ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <OTG_FS_IRQHandler+0x10>)
 8001aee:	f000 fd86 	bl	80025fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000a8a8 	.word	0x2000a8a8

08001afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_kill>:

int _kill(int pid, int sig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b16:	f00b f9bd 	bl	800ce94 <__errno>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2216      	movs	r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_exit>:

void _exit (int status)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffe7 	bl	8001b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b3e:	e7fe      	b.n	8001b3e <_exit+0x12>

08001b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e00a      	b.n	8001b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b52:	f3af 8000 	nop.w
 8001b56:	4601      	mov	r1, r0
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	b2ca      	uxtb	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf0      	blt.n	8001b52 <_read+0x12>
	}

return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e009      	b.n	8001ba0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	60ba      	str	r2, [r7, #8]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf1      	blt.n	8001b8c <_write+0x12>
	}
	return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_close>:

int _close(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bda:	605a      	str	r2, [r3, #4]
	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_isatty>:

int _isatty(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f00b f922 	bl	800ce94 <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20020000 	.word	0x20020000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000598 	.word	0x20000598
 8001c84:	2000afe8 	.word	0x2000afe8

08001c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb2:	490e      	ldr	r1, [pc, #56]	; (8001cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc8:	4c0b      	ldr	r4, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd6:	f7ff ffd7 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f00b f9d7 	bl	800d08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7ff fc53 	bl	8001588 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001cf0:	0801083c 	.word	0x0801083c
  ldr r2, =_sbss
 8001cf4:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001cf8:	2000afe4 	.word	0x2000afe4

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_Init+0x40>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_Init+0x40>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_Init+0x40>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f8fc 	bl	8001f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f7ff fe46 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fe18 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000014 	.word	0x20000014
 8001d68:	2000059c 	.word	0x2000059c

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	2000059c 	.word	0x2000059c

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000014 	.word	0x20000014

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4c 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4e:	f7ff ff61 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7ff ffb1 	bl	8001ec0 <NVIC_EncodePriority>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff80 	bl	8001e6c <__NVIC_SetPriority>
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff54 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e16b      	b.n	8002284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 815a 	bne.w	800227e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80b4 	beq.w	800227e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b60      	ldr	r3, [pc, #384]	; (800229c <HAL_GPIO_Init+0x30c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_GPIO_Init+0x310>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_GPIO_Init+0x314>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x318>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_GPIO_Init+0x31c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x320>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <HAL_GPIO_Init+0x324>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_GPIO_Init+0x328>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x20a>
 8002196:	2307      	movs	r3, #7
 8002198:	e00e      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219a:	2308      	movs	r3, #8
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	; (80022a0 <HAL_GPIO_Init+0x310>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae90 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40021c00 	.word	0x40021c00
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	041a      	lsls	r2, r3, #16
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43d9      	mvns	r1, r3
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	400b      	ands	r3, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002360:	b08f      	sub	sp, #60	; 0x3c
 8002362:	af0a      	add	r7, sp, #40	; 0x28
 8002364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e10f      	b.n	8002590 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f00a fa5c 	bl	800c848 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 facb 	bl	800494a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	687e      	ldr	r6, [r7, #4]
 80023bc:	466d      	mov	r5, sp
 80023be:	f106 0410 	add.w	r4, r6, #16
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d2:	1d33      	adds	r3, r6, #4
 80023d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f002 f9a2 	bl	8004720 <USB_CoreInit>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0d0      	b.n	8002590 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 fab9 	bl	800496c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e04a      	b.n	8002496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	333d      	adds	r3, #61	; 0x3d
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	333c      	adds	r3, #60	; 0x3c
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	b298      	uxth	r0, r3
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3344      	adds	r3, #68	; 0x44
 800243c:	4602      	mov	r2, r0
 800243e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3340      	adds	r3, #64	; 0x40
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3348      	adds	r3, #72	; 0x48
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334c      	adds	r3, #76	; 0x4c
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3354      	adds	r3, #84	; 0x54
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3301      	adds	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3af      	bcc.n	8002400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e044      	b.n	8002530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	3301      	adds	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d3b5      	bcc.n	80024a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	687e      	ldr	r6, [r7, #4]
 8002542:	466d      	mov	r5, sp
 8002544:	f106 0410 	add.w	r4, r6, #16
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002554:	e885 0003 	stmia.w	r5, {r0, r1}
 8002558:	1d33      	adds	r3, r6, #4
 800255a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f002 fa51 	bl	8004a04 <USB_DevInit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e00d      	b.n	8002590 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f003 fba0 	bl	8005cce <USB_DevDisconnect>

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002598 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_Start+0x1c>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e020      	b.n	80025f6 <HAL_PCD_Start+0x5e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d109      	bne.n	80025d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d005      	beq.n	80025d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 f9a3 	bl	8004928 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fb50 	bl	8005c8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025fe:	b590      	push	{r4, r7, lr}
 8002600:	b08d      	sub	sp, #52	; 0x34
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 fc0e 	bl	8005e36 <USB_GetMode>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 848a 	bne.w	8002f36 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fb72 	bl	8005d10 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8480 	beq.w	8002f34 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fb5f 	bl	8005d10 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d107      	bne.n	800266c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f002 0202 	and.w	r2, r2, #2
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fb4d 	bl	8005d10 <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b10      	cmp	r3, #16
 800267e:	d161      	bne.n	8002744 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	3304      	adds	r3, #4
 80026ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	0c5b      	lsrs	r3, r3, #17
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d124      	bne.n	8002706 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d035      	beq.n	8002734 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6a38      	ldr	r0, [r7, #32]
 80026dc:	f003 f984 	bl	80059e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ec:	441a      	add	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026fe:	441a      	add	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	621a      	str	r2, [r3, #32]
 8002704:	e016      	b.n	8002734 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	0c5b      	lsrs	r3, r3, #17
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	2b06      	cmp	r3, #6
 8002710:	d110      	bne.n	8002734 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002718:	2208      	movs	r2, #8
 800271a:	4619      	mov	r1, r3
 800271c:	6a38      	ldr	r0, [r7, #32]
 800271e:	f003 f963 	bl	80059e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272e:	441a      	add	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0210 	orr.w	r2, r2, #16
 8002742:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 fae1 	bl	8005d10 <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002754:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002758:	f040 80a7 	bne.w	80028aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fae6 	bl	8005d36 <USB_ReadDevAllOutEpInterrupt>
 800276a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800276c:	e099      	b.n	80028a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 808e 	beq.w	8002896 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fb0a 	bl	8005d9e <USB_ReadDevOutEPInterrupt>
 800278a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	461a      	mov	r2, r3
 80027a4:	2301      	movs	r3, #1
 80027a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fec2 	bl	8003534 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c6:	461a      	mov	r2, r3
 80027c8:	2308      	movs	r3, #8
 80027ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 ff98 	bl	8003704 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ea:	461a      	mov	r2, r3
 80027ec:	2310      	movs	r3, #16
 80027ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d030      	beq.n	800285c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d109      	bne.n	800281a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002818:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	78db      	ldrb	r3, [r3, #3]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f00a f913 	bl	800ca70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002856:	461a      	mov	r2, r3
 8002858:	2302      	movs	r3, #2
 800285a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002872:	461a      	mov	r2, r3
 8002874:	2320      	movs	r3, #32
 8002876:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288e:	461a      	mov	r2, r3
 8002890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002894:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	3301      	adds	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f47f af62 	bne.w	800276e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fa2e 	bl	8005d10 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028be:	f040 80db 	bne.w	8002a78 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 fa4f 	bl	8005d6a <USB_ReadDevAllInEpInterrupt>
 80028cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028d2:	e0cd      	b.n	8002a70 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80c2 	beq.w	8002a64 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fa75 	bl	8005dda <USB_ReadDevInEPInterrupt>
 80028f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d057      	beq.n	80029ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	69f9      	ldr	r1, [r7, #28]
 8002918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800291c:	4013      	ands	r3, r2
 800291e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	461a      	mov	r2, r3
 800292e:	2301      	movs	r3, #1
 8002930:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d132      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	334c      	adds	r3, #76	; 0x4c
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4403      	add	r3, r0
 800295a:	3348      	adds	r3, #72	; 0x48
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4419      	add	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4403      	add	r3, r0
 800296e:	334c      	adds	r3, #76	; 0x4c
 8002970:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d113      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x3a2>
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3354      	adds	r3, #84	; 0x54
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d108      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002998:	461a      	mov	r2, r3
 800299a:	2101      	movs	r1, #1
 800299c:	f003 fa7c 	bl	8005e98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f009 ffdd 	bl	800c966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c2:	461a      	mov	r2, r3
 80029c4:	2308      	movs	r3, #8
 80029c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029de:	461a      	mov	r2, r3
 80029e0:	2310      	movs	r3, #16
 80029e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fa:	461a      	mov	r2, r3
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d023      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f002 f95d 	bl	8004ccc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	3338      	adds	r3, #56	; 0x38
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	78db      	ldrb	r3, [r3, #3]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d108      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f00a f82a 	bl	800ca94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2302      	movs	r3, #2
 8002a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fcdb 	bl	800341a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	3301      	adds	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f47f af2e 	bne.w	80028d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 f947 	bl	8005d10 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a8c:	d122      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fec2 	bl	8003840 <HAL_PCDEx_LPM_Callback>
 8002abc:	e002      	b.n	8002ac4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f009 ffc8 	bl	800ca54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f919 	bl	8005d10 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae8:	d112      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f009 ff84 	bl	800ca08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 f8fb 	bl	8005d10 <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	f040 80b7 	bne.w	8002c96 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2110      	movs	r1, #16
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 f8c2 	bl	8004ccc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4c:	e046      	b.n	8002bdc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	0151      	lsls	r1, r2, #5
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	440a      	add	r2, r1
 8002b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba6:	0151      	lsls	r1, r2, #5
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	440a      	add	r2, r1
 8002bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	0151      	lsls	r1, r2, #5
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	440a      	add	r2, r1
 8002bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	3301      	adds	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3b3      	bcc.n	8002b4e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bf8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c12:	f043 030b 	orr.w	r3, r3, #11
 8002c16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c28:	f043 030b 	orr.w	r3, r3, #11
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	e015      	b.n	8002c5c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c56:	f043 030b 	orr.w	r3, r3, #11
 8002c5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c80:	461a      	mov	r2, r3
 8002c82:	f003 f909 	bl	8005e98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 f838 	bl	8005d10 <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d124      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 f8ce 	bl	8005e52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 f883 	bl	8004dc6 <USB_GetDevSpeed>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	f001 fa28 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f001 fd82 	bl	80047e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f009 fe68 	bl	800c9b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 f808 	bl	8005d10 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d10a      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f009 fe45 	bl	800c99a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f002 0208 	and.w	r2, r2, #8
 8002d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fff3 	bl	8005d10 <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d122      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e014      	b.n	8002d70 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fb27 	bl	80033b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3e5      	bcc.n	8002d46 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 ffc6 	bl	8005d10 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8e:	d13b      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	e02b      	b.n	8002dee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3340      	adds	r3, #64	; 0x40
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d115      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da12      	bge.n	8002de8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333f      	adds	r3, #63	; 0x3f
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fae8 	bl	80033b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	3301      	adds	r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3ce      	bcc.n	8002d96 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 ff7f 	bl	8005d10 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1c:	d155      	bne.n	8002eca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e1e:	2301      	movs	r3, #1
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	e045      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d12e      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da2b      	bge.n	8002eaa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d121      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea6:	6053      	str	r3, [r2, #4]
            break;
 8002ea8:	e007      	b.n	8002eba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	3301      	adds	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3b4      	bcc.n	8002e24 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 ff1e 	bl	8005d10 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d10a      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f009 fde9 	bl	800cab8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 ff08 	bl	8005d10 <USB_ReadInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d115      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f009 fdd9 	bl	800cad4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	e000      	b.n	8002f36 <HAL_PCD_IRQHandler+0x938>
      return;
 8002f34:	bf00      	nop
    }
  }
}
 8002f36:	3734      	adds	r7, #52	; 0x34
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd90      	pop	{r4, r7, pc}

08002f3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_PCD_SetAddress+0x1a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e013      	b.n	8002f7e <HAL_PCD_SetAddress+0x42>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fe66 	bl	8005c40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	4608      	mov	r0, r1
 8002f90:	4611      	mov	r1, r2
 8002f92:	461a      	mov	r2, r3
 8002f94:	4603      	mov	r3, r0
 8002f96:	70fb      	strb	r3, [r7, #3]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	803b      	strh	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da0f      	bge.n	8002fcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	3338      	adds	r3, #56	; 0x38
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00f      	b.n	8002fec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ff8:	883a      	ldrh	r2, [r7, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	78ba      	ldrb	r2, [r7, #2]
 8003002:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003016:	78bb      	ldrb	r3, [r7, #2]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d102      	bne.n	8003022 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_EP_Open+0xaa>
 800302c:	2302      	movs	r3, #2
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_Open+0xc8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fee6 	bl	8004e10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800304c:	7afb      	ldrb	r3, [r7, #11]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003066:	2b00      	cmp	r3, #0
 8003068:	da0f      	bge.n	800308a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	; 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	705a      	strb	r2, [r3, #1]
 8003088:	e00f      	b.n	80030aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	3304      	adds	r3, #4
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_PCD_EP_Close+0x6e>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e00e      	b.n	80030e2 <HAL_PCD_EP_Close+0x8c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 ff24 	bl	8004f20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	460b      	mov	r3, r1
 80030f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2200      	movs	r2, #0
 8003124:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	b2da      	uxtb	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	6979      	ldr	r1, [r7, #20]
 800315e:	f002 fa03 	bl	8005568 <USB_EP0StartXfer>
 8003162:	e008      	b.n	8003176 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	f001 ffb1 	bl	80050d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	460b      	mov	r3, r1
 80031be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3338      	adds	r3, #56	; 0x38
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2200      	movs	r2, #0
 80031e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2201      	movs	r2, #1
 80031ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d102      	bne.n	800320a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800320a:	7afb      	ldrb	r3, [r7, #11]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	f002 f9a1 	bl	8005568 <USB_EP0StartXfer>
 8003226:	e008      	b.n	800323a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	6979      	ldr	r1, [r7, #20]
 8003236:	f001 ff4f 	bl	80050d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d901      	bls.n	8003262 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e050      	b.n	8003304 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003266:	2b00      	cmp	r3, #0
 8003268:	da0f      	bge.n	800328a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	3338      	adds	r3, #56	; 0x38
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	3304      	adds	r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	705a      	strb	r2, [r3, #1]
 8003288:	e00d      	b.n	80032a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_PCD_EP_SetStall+0x82>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e01e      	b.n	8003304 <HAL_PCD_EP_SetStall+0xc0>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f002 fbdf 	bl	8005a98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	b2d9      	uxtb	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f4:	461a      	mov	r2, r3
 80032f6:	f002 fdcf 	bl	8005e98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	d901      	bls.n	800332a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e042      	b.n	80033b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800332a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0f      	bge.n	8003352 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3338      	adds	r3, #56	; 0x38
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	705a      	strb	r2, [r3, #1]
 8003350:	e00f      	b.n	8003372 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_EP_ClrStall+0x86>
 800338e:	2302      	movs	r3, #2
 8003390:	e00e      	b.n	80033b0 <HAL_PCD_EP_ClrStall+0xa4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fbe7 	bl	8005b74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da0c      	bge.n	80033e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	3338      	adds	r3, #56	; 0x38
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	3304      	adds	r3, #4
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e00c      	b.n	8003400 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 fa06 	bl	8005818 <USB_EPStopXfer>
 800340c:	4603      	mov	r3, r0
 800340e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003410:	7afb      	ldrb	r3, [r7, #11]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b08a      	sub	sp, #40	; 0x28
 800341e:	af02      	add	r7, sp, #8
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	3338      	adds	r3, #56	; 0x38
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	429a      	cmp	r2, r3
 800344c:	d901      	bls.n	8003452 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06c      	b.n	800352c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	d902      	bls.n	800346e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3303      	adds	r3, #3
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003476:	e02b      	b.n	80034d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	429a      	cmp	r2, r3
 800348c:	d902      	bls.n	8003494 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3303      	adds	r3, #3
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6919      	ldr	r1, [r3, #16]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4603      	mov	r3, r0
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	f002 fa5a 	bl	800596c <USB_WritePacket>

    ep->xfer_buff  += len;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	441a      	add	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d809      	bhi.n	80034fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d203      	bcs.n	80034fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1be      	bne.n	8003478 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	429a      	cmp	r2, r3
 8003504:	d811      	bhi.n	800352a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2201      	movs	r2, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	43db      	mvns	r3, r3
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003526:	4013      	ands	r3, r2
 8003528:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	333c      	adds	r3, #60	; 0x3c
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d17b      	bne.n	8003662 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	4a61      	ldr	r2, [pc, #388]	; (80036fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	f240 80b9 	bls.w	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80b3 	beq.w	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359c:	6093      	str	r3, [r2, #8]
 800359e:	e0a7      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	2320      	movs	r3, #32
 80035ba:	6093      	str	r3, [r2, #8]
 80035bc:	e098      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f040 8093 	bne.w	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d90f      	bls.n	80035f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	461a      	mov	r2, r3
 80035ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ee:	6093      	str	r3, [r2, #8]
 80035f0:	e07e      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	440b      	add	r3, r1
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	1ad2      	subs	r2, r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d114      	bne.n	8003654 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800363c:	461a      	mov	r2, r3
 800363e:	2101      	movs	r1, #1
 8003640:	f002 fc2a 	bl	8005e98 <USB_EP0_OutStart>
 8003644:	e006      	b.n	8003654 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	441a      	add	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f009 f968 	bl	800c930 <HAL_PCD_DataOutStageCallback>
 8003660:	e046      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d124      	bne.n	80036b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003686:	6093      	str	r3, [r2, #8]
 8003688:	e032      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	2320      	movs	r3, #32
 80036a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f009 f93f 	bl	800c930 <HAL_PCD_DataOutStageCallback>
 80036b2:	e01d      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036dc:	461a      	mov	r2, r3
 80036de:	2100      	movs	r1, #0
 80036e0:	f002 fbda 	bl	8005e98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f009 f920 	bl	800c930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	4f54300a 	.word	0x4f54300a
 8003700:	4f54310a 	.word	0x4f54310a

08003704 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	333c      	adds	r3, #60	; 0x3c
 800371c:	3304      	adds	r3, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <PCD_EP_OutSetupPacket_int+0x88>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d90e      	bls.n	8003758 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003756:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f009 f8d7 	bl	800c90c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <PCD_EP_OutSetupPacket_int+0x88>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d90c      	bls.n	8003780 <PCD_EP_OutSetupPacket_int+0x7c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d108      	bne.n	8003780 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003778:	461a      	mov	r2, r3
 800377a:	2101      	movs	r1, #1
 800377c:	f002 fb8c 	bl	8005e98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	4f54300a 	.word	0x4f54300a

08003790 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
 800379c:	4613      	mov	r3, r2
 800379e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ae:	883b      	ldrh	r3, [r7, #0]
 80037b0:	0419      	lsls	r1, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
 80037bc:	e028      	b.n	8003810 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e00d      	b.n	80037ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	3340      	adds	r3, #64	; 0x40
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	3301      	adds	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3ec      	bcc.n	80037d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037f8:	883b      	ldrh	r3, [r7, #0]
 80037fa:	0418      	lsls	r0, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	3b01      	subs	r3, #1
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4302      	orrs	r2, r0
 8003808:	3340      	adds	r3, #64	; 0x40
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e267      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d075      	beq.n	8003962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b04      	cmp	r3, #4
 8003880:	d00c      	beq.n	800389c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d112      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b82      	ldr	r3, [pc, #520]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389a:	d10b      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d05b      	beq.n	8003960 <HAL_RCC_OscConfig+0x108>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d157      	bne.n	8003960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e242      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d106      	bne.n	80038cc <HAL_RCC_OscConfig+0x74>
 80038be:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a75      	ldr	r2, [pc, #468]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e01d      	b.n	8003908 <HAL_RCC_OscConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x98>
 80038d6:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6f      	ldr	r2, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6c      	ldr	r2, [pc, #432]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0xb0>
 80038f0:	4b69      	ldr	r3, [pc, #420]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a68      	ldr	r2, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fa2c 	bl	8001d6c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fa28 	bl	8001d6c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e207      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0xc0>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fa18 	bl	8001d6c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003940:	f7fe fa14 	bl	8001d6c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1f3      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0xe8>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396e:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b41      	ldr	r3, [pc, #260]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x152>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1c7      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4937      	ldr	r1, [pc, #220]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e03a      	b.n	8003a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <HAL_RCC_OscConfig+0x244>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fe f9cd 	bl	8001d6c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d6:	f7fe f9c9 	bl	8001d6c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1a8      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4925      	ldr	r1, [pc, #148]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x244>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe f9ac 	bl	8001d6c <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fe f9a8 	bl	8001d6c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e187      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCC_OscConfig+0x248>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fe f98c 	bl	8001d6c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fe f988 	bl	8001d6c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e167      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x200>
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_OscConfig+0x248>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe f975 	bl	8001d6c <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	e00e      	b.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a86:	f7fe f971 	bl	8001d6c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d907      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e150      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	42470000 	.word	0x42470000
 8003aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ea      	bne.n	8003a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8097 	beq.w	8003bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	4b7d      	ldr	r3, [pc, #500]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a7c      	ldr	r2, [pc, #496]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b77      	ldr	r3, [pc, #476]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b74      	ldr	r3, [pc, #464]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a73      	ldr	r2, [pc, #460]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fe f931 	bl	8001d6c <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fe f92d 	bl	8001d6c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e10c      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x2ea>
 8003b34:	4b64      	ldr	r3, [pc, #400]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a63      	ldr	r2, [pc, #396]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	e01c      	b.n	8003b7c <HAL_RCC_OscConfig+0x324>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x30c>
 8003b4a:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	4a5e      	ldr	r2, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x324>
 8003b64:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b70:	4b55      	ldr	r3, [pc, #340]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a54      	ldr	r2, [pc, #336]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f023 0304 	bic.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fe f8f2 	bl	8001d6c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f8ee 	bl	8001d6c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0cb      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ee      	beq.n	8003b8c <HAL_RCC_OscConfig+0x334>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe f8dc 	bl	8001d6c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7fe f8d8 	bl	8001d6c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0b5      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a1 	beq.w	8003d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d05c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d141      	bne.n	8003c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe f8ac 	bl	8001d6c <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe f8a8 	bl	8001d6c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e087      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	491b      	ldr	r1, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c66:	f7fe f881 	bl	8001d6c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6e:	f7fe f87d 	bl	8001d6c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e05c      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x416>
 8003c8c:	e054      	b.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe f86a 	bl	8001d6c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7fe f866 	bl	8001d6c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e045      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x444>
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e038      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_RCC_OscConfig+0x4ec>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d121      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11a      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d90c      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d9c:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a58      	ldr	r2, [pc, #352]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	494d      	ldr	r1, [pc, #308]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d044      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d119      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e067      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4934      	ldr	r1, [pc, #208]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e38:	f7fd ff98 	bl	8001d6c <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fd ff94 	bl	8001d6c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e04f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 020c 	and.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1eb      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d20c      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4916      	ldr	r1, [pc, #88]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	490e      	ldr	r1, [pc, #56]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ece:	f000 f821 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	490a      	ldr	r1, [pc, #40]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fd66 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023c00 	.word	0x40023c00
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08010434 	.word	0x08010434
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	20000010 	.word	0x20000010

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f18:	b094      	sub	sp, #80	; 0x50
 8003f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	2300      	movs	r3, #0
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	2300      	movs	r3, #0
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2c:	4b79      	ldr	r3, [pc, #484]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d00d      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x40>
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	f200 80e1 	bhi.w	8004100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f46:	e0db      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b73      	ldr	r3, [pc, #460]	; (8004118 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f4c:	e0db      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f4e:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f52:	e0d8      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f54:	4b6f      	ldr	r3, [pc, #444]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d063      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6a:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	2200      	movs	r2, #0
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7e:	2300      	movs	r3, #0
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
 8003f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f86:	4622      	mov	r2, r4
 8003f88:	462b      	mov	r3, r5
 8003f8a:	f04f 0000 	mov.w	r0, #0
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	0159      	lsls	r1, r3, #5
 8003f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f98:	0150      	lsls	r0, r2, #5
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	1a51      	subs	r1, r2, r1
 8003fa2:	6139      	str	r1, [r7, #16]
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb8:	4659      	mov	r1, fp
 8003fba:	018b      	lsls	r3, r1, #6
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	018a      	lsls	r2, r1, #6
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fcc:	4659      	mov	r1, fp
 8003fce:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe6:	4690      	mov	r8, r2
 8003fe8:	4699      	mov	r9, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	eb18 0303 	adds.w	r3, r8, r3
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	eb49 0303 	adc.w	r3, r9, r3
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004006:	4629      	mov	r1, r5
 8004008:	024b      	lsls	r3, r1, #9
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004010:	4621      	mov	r1, r4
 8004012:	024a      	lsls	r2, r1, #9
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401a:	2200      	movs	r2, #0
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
 800401e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004024:	f7fc fdd0 	bl	8000bc8 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004030:	e058      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	2200      	movs	r2, #0
 800403a:	4618      	mov	r0, r3
 800403c:	4611      	mov	r1, r2
 800403e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	f04f 0000 	mov.w	r0, #0
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	0159      	lsls	r1, r3, #5
 800405a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800405e:	0150      	lsls	r0, r2, #5
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4641      	mov	r1, r8
 8004066:	ebb2 0a01 	subs.w	sl, r2, r1
 800406a:	4649      	mov	r1, r9
 800406c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800407c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004084:	ebb2 040a 	subs.w	r4, r2, sl
 8004088:	eb63 050b 	sbc.w	r5, r3, fp
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	00eb      	lsls	r3, r5, #3
 8004096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409a:	00e2      	lsls	r2, r4, #3
 800409c:	4614      	mov	r4, r2
 800409e:	461d      	mov	r5, r3
 80040a0:	4643      	mov	r3, r8
 80040a2:	18e3      	adds	r3, r4, r3
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	464b      	mov	r3, r9
 80040a8:	eb45 0303 	adc.w	r3, r5, r3
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ba:	4629      	mov	r1, r5
 80040bc:	028b      	lsls	r3, r1, #10
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c4:	4621      	mov	r1, r4
 80040c6:	028a      	lsls	r2, r1, #10
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ce:	2200      	movs	r2, #0
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	61fa      	str	r2, [r7, #28]
 80040d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d8:	f7fc fd76 	bl	8000bc8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	3301      	adds	r3, #1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040fe:	e002      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetSysClockFreq+0x204>)
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004108:	4618      	mov	r0, r3
 800410a:	3750      	adds	r7, #80	; 0x50
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	00f42400 	.word	0x00f42400
 800411c:	007a1200 	.word	0x007a1200

08004120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCC_GetHCLKFreq+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c

08004138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800413c:	f7ff fff0 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0b5b      	lsrs	r3, r3, #13
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_GetPCLK2Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	08010444 	.word	0x08010444

08004160 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	220f      	movs	r2, #15
 800416e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0203 	and.w	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_RCC_GetClockConfig+0x60>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0207 	and.w	r2, r3, #7
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	601a      	str	r2, [r3, #0]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40023c00 	.word	0x40023c00

080041c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e041      	b.n	800425a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f839 	bl	8004262 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 f9d8 	bl	80045b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e04e      	b.n	800432e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a23      	ldr	r2, [pc, #140]	; (800433c <HAL_TIM_Base_Start_IT+0xc4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d022      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d01d      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_TIM_Base_Start_IT+0xc8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d018      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_TIM_Base_Start_IT+0xcc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_TIM_Base_Start_IT+0xd0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_TIM_Base_Start_IT+0xd4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x80>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_TIM_Base_Start_IT+0xdc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d111      	bne.n	800431c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b06      	cmp	r3, #6
 8004308:	d010      	beq.n	800432c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	e007      	b.n	800432c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40010400 	.word	0x40010400
 8004350:	40014000 	.word	0x40014000
 8004354:	40001800 	.word	0x40001800

08004358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0202 	mvn.w	r2, #2
 8004384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8ee 	bl	800457c <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8e0 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8f1 	bl	8004590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0204 	mvn.w	r2, #4
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8c4 	bl	800457c <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8b6 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8c7 	bl	8004590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0208 	mvn.w	r2, #8
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2204      	movs	r2, #4
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f89a 	bl	800457c <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f88c 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f89d 	bl	8004590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0210 	mvn.w	r2, #16
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2208      	movs	r2, #8
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f870 	bl	800457c <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f862 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f873 	bl	8004590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10e      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0201 	mvn.w	r2, #1
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fa2e 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d107      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f902 	bl	800470c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d10e      	bne.n	8004534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d107      	bne.n	8004534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800452c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f838 	bl	80045a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d10e      	bne.n	8004560 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b20      	cmp	r3, #32
 800454e:	d107      	bne.n	8004560 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0220 	mvn.w	r2, #32
 8004558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8cc 	bl	80046f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a40      	ldr	r2, [pc, #256]	; (80046cc <TIM_Base_SetConfig+0x114>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3d      	ldr	r2, [pc, #244]	; (80046d0 <TIM_Base_SetConfig+0x118>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <TIM_Base_SetConfig+0x11c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <TIM_Base_SetConfig+0x120>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3a      	ldr	r2, [pc, #232]	; (80046dc <TIM_Base_SetConfig+0x124>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <TIM_Base_SetConfig+0x114>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d027      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <TIM_Base_SetConfig+0x118>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d023      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <TIM_Base_SetConfig+0x11c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01f      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <TIM_Base_SetConfig+0x120>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a29      	ldr	r2, [pc, #164]	; (80046dc <TIM_Base_SetConfig+0x124>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d017      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <TIM_Base_SetConfig+0x128>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <TIM_Base_SetConfig+0x12c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <TIM_Base_SetConfig+0x130>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <TIM_Base_SetConfig+0x134>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <TIM_Base_SetConfig+0x138>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <TIM_Base_SetConfig+0x13c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <TIM_Base_SetConfig+0x114>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0xf8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <TIM_Base_SetConfig+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d103      	bne.n	80046b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	615a      	str	r2, [r3, #20]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800
 80046ec:	40001800 	.word	0x40001800
 80046f0:	40001c00 	.word	0x40001c00
 80046f4:	40002000 	.word	0x40002000

080046f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004720:	b084      	sub	sp, #16
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	f107 001c 	add.w	r0, r7, #28
 800472e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b01      	cmp	r3, #1
 8004736:	d122      	bne.n	800477e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800474c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f001 fbee 	bl	8005f54 <USB_CoreReset>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e01a      	b.n	80047b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 fbe2 	bl	8005f54 <USB_CoreReset>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38
 80047a6:	e005      	b.n	80047b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10b      	bne.n	80047d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f043 0206 	orr.w	r2, r3, #6
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047de:	b004      	add	sp, #16
 80047e0:	4770      	bx	lr
	...

080047e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d165      	bne.n	80048c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a41      	ldr	r2, [pc, #260]	; (8004900 <USB_SetTurnaroundTime+0x11c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d906      	bls.n	800480e <USB_SetTurnaroundTime+0x2a>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a40      	ldr	r2, [pc, #256]	; (8004904 <USB_SetTurnaroundTime+0x120>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d202      	bcs.n	800480e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004808:	230f      	movs	r3, #15
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e062      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <USB_SetTurnaroundTime+0x120>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d306      	bcc.n	8004824 <USB_SetTurnaroundTime+0x40>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <USB_SetTurnaroundTime+0x124>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d202      	bcs.n	8004824 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800481e:	230e      	movs	r3, #14
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e057      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4a38      	ldr	r2, [pc, #224]	; (8004908 <USB_SetTurnaroundTime+0x124>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d306      	bcc.n	800483a <USB_SetTurnaroundTime+0x56>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a37      	ldr	r2, [pc, #220]	; (800490c <USB_SetTurnaroundTime+0x128>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d202      	bcs.n	800483a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004834:	230d      	movs	r3, #13
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e04c      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4a33      	ldr	r2, [pc, #204]	; (800490c <USB_SetTurnaroundTime+0x128>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d306      	bcc.n	8004850 <USB_SetTurnaroundTime+0x6c>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4a32      	ldr	r2, [pc, #200]	; (8004910 <USB_SetTurnaroundTime+0x12c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d802      	bhi.n	8004850 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800484a:	230c      	movs	r3, #12
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e041      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <USB_SetTurnaroundTime+0x12c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d906      	bls.n	8004866 <USB_SetTurnaroundTime+0x82>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a2e      	ldr	r2, [pc, #184]	; (8004914 <USB_SetTurnaroundTime+0x130>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d802      	bhi.n	8004866 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004860:	230b      	movs	r3, #11
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e036      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <USB_SetTurnaroundTime+0x130>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d906      	bls.n	800487c <USB_SetTurnaroundTime+0x98>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <USB_SetTurnaroundTime+0x134>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d802      	bhi.n	800487c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004876:	230a      	movs	r3, #10
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e02b      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <USB_SetTurnaroundTime+0x134>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d906      	bls.n	8004892 <USB_SetTurnaroundTime+0xae>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a25      	ldr	r2, [pc, #148]	; (800491c <USB_SetTurnaroundTime+0x138>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d202      	bcs.n	8004892 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800488c:	2309      	movs	r3, #9
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e020      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4a21      	ldr	r2, [pc, #132]	; (800491c <USB_SetTurnaroundTime+0x138>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d306      	bcc.n	80048a8 <USB_SetTurnaroundTime+0xc4>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a20      	ldr	r2, [pc, #128]	; (8004920 <USB_SetTurnaroundTime+0x13c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d802      	bhi.n	80048a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048a2:	2308      	movs	r3, #8
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e015      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <USB_SetTurnaroundTime+0x13c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d906      	bls.n	80048be <USB_SetTurnaroundTime+0xda>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <USB_SetTurnaroundTime+0x140>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d202      	bcs.n	80048be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048b8:	2307      	movs	r3, #7
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e00a      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048be:	2306      	movs	r3, #6
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e007      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048ca:	2309      	movs	r3, #9
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e001      	b.n	80048d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048d0:	2309      	movs	r3, #9
 80048d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	029b      	lsls	r3, r3, #10
 80048e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	00d8acbf 	.word	0x00d8acbf
 8004904:	00e4e1c0 	.word	0x00e4e1c0
 8004908:	00f42400 	.word	0x00f42400
 800490c:	01067380 	.word	0x01067380
 8004910:	011a499f 	.word	0x011a499f
 8004914:	01312cff 	.word	0x01312cff
 8004918:	014ca43f 	.word	0x014ca43f
 800491c:	016e3600 	.word	0x016e3600
 8004920:	01a6ab1f 	.word	0x01a6ab1f
 8004924:	01e84800 	.word	0x01e84800

08004928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d115      	bne.n	80049ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800499a:	2001      	movs	r0, #1
 800499c:	f7fd f9f2 	bl	8001d84 <HAL_Delay>
      ms++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f001 fa45 	bl	8005e36 <USB_GetMode>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d01e      	beq.n	80049f0 <USB_SetCurrentMode+0x84>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b31      	cmp	r3, #49	; 0x31
 80049b6:	d9f0      	bls.n	800499a <USB_SetCurrentMode+0x2e>
 80049b8:	e01a      	b.n	80049f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d115      	bne.n	80049ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fd f9d9 	bl	8001d84 <HAL_Delay>
      ms++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 fa2c 	bl	8005e36 <USB_GetMode>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <USB_SetCurrentMode+0x84>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b31      	cmp	r3, #49	; 0x31
 80049e8:	d9f0      	bls.n	80049cc <USB_SetCurrentMode+0x60>
 80049ea:	e001      	b.n	80049f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e005      	b.n	80049fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b32      	cmp	r3, #50	; 0x32
 80049f4:	d101      	bne.n	80049fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a04:	b084      	sub	sp, #16
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b086      	sub	sp, #24
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e009      	b.n	8004a38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3340      	adds	r3, #64	; 0x40
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	2200      	movs	r2, #0
 8004a30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3301      	adds	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b0e      	cmp	r3, #14
 8004a3c:	d9f2      	bls.n	8004a24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d11c      	bne.n	8004a7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f043 0302 	orr.w	r3, r3, #2
 8004a56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7c:	e00b      	b.n	8004a96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	680b      	ldr	r3, [r1, #0]
 8004ab4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10c      	bne.n	8004ad6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f965 	bl	8004d94 <USB_SetDevSpeed>
 8004aca:	e008      	b.n	8004ade <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004acc:	2101      	movs	r1, #1
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f960 	bl	8004d94 <USB_SetDevSpeed>
 8004ad4:	e003      	b.n	8004ade <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f95b 	bl	8004d94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ade:	2110      	movs	r1, #16
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8f3 	bl	8004ccc <USB_FlushTxFifo>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f91f 	bl	8004d34 <USB_FlushRxFifo>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	461a      	mov	r2, r3
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b12:	461a      	mov	r2, r3
 8004b14:	2300      	movs	r3, #0
 8004b16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2300      	movs	r3, #0
 8004b22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e043      	b.n	8004bb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b40:	d118      	bne.n	8004b74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	461a      	mov	r2, r3
 8004b56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e013      	b.n	8004b86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e008      	b.n	8004b86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	461a      	mov	r2, r3
 8004b82:	2300      	movs	r3, #0
 8004b84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004baa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d3b7      	bcc.n	8004b2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e043      	b.n	8004c48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bd6:	d118      	bne.n	8004c0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e013      	b.n	8004c1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e008      	b.n	8004c1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3301      	adds	r3, #1
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d3b7      	bcc.n	8004bc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f043 0210 	orr.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <USB_DevInit+0x2c4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f043 0208 	orr.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc4:	b004      	add	sp, #16
 8004cc6:	4770      	bx	lr
 8004cc8:	803c3800 	.word	0x803c3800

08004ccc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <USB_FlushTxFifo+0x64>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e01b      	b.n	8004d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	daf2      	bge.n	8004cda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	019b      	lsls	r3, r3, #6
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <USB_FlushTxFifo+0x64>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e006      	b.n	8004d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d0f0      	beq.n	8004d04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	00030d40 	.word	0x00030d40

08004d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <USB_FlushRxFifo+0x5c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e018      	b.n	8004d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	daf2      	bge.n	8004d40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2210      	movs	r2, #16
 8004d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <USB_FlushRxFifo+0x5c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e006      	b.n	8004d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d0f0      	beq.n	8004d64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	00030d40 	.word	0x00030d40

08004d94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0306 	and.w	r3, r3, #6
 8004dde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
 8004dea:	e00a      	b.n	8004e02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d002      	beq.n	8004df8 <USB_GetDevSpeed+0x32>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d102      	bne.n	8004dfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	75fb      	strb	r3, [r7, #23]
 8004dfc:	e001      	b.n	8004e02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dfe:	230f      	movs	r3, #15
 8004e00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d13a      	bne.n	8004ea2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d155      	bne.n	8004f10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	059b      	lsls	r3, r3, #22
 8004e86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	e036      	b.n	8004f10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11a      	bne.n	8004f10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	791b      	ldrb	r3, [r3, #4]
 8004ef4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d161      	bne.n	8005000 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f52:	d11f      	bne.n	8004f94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	0159      	lsls	r1, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	440b      	add	r3, r1
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <USB_DeactivateEndpoint+0x1b0>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
 8004ffe:	e060      	b.n	80050c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005016:	d11f      	bne.n	8005058 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005036:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	2101      	movs	r1, #1
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	43db      	mvns	r3, r3
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005078:	4013      	ands	r3, r2
 800507a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	43db      	mvns	r3, r3
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800509c:	4013      	ands	r3, r2
 800509e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	0159      	lsls	r1, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	440b      	add	r3, r1
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	4619      	mov	r1, r3
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <USB_DeactivateEndpoint+0x1b4>)
 80050be:	4013      	ands	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	ec337800 	.word	0xec337800
 80050d4:	eff37800 	.word	0xeff37800

080050d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	f040 815c 	bne.w	80053b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d132      	bne.n	8005168 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	440a      	add	r2, r1
 8005118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005120:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005144:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005160:	0cdb      	lsrs	r3, r3, #19
 8005162:	04db      	lsls	r3, r3, #19
 8005164:	6113      	str	r3, [r2, #16]
 8005166:	e074      	b.n	8005252 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	0cdb      	lsrs	r3, r3, #19
 8005184:	04db      	lsls	r3, r3, #19
 8005186:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	440b      	add	r3, r1
 80051c4:	1e59      	subs	r1, r3, #1
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051d0:	4b9d      	ldr	r3, [pc, #628]	; (8005448 <USB_EPStartXfer+0x370>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	0148      	lsls	r0, r1, #5
 80051fe:	69f9      	ldr	r1, [r7, #28]
 8005200:	4401      	add	r1, r0
 8005202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	791b      	ldrb	r3, [r3, #4]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d11f      	bne.n	8005252 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005230:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005250:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d14b      	bne.n	80052f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	461a      	mov	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	791b      	ldrb	r3, [r3, #4]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d128      	bne.n	80052ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d110      	bne.n	80052ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e00f      	b.n	80052ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e133      	b.n	8005558 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800530e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	791b      	ldrb	r3, [r3, #4]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d015      	beq.n	8005344 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 811b 	beq.w	8005558 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	69f9      	ldr	r1, [r7, #28]
 800533a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533e:	4313      	orrs	r3, r2
 8005340:	634b      	str	r3, [r1, #52]	; 0x34
 8005342:	e109      	b.n	8005558 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d110      	bne.n	8005376 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e00f      	b.n	8005396 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6919      	ldr	r1, [r3, #16]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	b298      	uxth	r0, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	4603      	mov	r3, r0
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fade 	bl	800596c <USB_WritePacket>
 80053b0:	e0d2      	b.n	8005558 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053cc:	0cdb      	lsrs	r3, r3, #19
 80053ce:	04db      	lsls	r3, r3, #19
 80053d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d126      	bne.n	800544c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	0148      	lsls	r0, r1, #5
 8005418:	69f9      	ldr	r1, [r7, #28]
 800541a:	4401      	add	r1, r0
 800541c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005442:	6113      	str	r3, [r2, #16]
 8005444:	e03a      	b.n	80054bc <USB_EPStartXfer+0x3e4>
 8005446:	bf00      	nop
 8005448:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4413      	add	r3, r2
 8005456:	1e5a      	subs	r2, r3, #1
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	8afa      	ldrh	r2, [r7, #22]
 8005468:	fb03 f202 	mul.w	r2, r3, r2
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	8afb      	ldrh	r3, [r7, #22]
 8005480:	04d9      	lsls	r1, r3, #19
 8005482:	4b38      	ldr	r3, [pc, #224]	; (8005564 <USB_EPStartXfer+0x48c>)
 8005484:	400b      	ands	r3, r1
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	0148      	lsls	r0, r1, #5
 800548a:	69f9      	ldr	r1, [r7, #28]
 800548c:	4401      	add	r1, r0
 800548e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005492:	4313      	orrs	r3, r2
 8005494:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	0148      	lsls	r0, r1, #5
 80054b0:	69f9      	ldr	r1, [r7, #28]
 80054b2:	4401      	add	r1, r0
 80054b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054b8:	4313      	orrs	r3, r2
 80054ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10d      	bne.n	80054de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6919      	ldr	r1, [r3, #16]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	460a      	mov	r2, r1
 80054dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	791b      	ldrb	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d128      	bne.n	8005538 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d110      	bne.n	8005518 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e00f      	b.n	8005538 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005536:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	1ff80000 	.word	0x1ff80000

08005568 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b01      	cmp	r3, #1
 8005586:	f040 80ce 	bne.w	8005726 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d132      	bne.n	80055f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	0cdb      	lsrs	r3, r3, #19
 80055f2:	04db      	lsls	r3, r3, #19
 80055f4:	6113      	str	r3, [r2, #16]
 80055f6:	e04e      	b.n	8005696 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	0cdb      	lsrs	r3, r3, #19
 8005614:	04db      	lsls	r3, r3, #19
 8005616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005636:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800566e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	0148      	lsls	r0, r1, #5
 800568a:	6979      	ldr	r1, [r7, #20]
 800568c:	4401      	add	r1, r0
 800568e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d11e      	bne.n	80056da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e097      	b.n	800580a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8083 	beq.w	800580a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	6979      	ldr	r1, [r7, #20]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4313      	orrs	r3, r2
 8005722:	634b      	str	r3, [r1, #52]	; 0x34
 8005724:	e071      	b.n	800580a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005740:	0cdb      	lsrs	r3, r3, #19
 8005742:	04db      	lsls	r3, r3, #19
 8005744:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005768:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b8:	6939      	ldr	r1, [r7, #16]
 80057ba:	0148      	lsls	r0, r1, #5
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	4401      	add	r1, r0
 80057c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057c4:	4313      	orrs	r3, r2
 80057c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10d      	bne.n	80057ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6919      	ldr	r1, [r3, #16]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	460a      	mov	r2, r1
 80057e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005804:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005808:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d14a      	bne.n	80058cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584e:	f040 8086 	bne.w	800595e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	7812      	ldrb	r2, [r2, #0]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005874:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005898:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3301      	adds	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d902      	bls.n	80058b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
          break;
 80058ae:	e056      	b.n	800595e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058c8:	d0e7      	beq.n	800589a <USB_EPStopXfer+0x82>
 80058ca:	e048      	b.n	800595e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e4:	d13b      	bne.n	800595e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	7812      	ldrb	r2, [r2, #0]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005908:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	7812      	ldrb	r2, [r2, #0]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800592c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3301      	adds	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f242 7210 	movw	r2, #10000	; 0x2710
 800593a:	4293      	cmp	r3, r2
 800593c:	d902      	bls.n	8005944 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
          break;
 8005942:	e00c      	b.n	800595e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800595c:	d0e7      	beq.n	800592e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4611      	mov	r1, r2
 8005978:	461a      	mov	r2, r3
 800597a:	460b      	mov	r3, r1
 800597c:	71fb      	strb	r3, [r7, #7]
 800597e:	4613      	mov	r3, r2
 8005980:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800598a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d123      	bne.n	80059da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005992:	88bb      	ldrh	r3, [r7, #4]
 8005994:	3303      	adds	r3, #3
 8005996:	089b      	lsrs	r3, r3, #2
 8005998:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e018      	b.n	80059d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	031a      	lsls	r2, r3, #12
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ac:	461a      	mov	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3e2      	bcc.n	80059a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3724      	adds	r7, #36	; 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b08b      	sub	sp, #44	; 0x2c
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	e014      	b.n	8005a3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	3301      	adds	r3, #1
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	3301      	adds	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	3301      	adds	r3, #1
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	3301      	adds	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d3e6      	bcc.n	8005a14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a46:	8bfb      	ldrh	r3, [r7, #30]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01e      	beq.n	8005a8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a56:	461a      	mov	r2, r3
 8005a58:	f107 0310 	add.w	r3, r7, #16
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	701a      	strb	r2, [r3, #0]
      i++;
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	3301      	adds	r3, #1
 8005a76:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a7e:	8bfb      	ldrh	r3, [r7, #30]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a84:	8bfb      	ldrh	r3, [r7, #30]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1ea      	bne.n	8005a60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	372c      	adds	r7, #44	; 0x2c
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d12c      	bne.n	8005b0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	db12      	blt.n	8005aec <USB_EPSetStall+0x54>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e02b      	b.n	8005b66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	db12      	blt.n	8005b46 <USB_EPSetStall+0xae>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d128      	bne.n	8005be2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	791b      	ldrb	r3, [r3, #4]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d003      	beq.n	8005bc0 <USB_EPClearStall+0x4c>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	791b      	ldrb	r3, [r3, #4]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d138      	bne.n	8005c32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e027      	b.n	8005c32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	791b      	ldrb	r3, [r3, #4]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d003      	beq.n	8005c12 <USB_EPClearStall+0x9e>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	791b      	ldrb	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d10f      	bne.n	8005c32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cba:	f023 0302 	bic.w	r3, r3, #2
 8005cbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ce8:	f023 0303 	bic.w	r3, r3, #3
 8005cec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfc:	f043 0302 	orr.w	r3, r3, #2
 8005d00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d28:	68fb      	ldr	r3, [r7, #12]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	b29b      	uxth	r3, r3
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	01db      	lsls	r3, r3, #7
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4013      	ands	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e28:	68bb      	ldr	r3, [r7, #8]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0301 	and.w	r3, r3, #1
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	333c      	adds	r3, #60	; 0x3c
 8005eae:	3304      	adds	r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <USB_EP0_OutStart+0xb8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d90a      	bls.n	8005ed2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ecc:	d101      	bne.n	8005ed2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e037      	b.n	8005f42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f00:	f043 0318 	orr.w	r3, r3, #24
 8005f04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10f      	bne.n	8005f40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	4f54300a 	.word	0x4f54300a

08005f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <USB_CoreReset+0x64>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e01b      	b.n	8005faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	daf2      	bge.n	8005f60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f043 0201 	orr.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <USB_CoreReset+0x64>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e006      	b.n	8005faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d0f0      	beq.n	8005f8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fcc:	f006 ff1a 	bl	800ce04 <USBD_static_malloc>
 8005fd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32b0      	adds	r2, #176	; 0xb0
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e0d4      	b.n	8006196 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f007 f87f 	bl	800d0f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	32b0      	adds	r2, #176	; 0xb0
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	32b0      	adds	r2, #176	; 0xb0
 8006012:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7c1b      	ldrb	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d138      	bne.n	8006096 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006024:	4b5e      	ldr	r3, [pc, #376]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 8006026:	7819      	ldrb	r1, [r3, #0]
 8006028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602c:	2202      	movs	r2, #2
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f006 fdc5 	bl	800cbbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006034:	4b5a      	ldr	r3, [pc, #360]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3324      	adds	r3, #36	; 0x24
 800604a:	2201      	movs	r2, #1
 800604c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800604e:	4b55      	ldr	r3, [pc, #340]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 8006050:	7819      	ldrb	r1, [r3, #0]
 8006052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006056:	2202      	movs	r2, #2
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f006 fdb0 	bl	800cbbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800605e:	4b51      	ldr	r3, [pc, #324]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f003 020f 	and.w	r2, r3, #15
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006076:	2201      	movs	r2, #1
 8006078:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800607a:	4b4b      	ldr	r3, [pc, #300]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	3326      	adds	r3, #38	; 0x26
 8006090:	2210      	movs	r2, #16
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	e035      	b.n	8006102 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006096:	4b42      	ldr	r3, [pc, #264]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	2340      	movs	r3, #64	; 0x40
 800609c:	2202      	movs	r2, #2
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f006 fd8d 	bl	800cbbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060a4:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3324      	adds	r3, #36	; 0x24
 80060ba:	2201      	movs	r2, #1
 80060bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060be:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 80060c0:	7819      	ldrb	r1, [r3, #0]
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	2202      	movs	r2, #2
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f006 fd79 	bl	800cbbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060cc:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060e4:	2201      	movs	r2, #1
 80060e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060e8:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3326      	adds	r3, #38	; 0x26
 80060fe:	2210      	movs	r2, #16
 8006100:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006102:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 8006104:	7819      	ldrb	r1, [r3, #0]
 8006106:	2308      	movs	r3, #8
 8006108:	2203      	movs	r2, #3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f006 fd57 	bl	800cbbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3324      	adds	r3, #36	; 0x24
 8006126:	2201      	movs	r2, #1
 8006128:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	33b0      	adds	r3, #176	; 0xb0
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006160:	2302      	movs	r3, #2
 8006162:	e018      	b.n	8006196 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	7c1b      	ldrb	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 800616e:	7819      	ldrb	r1, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f006 fe0e 	bl	800cd9c <USBD_LL_PrepareReceive>
 8006180:	e008      	b.n	8006194 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 8006184:	7819      	ldrb	r1, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f006 fe04 	bl	800cd9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	2000009f 	.word	0x2000009f
 80061a4:	200000a0 	.word	0x200000a0
 80061a8:	200000a1 	.word	0x200000a1

080061ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061b8:	4b3a      	ldr	r3, [pc, #232]	; (80062a4 <USBD_CDC_DeInit+0xf8>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f006 fd23 	bl	800cc0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80061c4:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <USBD_CDC_DeInit+0xf8>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061de:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <USBD_CDC_DeInit+0xfc>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f006 fd10 	bl	800cc0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061ea:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <USBD_CDC_DeInit+0xfc>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006202:	2200      	movs	r2, #0
 8006204:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006206:	4b29      	ldr	r3, [pc, #164]	; (80062ac <USBD_CDC_DeInit+0x100>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f006 fcfc 	bl	800cc0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006212:	4b26      	ldr	r3, [pc, #152]	; (80062ac <USBD_CDC_DeInit+0x100>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	2200      	movs	r2, #0
 800622a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800622c:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <USBD_CDC_DeInit+0x100>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	3326      	adds	r3, #38	; 0x26
 8006242:	2200      	movs	r2, #0
 8006244:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32b0      	adds	r2, #176	; 0xb0
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01f      	beq.n	8006298 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	33b0      	adds	r3, #176	; 0xb0
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	32b0      	adds	r2, #176	; 0xb0
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	4618      	mov	r0, r3
 800627c:	f006 fdd0 	bl	800ce20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32b0      	adds	r2, #176	; 0xb0
 800628a:	2100      	movs	r1, #0
 800628c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000009f 	.word	0x2000009f
 80062a8:	200000a0 	.word	0x200000a0
 80062ac:	200000a1 	.word	0x200000a1

080062b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	32b0      	adds	r2, #176	; 0xb0
 80062c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	e0bf      	b.n	8006460 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d050      	beq.n	800638e <USBD_CDC_Setup+0xde>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	f040 80af 	bne.w	8006450 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d03a      	beq.n	8006370 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	da1b      	bge.n	800633c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	33b0      	adds	r3, #176	; 0xb0
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800631a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	88d2      	ldrh	r2, [r2, #6]
 8006320:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	88db      	ldrh	r3, [r3, #6]
 8006326:	2b07      	cmp	r3, #7
 8006328:	bf28      	it	cs
 800632a:	2307      	movcs	r3, #7
 800632c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	89fa      	ldrh	r2, [r7, #14]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fd89 	bl	8007e4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800633a:	e090      	b.n	800645e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785a      	ldrb	r2, [r3, #1]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	2b3f      	cmp	r3, #63	; 0x3f
 800634c:	d803      	bhi.n	8006356 <USBD_CDC_Setup+0xa6>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	e000      	b.n	8006358 <USBD_CDC_Setup+0xa8>
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800635e:	6939      	ldr	r1, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006366:	461a      	mov	r2, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fd9b 	bl	8007ea4 <USBD_CtlPrepareRx>
      break;
 800636e:	e076      	b.n	800645e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	33b0      	adds	r3, #176	; 0xb0
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	7850      	ldrb	r0, [r2, #1]
 8006386:	2200      	movs	r2, #0
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	4798      	blx	r3
      break;
 800638c:	e067      	b.n	800645e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b0b      	cmp	r3, #11
 8006394:	d851      	bhi.n	800643a <USBD_CDC_Setup+0x18a>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <USBD_CDC_Setup+0xec>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063cd 	.word	0x080063cd
 80063a0:	08006449 	.word	0x08006449
 80063a4:	0800643b 	.word	0x0800643b
 80063a8:	0800643b 	.word	0x0800643b
 80063ac:	0800643b 	.word	0x0800643b
 80063b0:	0800643b 	.word	0x0800643b
 80063b4:	0800643b 	.word	0x0800643b
 80063b8:	0800643b 	.word	0x0800643b
 80063bc:	0800643b 	.word	0x0800643b
 80063c0:	0800643b 	.word	0x0800643b
 80063c4:	080063f7 	.word	0x080063f7
 80063c8:	08006421 	.word	0x08006421
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d107      	bne.n	80063e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063d8:	f107 030a 	add.w	r3, r7, #10
 80063dc:	2202      	movs	r2, #2
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fd33 	bl	8007e4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063e6:	e032      	b.n	800644e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fcbd 	bl	8007d6a <USBD_CtlError>
            ret = USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	75fb      	strb	r3, [r7, #23]
          break;
 80063f4:	e02b      	b.n	800644e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d107      	bne.n	8006412 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006402:	f107 030d 	add.w	r3, r7, #13
 8006406:	2201      	movs	r2, #1
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fd1e 	bl	8007e4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006410:	e01d      	b.n	800644e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fca8 	bl	8007d6a <USBD_CtlError>
            ret = USBD_FAIL;
 800641a:	2303      	movs	r3, #3
 800641c:	75fb      	strb	r3, [r7, #23]
          break;
 800641e:	e016      	b.n	800644e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d00f      	beq.n	800644c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fc9b 	bl	8007d6a <USBD_CtlError>
            ret = USBD_FAIL;
 8006434:	2303      	movs	r3, #3
 8006436:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006438:	e008      	b.n	800644c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fc94 	bl	8007d6a <USBD_CtlError>
          ret = USBD_FAIL;
 8006442:	2303      	movs	r3, #3
 8006444:	75fb      	strb	r3, [r7, #23]
          break;
 8006446:	e002      	b.n	800644e <USBD_CDC_Setup+0x19e>
          break;
 8006448:	bf00      	nop
 800644a:	e008      	b.n	800645e <USBD_CDC_Setup+0x1ae>
          break;
 800644c:	bf00      	nop
      }
      break;
 800644e:	e006      	b.n	800645e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fc89 	bl	8007d6a <USBD_CtlError>
      ret = USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	bf00      	nop
  }

  return (uint8_t)ret;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800647a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32b0      	adds	r2, #176	; 0xb0
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800648e:	2303      	movs	r3, #3
 8006490:	e065      	b.n	800655e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32b0      	adds	r2, #176	; 0xb0
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	3318      	adds	r3, #24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02f      	beq.n	800651c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	3318      	adds	r3, #24
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	f003 010f 	and.w	r1, r3, #15
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	460b      	mov	r3, r1
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	440b      	add	r3, r1
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4403      	add	r3, r0
 80064e4:	3348      	adds	r3, #72	; 0x48
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d112      	bne.n	800651c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	3318      	adds	r3, #24
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800650e:	78f9      	ldrb	r1, [r7, #3]
 8006510:	2300      	movs	r3, #0
 8006512:	2200      	movs	r2, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f006 fc20 	bl	800cd5a <USBD_LL_Transmit>
 800651a:	e01f      	b.n	800655c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	; 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	33b0      	adds	r3, #176	; 0xb0
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	32b0      	adds	r2, #176	; 0xb0
 800657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006580:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	32b0      	adds	r2, #176	; 0xb0
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	e01a      	b.n	80065ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f006 fc1e 	bl	800cdde <USBD_LL_GetRxDataSize>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	33b0      	adds	r3, #176	; 0xb0
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065c8:	4611      	mov	r1, r2
 80065ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	32b0      	adds	r2, #176	; 0xb0
 80065e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e025      	b.n	8006644 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	33b0      	adds	r3, #176	; 0xb0
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01a      	beq.n	8006642 <USBD_CDC_EP0_RxReady+0x6c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006612:	2bff      	cmp	r3, #255	; 0xff
 8006614:	d015      	beq.n	8006642 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	33b0      	adds	r3, #176	; 0xb0
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800662e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006636:	b292      	uxth	r2, r2
 8006638:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006654:	2182      	movs	r1, #130	; 0x82
 8006656:	4818      	ldr	r0, [pc, #96]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006658:	f000 fd4f 	bl	80070fa <USBD_GetEpDesc>
 800665c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800665e:	2101      	movs	r1, #1
 8006660:	4815      	ldr	r0, [pc, #84]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006662:	f000 fd4a 	bl	80070fa <USBD_GetEpDesc>
 8006666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006668:	2181      	movs	r1, #129	; 0x81
 800666a:	4813      	ldr	r0, [pc, #76]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800666c:	f000 fd45 	bl	80070fa <USBD_GetEpDesc>
 8006670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2210      	movs	r2, #16
 800667c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2200      	movs	r2, #0
 8006688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668c:	711a      	strb	r2, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a0:	711a      	strb	r2, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2243      	movs	r2, #67	; 0x43
 80066aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000005c 	.word	0x2000005c

080066bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066c4:	2182      	movs	r1, #130	; 0x82
 80066c6:	4818      	ldr	r0, [pc, #96]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066c8:	f000 fd17 	bl	80070fa <USBD_GetEpDesc>
 80066cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066ce:	2101      	movs	r1, #1
 80066d0:	4815      	ldr	r0, [pc, #84]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066d2:	f000 fd12 	bl	80070fa <USBD_GetEpDesc>
 80066d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066d8:	2181      	movs	r1, #129	; 0x81
 80066da:	4813      	ldr	r0, [pc, #76]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066dc:	f000 fd0d 	bl	80070fa <USBD_GetEpDesc>
 80066e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2210      	movs	r2, #16
 80066ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2200      	movs	r2, #0
 80066f8:	711a      	strb	r2, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f042 0202 	orr.w	r2, r2, #2
 8006700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	711a      	strb	r2, [r3, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f042 0202 	orr.w	r2, r2, #2
 8006714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2243      	movs	r2, #67	; 0x43
 800671a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800671c:	4b02      	ldr	r3, [pc, #8]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	2000005c 	.word	0x2000005c

0800672c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006734:	2182      	movs	r1, #130	; 0x82
 8006736:	4818      	ldr	r0, [pc, #96]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006738:	f000 fcdf 	bl	80070fa <USBD_GetEpDesc>
 800673c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800673e:	2101      	movs	r1, #1
 8006740:	4815      	ldr	r0, [pc, #84]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006742:	f000 fcda 	bl	80070fa <USBD_GetEpDesc>
 8006746:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006748:	2181      	movs	r1, #129	; 0x81
 800674a:	4813      	ldr	r0, [pc, #76]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800674c:	f000 fcd5 	bl	80070fa <USBD_GetEpDesc>
 8006750:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2210      	movs	r2, #16
 800675c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2200      	movs	r2, #0
 8006768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800676c:	711a      	strb	r2, [r3, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006780:	711a      	strb	r2, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2243      	movs	r2, #67	; 0x43
 800678a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800678c:	4b02      	ldr	r3, [pc, #8]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000005c 	.word	0x2000005c

0800679c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	220a      	movs	r2, #10
 80067a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	20000018 	.word	0x20000018

080067bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e009      	b.n	80067e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	33b0      	adds	r3, #176	; 0xb0
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	32b0      	adds	r2, #176	; 0xb0
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	e008      	b.n	8006828 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	32b0      	adds	r2, #176	; 0xb0
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e004      	b.n	8006862 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32b0      	adds	r2, #176	; 0xb0
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	; 0xb0
 8006896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	e025      	b.n	80068ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d11f      	bne.n	80068ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <USBD_CDC_TransmitPacket+0x88>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 020f 	and.w	r2, r3, #15
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4403      	add	r3, r0
 80068ce:	3318      	adds	r3, #24
 80068d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <USBD_CDC_TransmitPacket+0x88>)
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f006 fa39 	bl	800cd5a <USBD_LL_Transmit>

    ret = USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	2000009f 	.word	0x2000009f

080068fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32b0      	adds	r2, #176	; 0xb0
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32b0      	adds	r2, #176	; 0xb0
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006926:	2303      	movs	r3, #3
 8006928:	e018      	b.n	800695c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7c1b      	ldrb	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <USBD_CDC_ReceivePacket+0x68>)
 8006934:	7819      	ldrb	r1, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800693c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f006 fa2b 	bl	800cd9c <USBD_LL_PrepareReceive>
 8006946:	e008      	b.n	800695a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <USBD_CDC_ReceivePacket+0x68>)
 800694a:	7819      	ldrb	r1, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006952:	2340      	movs	r3, #64	; 0x40
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f006 fa21 	bl	800cd9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	200000a0 	.word	0x200000a0

08006968 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	e01f      	b.n	80069c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	79fa      	ldrb	r2, [r7, #7]
 80069b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f006 f89b 	bl	800caf0 <USBD_LL_Init>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e025      	b.n	8006a2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32ae      	adds	r2, #174	; 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00f      	beq.n	8006a1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	32ae      	adds	r2, #174	; 0xae
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	f107 020e 	add.w	r2, r7, #14
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f006 f8a3 	bl	800cb88 <USBD_LL_Start>
 8006a42:	4603      	mov	r3, r0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	4611      	mov	r1, r2
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 f908 	bl	8007cf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d01a      	beq.n	8006b40 <USBD_LL_SetupStage+0x72>
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d822      	bhi.n	8006b54 <USBD_LL_SetupStage+0x86>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <USBD_LL_SetupStage+0x4a>
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d00a      	beq.n	8006b2c <USBD_LL_SetupStage+0x5e>
 8006b16:	e01d      	b.n	8006b54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb5f 	bl	80071e4 <USBD_StdDevReq>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2a:	e020      	b.n	8006b6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fbc7 	bl	80072c8 <USBD_StdItfReq>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3e:	e016      	b.n	8006b6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc29 	bl	80073a0 <USBD_StdEPReq>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
      break;
 8006b52:	e00c      	b.n	8006b6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f006 f870 	bl	800cc48 <USBD_LL_StallEP>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6c:	bf00      	nop
  }

  return ret;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	460b      	mov	r3, r1
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d16e      	bne.n	8006c6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	f040 8098 	bne.w	8006cd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d913      	bls.n	8006bd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	bf28      	it	cs
 8006bca:	4613      	movcs	r3, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f001 f984 	bl	8007ede <USBD_CtlContinueRx>
 8006bd6:	e07d      	b.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d014      	beq.n	8006c10 <USBD_LL_DataOutStage+0x98>
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d81d      	bhi.n	8006c26 <USBD_LL_DataOutStage+0xae>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <USBD_LL_DataOutStage+0x7c>
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d003      	beq.n	8006bfa <USBD_LL_DataOutStage+0x82>
 8006bf2:	e018      	b.n	8006c26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf8:	e018      	b.n	8006c2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fa5e 	bl	80070c6 <USBD_CoreFindIF>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006c0e:	e00d      	b.n	8006c2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fa60 	bl	80070e0 <USBD_CoreFindEP>
 8006c20:	4603      	mov	r3, r0
 8006c22:	75bb      	strb	r3, [r7, #22]
            break;
 8006c24:	e002      	b.n	8006c2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75bb      	strb	r3, [r7, #22]
            break;
 8006c2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d113      	bne.n	8006c66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c3e:	7dba      	ldrb	r2, [r7, #22]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	32ae      	adds	r2, #174	; 0xae
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c4e:	7dba      	ldrb	r2, [r7, #22]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c56:	7dba      	ldrb	r2, [r7, #22]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	32ae      	adds	r2, #174	; 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 f94a 	bl	8007f00 <USBD_CtlSendStatus>
 8006c6c:	e032      	b.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 fa31 	bl	80070e0 <USBD_CoreFindEP>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c82:	7dbb      	ldrb	r3, [r7, #22]
 8006c84:	2bff      	cmp	r3, #255	; 0xff
 8006c86:	d025      	beq.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
 8006c88:	7dbb      	ldrb	r3, [r7, #22]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d122      	bne.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d117      	bne.n	8006cca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c9a:	7dba      	ldrb	r2, [r7, #22]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	32ae      	adds	r2, #174	; 0xae
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00f      	beq.n	8006cca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006caa:	7dba      	ldrb	r2, [r7, #22]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cb2:	7dba      	ldrb	r2, [r7, #22]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	32ae      	adds	r2, #174	; 0xae
 8006cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	7afa      	ldrb	r2, [r7, #11]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	4798      	blx	r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	e000      	b.n	8006cd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d16f      	bne.n	8006dd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d15a      	bne.n	8006db8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d914      	bls.n	8006d38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 f8ac 	bl	8007e82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f006 f833 	bl	800cd9c <USBD_LL_PrepareReceive>
 8006d36:	e03f      	b.n	8006db8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d11c      	bne.n	8006d7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d316      	bcc.n	8006d7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d20f      	bcs.n	8006d7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f001 f88d 	bl	8007e82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d70:	2300      	movs	r3, #0
 8006d72:	2200      	movs	r2, #0
 8006d74:	2100      	movs	r1, #0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f006 f810 	bl	800cd9c <USBD_LL_PrepareReceive>
 8006d7c:	e01c      	b.n	8006db8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d10f      	bne.n	8006daa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f005 ff4b 	bl	800cc48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f001 f8b7 	bl	8007f26 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fe42 	bl	8006a4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006dd0:	e032      	b.n	8006e38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f97f 	bl	80070e0 <USBD_CoreFindEP>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2bff      	cmp	r3, #255	; 0xff
 8006dea:	d025      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d122      	bne.n	8006e38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d11c      	bne.n	8006e38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006dfe:	7dfa      	ldrb	r2, [r7, #23]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	32ae      	adds	r2, #174	; 0xae
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d014      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e0e:	7dfa      	ldrb	r2, [r7, #23]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e16:	7dfa      	ldrb	r2, [r7, #23]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	32ae      	adds	r2, #174	; 0xae
 8006e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	7afa      	ldrb	r2, [r7, #11]
 8006e24:	4611      	mov	r1, r2
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	4798      	blx	r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e2e:	7dbb      	ldrb	r3, [r7, #22]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e34:	7dbb      	ldrb	r3, [r7, #22]
 8006e36:	e000      	b.n	8006e3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d014      	beq.n	8006ea8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00e      	beq.n	8006ea8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6852      	ldr	r2, [r2, #4]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	4611      	mov	r1, r2
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ea8:	2340      	movs	r3, #64	; 0x40
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f005 fe85 	bl	800cbbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2240      	movs	r2, #64	; 0x40
 8006ec0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f005 fe77 	bl	800cbbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	621a      	str	r2, [r3, #32]

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d106      	bne.n	8006f54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d110      	bne.n	8006f98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	32ae      	adds	r2, #174	; 0xae
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e01c      	b.n	8006ffe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d115      	bne.n	8006ffc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32ae      	adds	r2, #174	; 0xae
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	32ae      	adds	r2, #174	; 0xae
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	78fa      	ldrb	r2, [r7, #3]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	32ae      	adds	r2, #174	; 0xae
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	e01c      	b.n	8007062 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b03      	cmp	r3, #3
 8007032:	d115      	bne.n	8007060 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32ae      	adds	r2, #174	; 0xae
 800703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32ae      	adds	r2, #174	; 0xae
 8007052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	4611      	mov	r1, r2
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00e      	beq.n	80070bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6852      	ldr	r2, [r2, #4]
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	4611      	mov	r1, r2
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80070b8:	2303      	movs	r3, #3
 80070ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	429a      	cmp	r2, r3
 8007120:	d920      	bls.n	8007164 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800712a:	e013      	b.n	8007154 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800712c:	f107 030a 	add.w	r3, r7, #10
 8007130:	4619      	mov	r1, r3
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	f000 f81b 	bl	800716e <USBD_GetNextDesc>
 8007138:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b05      	cmp	r3, #5
 8007140:	d108      	bne.n	8007154 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	789b      	ldrb	r3, [r3, #2]
 800714a:	78fa      	ldrb	r2, [r7, #3]
 800714c:	429a      	cmp	r2, r3
 800714e:	d008      	beq.n	8007162 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	885b      	ldrh	r3, [r3, #2]
 8007158:	b29a      	uxth	r2, r3
 800715a:	897b      	ldrh	r3, [r7, #10]
 800715c:	429a      	cmp	r2, r3
 800715e:	d8e5      	bhi.n	800712c <USBD_GetEpDesc+0x32>
 8007160:	e000      	b.n	8007164 <USBD_GetEpDesc+0x6a>
          break;
 8007162:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007164:	693b      	ldr	r3, [r7, #16]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	881a      	ldrh	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	4413      	add	r3, r2
 8007188:	b29a      	uxth	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	3301      	adds	r3, #1
 80071be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071c6:	8a3b      	ldrh	r3, [r7, #16]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b21a      	sxth	r2, r3
 80071cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b21b      	sxth	r3, r3
 80071d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071d6:	89fb      	ldrh	r3, [r7, #14]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d005      	beq.n	800720a <USBD_StdDevReq+0x26>
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d857      	bhi.n	80072b2 <USBD_StdDevReq+0xce>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00f      	beq.n	8007226 <USBD_StdDevReq+0x42>
 8007206:	2b20      	cmp	r3, #32
 8007208:	d153      	bne.n	80072b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32ae      	adds	r2, #174	; 0xae
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
      break;
 8007224:	e04a      	b.n	80072bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b09      	cmp	r3, #9
 800722c:	d83b      	bhi.n	80072a6 <USBD_StdDevReq+0xc2>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <USBD_StdDevReq+0x50>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007289 	.word	0x08007289
 8007238:	0800729d 	.word	0x0800729d
 800723c:	080072a7 	.word	0x080072a7
 8007240:	08007293 	.word	0x08007293
 8007244:	080072a7 	.word	0x080072a7
 8007248:	08007267 	.word	0x08007267
 800724c:	0800725d 	.word	0x0800725d
 8007250:	080072a7 	.word	0x080072a7
 8007254:	0800727f 	.word	0x0800727f
 8007258:	08007271 	.word	0x08007271
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa3c 	bl	80076dc <USBD_GetDescriptor>
          break;
 8007264:	e024      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fba1 	bl	80079b0 <USBD_SetAddress>
          break;
 800726e:	e01f      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fbe0 	bl	8007a38 <USBD_SetConfig>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
          break;
 800727c:	e018      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc83 	bl	8007b8c <USBD_GetConfig>
          break;
 8007286:	e013      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fcb4 	bl	8007bf8 <USBD_GetStatus>
          break;
 8007290:	e00e      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fce3 	bl	8007c60 <USBD_SetFeature>
          break;
 800729a:	e009      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fd07 	bl	8007cb2 <USBD_ClrFeature>
          break;
 80072a4:	e004      	b.n	80072b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fd5e 	bl	8007d6a <USBD_CtlError>
          break;
 80072ae:	bf00      	nop
      }
      break;
 80072b0:	e004      	b.n	80072bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fd58 	bl	8007d6a <USBD_CtlError>
      break;
 80072ba:	bf00      	nop
  }

  return ret;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop

080072c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d005      	beq.n	80072ee <USBD_StdItfReq+0x26>
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d852      	bhi.n	800738c <USBD_StdItfReq+0xc4>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <USBD_StdItfReq+0x26>
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d14e      	bne.n	800738c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	3b01      	subs	r3, #1
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d840      	bhi.n	800737e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	889b      	ldrh	r3, [r3, #4]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d836      	bhi.n	8007374 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	889b      	ldrh	r3, [r3, #4]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fed9 	bl	80070c6 <USBD_CoreFindIF>
 8007314:	4603      	mov	r3, r0
 8007316:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	2bff      	cmp	r3, #255	; 0xff
 800731c:	d01d      	beq.n	800735a <USBD_StdItfReq+0x92>
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d11a      	bne.n	800735a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007324:	7bba      	ldrb	r2, [r7, #14]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32ae      	adds	r2, #174	; 0xae
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00f      	beq.n	8007354 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007334:	7bba      	ldrb	r2, [r7, #14]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800733c:	7bba      	ldrb	r2, [r7, #14]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	32ae      	adds	r2, #174	; 0xae
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007352:	e004      	b.n	800735e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007358:	e001      	b.n	800735e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	88db      	ldrh	r3, [r3, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d110      	bne.n	8007388 <USBD_StdItfReq+0xc0>
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fdc7 	bl	8007f00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007372:	e009      	b.n	8007388 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fcf7 	bl	8007d6a <USBD_CtlError>
          break;
 800737c:	e004      	b.n	8007388 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fcf2 	bl	8007d6a <USBD_CtlError>
          break;
 8007386:	e000      	b.n	800738a <USBD_StdItfReq+0xc2>
          break;
 8007388:	bf00      	nop
      }
      break;
 800738a:	e004      	b.n	8007396 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fceb 	bl	8007d6a <USBD_CtlError>
      break;
 8007394:	bf00      	nop
  }

  return ret;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	889b      	ldrh	r3, [r3, #4]
 80073b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d007      	beq.n	80073d0 <USBD_StdEPReq+0x30>
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	f200 817f 	bhi.w	80076c4 <USBD_StdEPReq+0x324>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d02a      	beq.n	8007420 <USBD_StdEPReq+0x80>
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	f040 817a 	bne.w	80076c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff fe83 	bl	80070e0 <USBD_CoreFindEP>
 80073da:	4603      	mov	r3, r0
 80073dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073de:	7b7b      	ldrb	r3, [r7, #13]
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	f000 8174 	beq.w	80076ce <USBD_StdEPReq+0x32e>
 80073e6:	7b7b      	ldrb	r3, [r7, #13]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 8170 	bne.w	80076ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073ee:	7b7a      	ldrb	r2, [r7, #13]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073f6:	7b7a      	ldrb	r2, [r7, #13]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32ae      	adds	r2, #174	; 0xae
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8163 	beq.w	80076ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007408:	7b7a      	ldrb	r2, [r7, #13]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	32ae      	adds	r2, #174	; 0xae
 800740e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800741e:	e156      	b.n	80076ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d008      	beq.n	800743a <USBD_StdEPReq+0x9a>
 8007428:	2b03      	cmp	r3, #3
 800742a:	f300 8145 	bgt.w	80076b8 <USBD_StdEPReq+0x318>
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 809b 	beq.w	800756a <USBD_StdEPReq+0x1ca>
 8007434:	2b01      	cmp	r3, #1
 8007436:	d03c      	beq.n	80074b2 <USBD_StdEPReq+0x112>
 8007438:	e13e      	b.n	80076b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d002      	beq.n	800744c <USBD_StdEPReq+0xac>
 8007446:	2b03      	cmp	r3, #3
 8007448:	d016      	beq.n	8007478 <USBD_StdEPReq+0xd8>
 800744a:	e02c      	b.n	80074a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00d      	beq.n	800746e <USBD_StdEPReq+0xce>
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d00a      	beq.n	800746e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f005 fbf3 	bl	800cc48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f005 fbef 	bl	800cc48 <USBD_LL_StallEP>
 800746a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800746c:	e020      	b.n	80074b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc7a 	bl	8007d6a <USBD_CtlError>
              break;
 8007476:	e01b      	b.n	80074b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	885b      	ldrh	r3, [r3, #2]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10e      	bne.n	800749e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <USBD_StdEPReq+0xfe>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d008      	beq.n	800749e <USBD_StdEPReq+0xfe>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	88db      	ldrh	r3, [r3, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f005 fbd5 	bl	800cc48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fd2e 	bl	8007f00 <USBD_CtlSendStatus>

              break;
 80074a4:	e004      	b.n	80074b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fc5e 	bl	8007d6a <USBD_CtlError>
              break;
 80074ae:	bf00      	nop
          }
          break;
 80074b0:	e107      	b.n	80076c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d002      	beq.n	80074c4 <USBD_StdEPReq+0x124>
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d016      	beq.n	80074f0 <USBD_StdEPReq+0x150>
 80074c2:	e04b      	b.n	800755c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00d      	beq.n	80074e6 <USBD_StdEPReq+0x146>
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b80      	cmp	r3, #128	; 0x80
 80074ce:	d00a      	beq.n	80074e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f005 fbb7 	bl	800cc48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074da:	2180      	movs	r1, #128	; 0x80
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f005 fbb3 	bl	800cc48 <USBD_LL_StallEP>
 80074e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074e4:	e040      	b.n	8007568 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc3e 	bl	8007d6a <USBD_CtlError>
              break;
 80074ee:	e03b      	b.n	8007568 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d136      	bne.n	8007566 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f005 fbbd 	bl	800cc86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fcf7 	bl	8007f00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff fde2 	bl	80070e0 <USBD_CoreFindEP>
 800751c:	4603      	mov	r3, r0
 800751e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007520:	7b7b      	ldrb	r3, [r7, #13]
 8007522:	2bff      	cmp	r3, #255	; 0xff
 8007524:	d01f      	beq.n	8007566 <USBD_StdEPReq+0x1c6>
 8007526:	7b7b      	ldrb	r3, [r7, #13]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11c      	bne.n	8007566 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800752c:	7b7a      	ldrb	r2, [r7, #13]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007534:	7b7a      	ldrb	r2, [r7, #13]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	32ae      	adds	r2, #174	; 0xae
 800753a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d010      	beq.n	8007566 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007544:	7b7a      	ldrb	r2, [r7, #13]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	32ae      	adds	r2, #174	; 0xae
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800755a:	e004      	b.n	8007566 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fc03 	bl	8007d6a <USBD_CtlError>
              break;
 8007564:	e000      	b.n	8007568 <USBD_StdEPReq+0x1c8>
              break;
 8007566:	bf00      	nop
          }
          break;
 8007568:	e0ab      	b.n	80076c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d002      	beq.n	800757c <USBD_StdEPReq+0x1dc>
 8007576:	2b03      	cmp	r3, #3
 8007578:	d032      	beq.n	80075e0 <USBD_StdEPReq+0x240>
 800757a:	e097      	b.n	80076ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <USBD_StdEPReq+0x1f2>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b80      	cmp	r3, #128	; 0x80
 8007586:	d004      	beq.n	8007592 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fbed 	bl	8007d6a <USBD_CtlError>
                break;
 8007590:	e091      	b.n	80076b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	da0b      	bge.n	80075b2 <USBD_StdEPReq+0x212>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	3310      	adds	r3, #16
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	3304      	adds	r3, #4
 80075b0:	e00b      	b.n	80075ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4413      	add	r3, r2
 80075c8:	3304      	adds	r3, #4
 80075ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2202      	movs	r2, #2
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc37 	bl	8007e4c <USBD_CtlSendData>
              break;
 80075de:	e06a      	b.n	80076b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da11      	bge.n	800760c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	f003 020f 	and.w	r2, r3, #15
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	3324      	adds	r3, #36	; 0x24
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d117      	bne.n	8007632 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fbb0 	bl	8007d6a <USBD_CtlError>
                  break;
 800760a:	e054      	b.n	80076b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	f003 020f 	and.w	r2, r3, #15
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fb9d 	bl	8007d6a <USBD_CtlError>
                  break;
 8007630:	e041      	b.n	80076b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	da0b      	bge.n	8007652 <USBD_StdEPReq+0x2b2>
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	3310      	adds	r3, #16
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	3304      	adds	r3, #4
 8007650:	e00b      	b.n	800766a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	4413      	add	r3, r2
 8007668:	3304      	adds	r3, #4
 800766a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <USBD_StdEPReq+0x2d8>
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b80      	cmp	r3, #128	; 0x80
 8007676:	d103      	bne.n	8007680 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e00e      	b.n	800769e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f005 fb1d 	bl	800ccc4 <USBD_LL_IsStallEP>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2201      	movs	r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e002      	b.n	800769e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2202      	movs	r2, #2
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fbd1 	bl	8007e4c <USBD_CtlSendData>
              break;
 80076aa:	e004      	b.n	80076b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fb5b 	bl	8007d6a <USBD_CtlError>
              break;
 80076b4:	bf00      	nop
          }
          break;
 80076b6:	e004      	b.n	80076c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fb55 	bl	8007d6a <USBD_CtlError>
          break;
 80076c0:	bf00      	nop
      }
      break;
 80076c2:	e005      	b.n	80076d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb4f 	bl	8007d6a <USBD_CtlError>
      break;
 80076cc:	e000      	b.n	80076d0 <USBD_StdEPReq+0x330>
      break;
 80076ce:	bf00      	nop
  }

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	885b      	ldrh	r3, [r3, #2]
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	2b06      	cmp	r3, #6
 80076fe:	f200 8128 	bhi.w	8007952 <USBD_GetDescriptor+0x276>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_GetDescriptor+0x2c>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	08007725 	.word	0x08007725
 800770c:	0800773d 	.word	0x0800773d
 8007710:	0800777d 	.word	0x0800777d
 8007714:	08007953 	.word	0x08007953
 8007718:	08007953 	.word	0x08007953
 800771c:	080078f3 	.word	0x080078f3
 8007720:	0800791f 	.word	0x0800791f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
      break;
 800773a:	e112      	b.n	8007962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7c1b      	ldrb	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10d      	bne.n	8007760 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f107 0208 	add.w	r2, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	2202      	movs	r2, #2
 800775c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800775e:	e100      	b.n	8007962 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	f107 0208 	add.w	r2, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e0f2      	b.n	8007962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	885b      	ldrh	r3, [r3, #2]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b05      	cmp	r3, #5
 8007784:	f200 80ac 	bhi.w	80078e0 <USBD_GetDescriptor+0x204>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <USBD_GetDescriptor+0xb4>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077a9 	.word	0x080077a9
 8007794:	080077dd 	.word	0x080077dd
 8007798:	08007811 	.word	0x08007811
 800779c:	08007845 	.word	0x08007845
 80077a0:	08007879 	.word	0x08007879
 80077a4:	080078ad 	.word	0x080078ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ca:	e091      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 facb 	bl	8007d6a <USBD_CtlError>
            err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
          break;
 80077da:	e089      	b.n	80078f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 0108 	add.w	r1, r7, #8
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fe:	e077      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fab1 	bl	8007d6a <USBD_CtlError>
            err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
          break;
 800780e:	e06f      	b.n	80078f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7c12      	ldrb	r2, [r2, #16]
 8007828:	f107 0108 	add.w	r1, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007832:	e05d      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa97 	bl	8007d6a <USBD_CtlError>
            err++;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	3301      	adds	r3, #1
 8007840:	72fb      	strb	r3, [r7, #11]
          break;
 8007842:	e055      	b.n	80078f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007866:	e043      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa7d 	bl	8007d6a <USBD_CtlError>
            err++;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	3301      	adds	r3, #1
 8007874:	72fb      	strb	r3, [r7, #11]
          break;
 8007876:	e03b      	b.n	80078f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789a:	e029      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa63 	bl	8007d6a <USBD_CtlError>
            err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
          break;
 80078aa:	e021      	b.n	80078f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	7c12      	ldrb	r2, [r2, #16]
 80078c4:	f107 0108 	add.w	r1, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ce:	e00f      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa49 	bl	8007d6a <USBD_CtlError>
            err++;
 80078d8:	7afb      	ldrb	r3, [r7, #11]
 80078da:	3301      	adds	r3, #1
 80078dc:	72fb      	strb	r3, [r7, #11]
          break;
 80078de:	e007      	b.n	80078f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa41 	bl	8007d6a <USBD_CtlError>
          err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078ee:	bf00      	nop
      }
      break;
 80078f0:	e037      	b.n	8007962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c1b      	ldrb	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	4610      	mov	r0, r2
 8007908:	4798      	blx	r3
 800790a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800790c:	e029      	b.n	8007962 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa2a 	bl	8007d6a <USBD_CtlError>
        err++;
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	3301      	adds	r3, #1
 800791a:	72fb      	strb	r3, [r7, #11]
      break;
 800791c:	e021      	b.n	8007962 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7c1b      	ldrb	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10d      	bne.n	8007942 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	f107 0208 	add.w	r2, r7, #8
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
 8007936:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	2207      	movs	r2, #7
 800793e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007940:	e00f      	b.n	8007962 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa10 	bl	8007d6a <USBD_CtlError>
        err++;
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	3301      	adds	r3, #1
 800794e:	72fb      	strb	r3, [r7, #11]
      break;
 8007950:	e007      	b.n	8007962 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa08 	bl	8007d6a <USBD_CtlError>
      err++;
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	3301      	adds	r3, #1
 800795e:	72fb      	strb	r3, [r7, #11]
      break;
 8007960:	bf00      	nop
  }

  if (err != 0U)
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d11e      	bne.n	80079a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d016      	beq.n	800799e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007970:	893b      	ldrh	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00e      	beq.n	8007994 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	88da      	ldrh	r2, [r3, #6]
 800797a:	893b      	ldrh	r3, [r7, #8]
 800797c:	4293      	cmp	r3, r2
 800797e:	bf28      	it	cs
 8007980:	4613      	movcs	r3, r2
 8007982:	b29b      	uxth	r3, r3
 8007984:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007986:	893b      	ldrh	r3, [r7, #8]
 8007988:	461a      	mov	r2, r3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa5d 	bl	8007e4c <USBD_CtlSendData>
 8007992:	e009      	b.n	80079a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9e7 	bl	8007d6a <USBD_CtlError>
 800799c:	e004      	b.n	80079a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 faae 	bl	8007f00 <USBD_CtlSendStatus>
 80079a4:	e000      	b.n	80079a8 <USBD_GetDescriptor+0x2cc>
    return;
 80079a6:	bf00      	nop
  }
}
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d131      	bne.n	8007a26 <USBD_SetAddress+0x76>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12d      	bne.n	8007a26 <USBD_SetAddress+0x76>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	2b7f      	cmp	r3, #127	; 0x7f
 80079d0:	d829      	bhi.n	8007a26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d104      	bne.n	80079f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9bc 	bl	8007d6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	e01d      	b.n	8007a30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7bfa      	ldrb	r2, [r7, #15]
 80079f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f005 f98b 	bl	800cd1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa7a 	bl	8007f00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	e009      	b.n	8007a30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a24:	e004      	b.n	8007a30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f99e 	bl	8007d6a <USBD_CtlError>
  }
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	885b      	ldrh	r3, [r3, #2]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	4b4e      	ldr	r3, [pc, #312]	; (8007b88 <USBD_SetConfig+0x150>)
 8007a4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a50:	4b4d      	ldr	r3, [pc, #308]	; (8007b88 <USBD_SetConfig+0x150>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d905      	bls.n	8007a64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f985 	bl	8007d6a <USBD_CtlError>
    return USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e08c      	b.n	8007b7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d002      	beq.n	8007a76 <USBD_SetConfig+0x3e>
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d029      	beq.n	8007ac8 <USBD_SetConfig+0x90>
 8007a74:	e075      	b.n	8007b62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a76:	4b44      	ldr	r3, [pc, #272]	; (8007b88 <USBD_SetConfig+0x150>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d020      	beq.n	8007ac0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a7e:	4b42      	ldr	r3, [pc, #264]	; (8007b88 <USBD_SetConfig+0x150>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a88:	4b3f      	ldr	r3, [pc, #252]	; (8007b88 <USBD_SetConfig+0x150>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fe ffe7 	bl	8006a62 <USBD_SetClassConfig>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f962 	bl	8007d6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007aae:	e065      	b.n	8007b7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fa25 	bl	8007f00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2203      	movs	r2, #3
 8007aba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007abe:	e05d      	b.n	8007b7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fa1d 	bl	8007f00 <USBD_CtlSendStatus>
      break;
 8007ac6:	e059      	b.n	8007b7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ac8:	4b2f      	ldr	r3, [pc, #188]	; (8007b88 <USBD_SetConfig+0x150>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d112      	bne.n	8007af6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ad8:	4b2b      	ldr	r3, [pc, #172]	; (8007b88 <USBD_SetConfig+0x150>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ae2:	4b29      	ldr	r3, [pc, #164]	; (8007b88 <USBD_SetConfig+0x150>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fe ffd6 	bl	8006a9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa06 	bl	8007f00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007af4:	e042      	b.n	8007b7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <USBD_SetConfig+0x150>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d02a      	beq.n	8007b5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fe ffc4 	bl	8006a9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <USBD_SetConfig+0x150>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b1c:	4b1a      	ldr	r3, [pc, #104]	; (8007b88 <USBD_SetConfig+0x150>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fe ff9d 	bl	8006a62 <USBD_SetClassConfig>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f918 	bl	8007d6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe ffa9 	bl	8006a9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b50:	e014      	b.n	8007b7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9d4 	bl	8007f00 <USBD_CtlSendStatus>
      break;
 8007b58:	e010      	b.n	8007b7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9d0 	bl	8007f00 <USBD_CtlSendStatus>
      break;
 8007b60:	e00c      	b.n	8007b7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f900 	bl	8007d6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <USBD_SetConfig+0x150>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7fe ff92 	bl	8006a9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b76:	2303      	movs	r3, #3
 8007b78:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7a:	bf00      	nop
  }

  return ret;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	200005a0 	.word	0x200005a0

08007b8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	88db      	ldrh	r3, [r3, #6]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d004      	beq.n	8007ba8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f8e2 	bl	8007d6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ba6:	e023      	b.n	8007bf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	dc02      	bgt.n	8007bba <USBD_GetConfig+0x2e>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dc03      	bgt.n	8007bc0 <USBD_GetConfig+0x34>
 8007bb8:	e015      	b.n	8007be6 <USBD_GetConfig+0x5a>
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d00b      	beq.n	8007bd6 <USBD_GetConfig+0x4a>
 8007bbe:	e012      	b.n	8007be6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f93c 	bl	8007e4c <USBD_CtlSendData>
        break;
 8007bd4:	e00c      	b.n	8007bf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f934 	bl	8007e4c <USBD_CtlSendData>
        break;
 8007be4:	e004      	b.n	8007bf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8be 	bl	8007d6a <USBD_CtlError>
        break;
 8007bee:	bf00      	nop
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d81e      	bhi.n	8007c4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	88db      	ldrh	r3, [r3, #6]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d004      	beq.n	8007c22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8a5 	bl	8007d6a <USBD_CtlError>
        break;
 8007c20:	e01a      	b.n	8007c58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f043 0202 	orr.w	r2, r3, #2
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	330c      	adds	r3, #12
 8007c42:	2202      	movs	r2, #2
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f900 	bl	8007e4c <USBD_CtlSendData>
      break;
 8007c4c:	e004      	b.n	8007c58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f88a 	bl	8007d6a <USBD_CtlError>
      break;
 8007c56:	bf00      	nop
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	885b      	ldrh	r3, [r3, #2]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d107      	bne.n	8007c82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f940 	bl	8007f00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c80:	e013      	b.n	8007caa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d10b      	bne.n	8007ca2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	889b      	ldrh	r3, [r3, #4]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f930 	bl	8007f00 <USBD_CtlSendStatus>
}
 8007ca0:	e003      	b.n	8007caa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f860 	bl	8007d6a <USBD_CtlError>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d80b      	bhi.n	8007ce2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10c      	bne.n	8007cec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f910 	bl	8007f00 <USBD_CtlSendStatus>
      }
      break;
 8007ce0:	e004      	b.n	8007cec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f840 	bl	8007d6a <USBD_CtlError>
      break;
 8007cea:	e000      	b.n	8007cee <USBD_ClrFeature+0x3c>
      break;
 8007cec:	bf00      	nop
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	781a      	ldrb	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	781a      	ldrb	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fa41 	bl	80071a8 <SWAPBYTE>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461a      	mov	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3301      	adds	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff fa34 	bl	80071a8 <SWAPBYTE>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff fa27 	bl	80071a8 <SWAPBYTE>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	80da      	strh	r2, [r3, #6]
}
 8007d62:	bf00      	nop
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d74:	2180      	movs	r1, #128	; 0x80
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f004 ff66 	bl	800cc48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f004 ff62 	bl	800cc48 <USBD_LL_StallEP>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d036      	beq.n	8007e10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f000 f836 	bl	8007e18 <USBD_GetLen>
 8007dac:	4603      	mov	r3, r0
 8007dae:	3301      	adds	r3, #1
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ddc:	e013      	b.n	8007e06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	4413      	add	r3, r2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3301      	adds	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
    idx++;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	3301      	adds	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	3301      	adds	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e7      	bne.n	8007dde <USBD_GetString+0x52>
 8007e0e:	e000      	b.n	8007e12 <USBD_GetString+0x86>
    return;
 8007e10:	bf00      	nop
  }
}
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e28:	e005      	b.n	8007e36 <USBD_GetLen+0x1e>
  {
    len++;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f5      	bne.n	8007e2a <USBD_GetLen+0x12>
  }

  return len;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	2100      	movs	r1, #0
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f004 ff71 	bl	800cd5a <USBD_LL_Transmit>

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	2100      	movs	r1, #0
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f004 ff60 	bl	800cd5a <USBD_LL_Transmit>

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f004 ff64 	bl	800cd9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f004 ff53 	bl	800cd9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f10:	2300      	movs	r3, #0
 8007f12:	2200      	movs	r2, #0
 8007f14:	2100      	movs	r1, #0
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f004 ff1f 	bl	800cd5a <USBD_LL_Transmit>

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2205      	movs	r2, #5
 8007f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f36:	2300      	movs	r3, #0
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f004 ff2d 	bl	800cd9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <__NVIC_SetPriority>:
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	db0a      	blt.n	8007f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	490c      	ldr	r1, [pc, #48]	; (8007f98 <__NVIC_SetPriority+0x4c>)
 8007f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f6a:	0112      	lsls	r2, r2, #4
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	440b      	add	r3, r1
 8007f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f74:	e00a      	b.n	8007f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4908      	ldr	r1, [pc, #32]	; (8007f9c <__NVIC_SetPriority+0x50>)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	3b04      	subs	r3, #4
 8007f84:	0112      	lsls	r2, r2, #4
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	440b      	add	r3, r1
 8007f8a:	761a      	strb	r2, [r3, #24]
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	e000e100 	.word	0xe000e100
 8007f9c:	e000ed00 	.word	0xe000ed00

08007fa0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <SysTick_Handler+0x1c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fa8:	f002 fd1e 	bl	800a9e8 <xTaskGetSchedulerState>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d001      	beq.n	8007fb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fb2:	f003 fee9 	bl	800bd88 <xPortSysTickHandler>
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	e000e010 	.word	0xe000e010

08007fc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	f06f 0004 	mvn.w	r0, #4
 8007fca:	f7ff ffbf 	bl	8007f4c <__NVIC_SetPriority>
#endif
}
 8007fce:	bf00      	nop
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fda:	f3ef 8305 	mrs	r3, IPSR
 8007fde:	603b      	str	r3, [r7, #0]
  return(result);
 8007fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fe6:	f06f 0305 	mvn.w	r3, #5
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	e00c      	b.n	8008008 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fee:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <osKernelInitialize+0x44>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d105      	bne.n	8008002 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ff6:	4b08      	ldr	r3, [pc, #32]	; (8008018 <osKernelInitialize+0x44>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	e002      	b.n	8008008 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008008:	687b      	ldr	r3, [r7, #4]
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	200005a4 	.word	0x200005a4

0800801c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008022:	f3ef 8305 	mrs	r3, IPSR
 8008026:	603b      	str	r3, [r7, #0]
  return(result);
 8008028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <osKernelStart+0x1a>
    stat = osErrorISR;
 800802e:	f06f 0305 	mvn.w	r3, #5
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	e010      	b.n	8008058 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <osKernelStart+0x48>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d109      	bne.n	8008052 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800803e:	f7ff ffbf 	bl	8007fc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <osKernelStart+0x48>)
 8008044:	2202      	movs	r2, #2
 8008046:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008048:	f001 feda 	bl	8009e00 <vTaskStartScheduler>
      stat = osOK;
 800804c:	2300      	movs	r3, #0
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	e002      	b.n	8008058 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008052:	f04f 33ff 	mov.w	r3, #4294967295
 8008056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008058:	687b      	ldr	r3, [r7, #4]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200005a4 	.word	0x200005a4

08008068 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b08e      	sub	sp, #56	; 0x38
 800806c:	af04      	add	r7, sp, #16
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008078:	f3ef 8305 	mrs	r3, IPSR
 800807c:	617b      	str	r3, [r7, #20]
  return(result);
 800807e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008080:	2b00      	cmp	r3, #0
 8008082:	d17e      	bne.n	8008182 <osThreadNew+0x11a>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d07b      	beq.n	8008182 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800808a:	2380      	movs	r3, #128	; 0x80
 800808c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800808e:	2318      	movs	r3, #24
 8008090:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008096:	f04f 33ff 	mov.w	r3, #4294967295
 800809a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d045      	beq.n	800812e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <osThreadNew+0x48>
        name = attr->name;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d008      	beq.n	80080d6 <osThreadNew+0x6e>
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	2b38      	cmp	r3, #56	; 0x38
 80080c8:	d805      	bhi.n	80080d6 <osThreadNew+0x6e>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <osThreadNew+0x72>
        return (NULL);
 80080d6:	2300      	movs	r3, #0
 80080d8:	e054      	b.n	8008184 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	089b      	lsrs	r3, r3, #2
 80080e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00e      	beq.n	8008110 <osThreadNew+0xa8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	2bbb      	cmp	r3, #187	; 0xbb
 80080f8:	d90a      	bls.n	8008110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d006      	beq.n	8008110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <osThreadNew+0xa8>
        mem = 1;
 800810a:	2301      	movs	r3, #1
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	e010      	b.n	8008132 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10c      	bne.n	8008132 <osThreadNew+0xca>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <osThreadNew+0xca>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <osThreadNew+0xca>
          mem = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	61bb      	str	r3, [r7, #24]
 800812c:	e001      	b.n	8008132 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d110      	bne.n	800815a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008140:	9202      	str	r2, [sp, #8]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6a3a      	ldr	r2, [r7, #32]
 800814c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 fc03 	bl	800995a <xTaskCreateStatic>
 8008154:	4603      	mov	r3, r0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	e013      	b.n	8008182 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d110      	bne.n	8008182 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	b29a      	uxth	r2, r3
 8008164:	f107 0310 	add.w	r3, r7, #16
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f001 fc4e 	bl	8009a14 <xTaskCreate>
 8008178:	4603      	mov	r3, r0
 800817a:	2b01      	cmp	r3, #1
 800817c:	d001      	beq.n	8008182 <osThreadNew+0x11a>
            hTask = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008182:	693b      	ldr	r3, [r7, #16]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3728      	adds	r7, #40	; 0x28
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a07      	ldr	r2, [pc, #28]	; (80081b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800819c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4a06      	ldr	r2, [pc, #24]	; (80081bc <vApplicationGetIdleTaskMemory+0x30>)
 80081a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2280      	movs	r2, #128	; 0x80
 80081a8:	601a      	str	r2, [r3, #0]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	200005a8 	.word	0x200005a8
 80081bc:	20000664 	.word	0x20000664

080081c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4a07      	ldr	r2, [pc, #28]	; (80081ec <vApplicationGetTimerTaskMemory+0x2c>)
 80081d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <vApplicationGetTimerTaskMemory+0x30>)
 80081d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081de:	601a      	str	r2, [r3, #0]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000864 	.word	0x20000864
 80081f0:	20000920 	.word	0x20000920

080081f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f103 0208 	add.w	r2, r3, #8
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f04f 32ff 	mov.w	r2, #4294967295
 800820c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f103 0208 	add.w	r2, r3, #8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f103 0208 	add.w	r2, r3, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	601a      	str	r2, [r3, #0]
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d103      	bne.n	80082b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e00c      	b.n	80082d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3308      	adds	r3, #8
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	e002      	b.n	80082c4 <vListInsert+0x2e>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d2f6      	bcs.n	80082be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6892      	ldr	r2, [r2, #8]
 800831e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6852      	ldr	r2, [r2, #4]
 8008328:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d103      	bne.n	800833c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	1e5a      	subs	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xQueueGenericReset+0x2a>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	60bb      	str	r3, [r7, #8]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008386:	f003 fc6d 	bl	800bc64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	3b01      	subs	r3, #1
 80083b8:	68f9      	ldr	r1, [r7, #12]
 80083ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083bc:	fb01 f303 	mul.w	r3, r1, r3
 80083c0:	441a      	add	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	22ff      	movs	r2, #255	; 0xff
 80083ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	22ff      	movs	r2, #255	; 0xff
 80083d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d114      	bne.n	8008406 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01a      	beq.n	800841a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3310      	adds	r3, #16
 80083e8:	4618      	mov	r0, r3
 80083ea:	f002 f831 	bl	800a450 <xTaskRemoveFromEventList>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d012      	beq.n	800841a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <xQueueGenericReset+0xcc>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	e009      	b.n	800841a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3310      	adds	r3, #16
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fef2 	bl	80081f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3324      	adds	r3, #36	; 0x24
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff feed 	bl	80081f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800841a:	f003 fc53 	bl	800bcc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800841e:	2301      	movs	r3, #1
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08e      	sub	sp, #56	; 0x38
 8008430:	af02      	add	r7, sp, #8
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <xQueueGenericCreateStatic+0x52>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <xQueueGenericCreateStatic+0x56>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <xQueueGenericCreateStatic+0x58>
 8008482:	2300      	movs	r3, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <xQueueGenericCreateStatic+0x7e>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <xQueueGenericCreateStatic+0x82>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <xQueueGenericCreateStatic+0x84>
 80084ae:	2300      	movs	r3, #0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	61fb      	str	r3, [r7, #28]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084ca:	2350      	movs	r3, #80	; 0x50
 80084cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b50      	cmp	r3, #80	; 0x50
 80084d2:	d00a      	beq.n	80084ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	61bb      	str	r3, [r7, #24]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00d      	beq.n	8008512 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4613      	mov	r3, r2
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 f83f 	bl	8008590 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008514:	4618      	mov	r0, r3
 8008516:	3730      	adds	r7, #48	; 0x30
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	; 0x28
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	613b      	str	r3, [r7, #16]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	fb02 f303 	mul.w	r3, r2, r3
 800854e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	3350      	adds	r3, #80	; 0x50
 8008554:	4618      	mov	r0, r3
 8008556:	f003 fca7 	bl	800bea8 <pvPortMalloc>
 800855a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d011      	beq.n	8008586 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	3350      	adds	r3, #80	; 0x50
 800856a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008574:	79fa      	ldrb	r2, [r7, #7]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	68b9      	ldr	r1, [r7, #8]
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f805 	bl	8008590 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008586:	69bb      	ldr	r3, [r7, #24]
	}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e002      	b.n	80085b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085be:	2101      	movs	r1, #1
 80085c0:	69b8      	ldr	r0, [r7, #24]
 80085c2:	f7ff fecb 	bl	800835c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	78fa      	ldrb	r2, [r7, #3]
 80085ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00e      	beq.n	8008602 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085f6:	2300      	movs	r3, #0
 80085f8:	2200      	movs	r2, #0
 80085fa:	2100      	movs	r1, #0
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f81d 	bl	800863c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800860a:	b580      	push	{r7, lr}
 800860c:	b086      	sub	sp, #24
 800860e:	af00      	add	r7, sp, #0
 8008610:	4603      	mov	r3, r0
 8008612:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008614:	2301      	movs	r3, #1
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	461a      	mov	r2, r3
 8008620:	6939      	ldr	r1, [r7, #16]
 8008622:	6978      	ldr	r0, [r7, #20]
 8008624:	f7ff ff7a 	bl	800851c <xQueueGenericCreate>
 8008628:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff ffd3 	bl	80085d6 <prvInitialiseMutex>

		return xNewQueue;
 8008630:	68fb      	ldr	r3, [r7, #12]
	}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08e      	sub	sp, #56	; 0x38
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800864a:	2300      	movs	r3, #0
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueGenericSend+0x32>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d103      	bne.n	800867c <xQueueGenericSend+0x40>
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <xQueueGenericSend+0x44>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <xQueueGenericSend+0x46>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <xQueueGenericSend+0x60>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d103      	bne.n	80086aa <xQueueGenericSend+0x6e>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <xQueueGenericSend+0x72>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <xQueueGenericSend+0x74>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xQueueGenericSend+0x8e>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	623b      	str	r3, [r7, #32]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ca:	f002 f98d 	bl	800a9e8 <xTaskGetSchedulerState>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <xQueueGenericSend+0x9e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <xQueueGenericSend+0xa2>
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <xQueueGenericSend+0xa4>
 80086de:	2300      	movs	r3, #0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <xQueueGenericSend+0xbe>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	61fb      	str	r3, [r7, #28]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086fa:	f003 fab3 	bl	800bc64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008706:	429a      	cmp	r2, r3
 8008708:	d302      	bcc.n	8008710 <xQueueGenericSend+0xd4>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d129      	bne.n	8008764 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008716:	f000 fbbb 	bl	8008e90 <prvCopyDataToQueue>
 800871a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	4618      	mov	r0, r3
 800872a:	f001 fe91 	bl	800a450 <xTaskRemoveFromEventList>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d013      	beq.n	800875c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008734:	4b3f      	ldr	r3, [pc, #252]	; (8008834 <xQueueGenericSend+0x1f8>)
 8008736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	e00a      	b.n	800875c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800874c:	4b39      	ldr	r3, [pc, #228]	; (8008834 <xQueueGenericSend+0x1f8>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800875c:	f003 fab2 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 8008760:	2301      	movs	r3, #1
 8008762:	e063      	b.n	800882c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800876a:	f003 faab 	bl	800bcc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800876e:	2300      	movs	r3, #0
 8008770:	e05c      	b.n	800882c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	2b00      	cmp	r3, #0
 8008776:	d106      	bne.n	8008786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	4618      	mov	r0, r3
 800877e:	f001 fef1 	bl	800a564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008782:	2301      	movs	r3, #1
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008786:	f003 fa9d 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800878a:	f001 fba9 	bl	8009ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800878e:	f003 fa69 	bl	800bc64 <vPortEnterCritical>
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008798:	b25b      	sxtb	r3, r3
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d103      	bne.n	80087a8 <xQueueGenericSend+0x16c>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ae:	b25b      	sxtb	r3, r3
 80087b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b4:	d103      	bne.n	80087be <xQueueGenericSend+0x182>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087be:	f003 fa81 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087c2:	1d3a      	adds	r2, r7, #4
 80087c4:	f107 0314 	add.w	r3, r7, #20
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 fee0 	bl	800a590 <xTaskCheckForTimeOut>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d124      	bne.n	8008820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d8:	f000 fc52 	bl	8009080 <prvIsQueueFull>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d018      	beq.n	8008814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	3310      	adds	r3, #16
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fde0 	bl	800a3b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f2:	f000 fbdd 	bl	8008fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087f6:	f001 fb81 	bl	8009efc <xTaskResumeAll>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f47f af7c 	bne.w	80086fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <xQueueGenericSend+0x1f8>)
 8008804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	e772      	b.n	80086fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008816:	f000 fbcb 	bl	8008fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800881a:	f001 fb6f 	bl	8009efc <xTaskResumeAll>
 800881e:	e76c      	b.n	80086fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008822:	f000 fbc5 	bl	8008fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008826:	f001 fb69 	bl	8009efc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800882a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800882c:	4618      	mov	r0, r3
 800882e:	3738      	adds	r7, #56	; 0x38
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b090      	sub	sp, #64	; 0x40
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <xQueueGenericSendFromISR+0x3c>
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <xQueueGenericSendFromISR+0x40>
 8008874:	2301      	movs	r3, #1
 8008876:	e000      	b.n	800887a <xQueueGenericSendFromISR+0x42>
 8008878:	2300      	movs	r3, #0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d103      	bne.n	80088a2 <xQueueGenericSendFromISR+0x6a>
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <xQueueGenericSendFromISR+0x6e>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueGenericSendFromISR+0x70>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	623b      	str	r3, [r7, #32]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088c2:	f003 fab1 	bl	800be28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088c6:	f3ef 8211 	mrs	r2, BASEPRI
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	61fa      	str	r2, [r7, #28]
 80088dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <xQueueGenericSendFromISR+0xbc>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d12f      	bne.n	8008954 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800890a:	f000 fac1 	bl	8008e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800890e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d112      	bne.n	800893e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b00      	cmp	r3, #0
 800891e:	d016      	beq.n	800894e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	4618      	mov	r0, r3
 8008926:	f001 fd93 	bl	800a450 <xTaskRemoveFromEventList>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00e      	beq.n	800894e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00b      	beq.n	800894e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e007      	b.n	800894e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800893e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008942:	3301      	adds	r3, #1
 8008944:	b2db      	uxtb	r3, r3
 8008946:	b25a      	sxtb	r2, r3
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800894e:	2301      	movs	r3, #1
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008952:	e001      	b.n	8008958 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008954:	2300      	movs	r3, #0
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008966:	4618      	mov	r0, r3
 8008968:	3740      	adds	r7, #64	; 0x40
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b08e      	sub	sp, #56	; 0x38
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	623b      	str	r3, [r7, #32]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61fb      	str	r3, [r7, #28]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <xQueueGiveFromISR+0x58>
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <xQueueGiveFromISR+0x5c>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <xQueueGiveFromISR+0x5e>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	61bb      	str	r3, [r7, #24]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e6:	f003 fa1f 	bl	800be28 <vPortValidateInterruptPriority>
	__asm volatile
 80089ea:	f3ef 8211 	mrs	r2, BASEPRI
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	617a      	str	r2, [r7, #20]
 8008a00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008a02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d22b      	bcs.n	8008a6e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d112      	bne.n	8008a58 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	3324      	adds	r3, #36	; 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fd06 	bl	800a450 <xTaskRemoveFromEventList>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e007      	b.n	8008a68 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	b25a      	sxtb	r2, r3
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6c:	e001      	b.n	8008a72 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	637b      	str	r3, [r7, #52]	; 0x34
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f383 8811 	msr	BASEPRI, r3
}
 8008a7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3738      	adds	r7, #56	; 0x38
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08c      	sub	sp, #48	; 0x30
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <xQueueReceive+0x30>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	623b      	str	r3, [r7, #32]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <xQueueReceive+0x3e>
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <xQueueReceive+0x42>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <xQueueReceive+0x44>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <xQueueReceive+0x5e>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	61fb      	str	r3, [r7, #28]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ae6:	f001 ff7f 	bl	800a9e8 <xTaskGetSchedulerState>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d102      	bne.n	8008af6 <xQueueReceive+0x6e>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <xQueueReceive+0x72>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <xQueueReceive+0x74>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <xQueueReceive+0x8e>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	61bb      	str	r3, [r7, #24]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b16:	f003 f8a5 	bl	800bc64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01f      	beq.n	8008b66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2a:	f000 fa1b 	bl	8008f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	1e5a      	subs	r2, r3, #1
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00f      	beq.n	8008b5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	3310      	adds	r3, #16
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 fc84 	bl	800a450 <xTaskRemoveFromEventList>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b4e:	4b3d      	ldr	r3, [pc, #244]	; (8008c44 <xQueueReceive+0x1bc>)
 8008b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b5e:	f003 f8b1 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e069      	b.n	8008c3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b6c:	f003 f8aa 	bl	800bcc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e062      	b.n	8008c3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b7a:	f107 0310 	add.w	r3, r7, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fcf0 	bl	800a564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b84:	2301      	movs	r3, #1
 8008b86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b88:	f003 f89c 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b8c:	f001 f9a8 	bl	8009ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b90:	f003 f868 	bl	800bc64 <vPortEnterCritical>
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b9a:	b25b      	sxtb	r3, r3
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d103      	bne.n	8008baa <xQueueReceive+0x122>
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb0:	b25b      	sxtb	r3, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d103      	bne.n	8008bc0 <xQueueReceive+0x138>
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc0:	f003 f880 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc4:	1d3a      	adds	r2, r7, #4
 8008bc6:	f107 0310 	add.w	r3, r7, #16
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 fcdf 	bl	800a590 <xTaskCheckForTimeOut>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d123      	bne.n	8008c20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bda:	f000 fa3b 	bl	8009054 <prvIsQueueEmpty>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d017      	beq.n	8008c14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	3324      	adds	r3, #36	; 0x24
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 fbdf 	bl	800a3b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf4:	f000 f9dc 	bl	8008fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bf8:	f001 f980 	bl	8009efc <xTaskResumeAll>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d189      	bne.n	8008b16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <xQueueReceive+0x1bc>)
 8008c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	e780      	b.n	8008b16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c16:	f000 f9cb 	bl	8008fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c1a:	f001 f96f 	bl	8009efc <xTaskResumeAll>
 8008c1e:	e77a      	b.n	8008b16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c22:	f000 f9c5 	bl	8008fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c26:	f001 f969 	bl	8009efc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c2c:	f000 fa12 	bl	8009054 <prvIsQueueEmpty>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f43f af6f 	beq.w	8008b16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3730      	adds	r7, #48	; 0x30
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08e      	sub	sp, #56	; 0x38
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	623b      	str	r3, [r7, #32]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00a      	beq.n	8008c98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	61fb      	str	r3, [r7, #28]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c98:	f001 fea6 	bl	800a9e8 <xTaskGetSchedulerState>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <xQueueSemaphoreTake+0x60>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <xQueueSemaphoreTake+0x64>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <xQueueSemaphoreTake+0x66>
 8008cac:	2300      	movs	r3, #0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	61bb      	str	r3, [r7, #24]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cc8:	f002 ffcc 	bl	800bc64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d024      	beq.n	8008d22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	1e5a      	subs	r2, r3, #1
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ce8:	f002 f8b0 	bl	800ae4c <pvTaskIncrementMutexHeldCount>
 8008cec:	4602      	mov	r2, r0
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00f      	beq.n	8008d1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 fba6 	bl	800a450 <xTaskRemoveFromEventList>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d0a:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <xQueueSemaphoreTake+0x214>)
 8008d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d1a:	f002 ffd3 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e097      	b.n	8008e52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d111      	bne.n	8008d4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	617b      	str	r3, [r7, #20]
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d44:	f002 ffbe 	bl	800bcc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e082      	b.n	8008e52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d52:	f107 030c 	add.w	r3, r7, #12
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 fc04 	bl	800a564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d60:	f002 ffb0 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d64:	f001 f8bc 	bl	8009ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d68:	f002 ff7c 	bl	800bc64 <vPortEnterCritical>
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d72:	b25b      	sxtb	r3, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d103      	bne.n	8008d82 <xQueueSemaphoreTake+0x13a>
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d88:	b25b      	sxtb	r3, r3
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d103      	bne.n	8008d98 <xQueueSemaphoreTake+0x150>
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d98:	f002 ff94 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	f107 030c 	add.w	r3, r7, #12
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fbf3 	bl	800a590 <xTaskCheckForTimeOut>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d132      	bne.n	8008e16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008db2:	f000 f94f 	bl	8009054 <prvIsQueueEmpty>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d026      	beq.n	8008e0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d109      	bne.n	8008dd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008dc4:	f002 ff4e 	bl	800bc64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 fe29 	bl	800aa24 <xTaskPriorityInherit>
 8008dd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008dd4:	f002 ff76 	bl	800bcc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	3324      	adds	r3, #36	; 0x24
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 fae5 	bl	800a3b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008de8:	f000 f8e2 	bl	8008fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dec:	f001 f886 	bl	8009efc <xTaskResumeAll>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f47f af68 	bne.w	8008cc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008df8:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <xQueueSemaphoreTake+0x214>)
 8008dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	e75e      	b.n	8008cc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e0c:	f000 f8d0 	bl	8008fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e10:	f001 f874 	bl	8009efc <xTaskResumeAll>
 8008e14:	e758      	b.n	8008cc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e18:	f000 f8ca 	bl	8008fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e1c:	f001 f86e 	bl	8009efc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e22:	f000 f917 	bl	8009054 <prvIsQueueEmpty>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f43f af4d 	beq.w	8008cc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008e34:	f002 ff16 	bl	800bc64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e3a:	f000 f811 	bl	8008e60 <prvGetDisinheritPriorityAfterTimeout>
 8008e3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fec2 	bl	800abd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e4c:	f002 ff3a 	bl	800bcc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3738      	adds	r7, #56	; 0x38
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	e001      	b.n	8008e82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e82:	68fb      	ldr	r3, [r7, #12]
	}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10d      	bne.n	8008eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d14d      	bne.n	8008f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 fe1a 	bl	800aaf4 <xTaskPriorityDisinherit>
 8008ec0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	609a      	str	r2, [r3, #8]
 8008ec8:	e043      	b.n	8008f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d119      	bne.n	8008f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6858      	ldr	r0, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	461a      	mov	r2, r3
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	f004 f8fd 	bl	800d0da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee8:	441a      	add	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d32b      	bcc.n	8008f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	e026      	b.n	8008f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	68d8      	ldr	r0, [r3, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	f004 f8e3 	bl	800d0da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1c:	425b      	negs	r3, r3
 8008f1e:	441a      	add	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d207      	bcs.n	8008f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f38:	425b      	negs	r3, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d105      	bne.n	8008f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f5a:	697b      	ldr	r3, [r7, #20]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d018      	beq.n	8008fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	441a      	add	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d303      	bcc.n	8008f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68d9      	ldr	r1, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6838      	ldr	r0, [r7, #0]
 8008fa4:	f004 f899 	bl	800d0da <memcpy>
	}
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fb8:	f002 fe54 	bl	800bc64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fc4:	e011      	b.n	8008fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d012      	beq.n	8008ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3324      	adds	r3, #36	; 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 fa3c 	bl	800a450 <xTaskRemoveFromEventList>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fde:	f001 fb39 	bl	800a654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dce9      	bgt.n	8008fc6 <prvUnlockQueue+0x16>
 8008ff2:	e000      	b.n	8008ff6 <prvUnlockQueue+0x46>
					break;
 8008ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	22ff      	movs	r2, #255	; 0xff
 8008ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ffe:	f002 fe61 	bl	800bcc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009002:	f002 fe2f 	bl	800bc64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800900c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800900e:	e011      	b.n	8009034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d012      	beq.n	800903e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3310      	adds	r3, #16
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fa17 	bl	800a450 <xTaskRemoveFromEventList>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009028:	f001 fb14 	bl	800a654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	3b01      	subs	r3, #1
 8009030:	b2db      	uxtb	r3, r3
 8009032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009038:	2b00      	cmp	r3, #0
 800903a:	dce9      	bgt.n	8009010 <prvUnlockQueue+0x60>
 800903c:	e000      	b.n	8009040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800903e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	22ff      	movs	r2, #255	; 0xff
 8009044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009048:	f002 fe3c 	bl	800bcc4 <vPortExitCritical>
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800905c:	f002 fe02 	bl	800bc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e001      	b.n	8009072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009072:	f002 fe27 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 8009076:	68fb      	ldr	r3, [r7, #12]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009088:	f002 fdec 	bl	800bc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009094:	429a      	cmp	r2, r3
 8009096:	d102      	bne.n	800909e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	e001      	b.n	80090a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090a2:	f002 fe0f 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 80090a6:	68fb      	ldr	r3, [r7, #12]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e014      	b.n	80090ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090c0:	4a0f      	ldr	r2, [pc, #60]	; (8009100 <vQueueAddToRegistry+0x50>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10b      	bne.n	80090e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090cc:	490c      	ldr	r1, [pc, #48]	; (8009100 <vQueueAddToRegistry+0x50>)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090d6:	4a0a      	ldr	r2, [pc, #40]	; (8009100 <vQueueAddToRegistry+0x50>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	4413      	add	r3, r2
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090e2:	e006      	b.n	80090f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b07      	cmp	r3, #7
 80090ee:	d9e7      	bls.n	80090c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000d20 	.word	0x20000d20

08009104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009114:	f002 fda6 	bl	800bc64 <vPortEnterCritical>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800911e:	b25b      	sxtb	r3, r3
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	d103      	bne.n	800912e <vQueueWaitForMessageRestricted+0x2a>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009134:	b25b      	sxtb	r3, r3
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d103      	bne.n	8009144 <vQueueWaitForMessageRestricted+0x40>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009144:	f002 fdbe 	bl	800bcc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f001 f94d 	bl	800a3f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7ff ff26 	bl	8008fb0 <prvUnlockQueue>
	}
 8009164:	bf00      	nop
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08c      	sub	sp, #48	; 0x30
 8009170:	af02      	add	r7, sp, #8
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d110      	bne.n	80091a0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b04      	cmp	r3, #4
 8009188:	d81b      	bhi.n	80091c2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	61fb      	str	r3, [r7, #28]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	61bb      	str	r3, [r7, #24]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d90a      	bls.n	80091e0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	617b      	str	r3, [r7, #20]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3324      	adds	r3, #36	; 0x24
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 fe57 	bl	800bea8 <pvPortMalloc>
 80091fa:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	6a38      	ldr	r0, [r7, #32]
 8009214:	f000 fb6e 	bl	80098f4 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009218:	6a3b      	ldr	r3, [r7, #32]
	}
 800921a:	4618      	mov	r0, r3
 800921c:	3728      	adds	r7, #40	; 0x28
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	689a      	ldr	r2, [r3, #8]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4413      	add	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3b01      	subs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	429a      	cmp	r2, r3
 800926e:	d304      	bcc.n	800927a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800927a:	697b      	ldr	r3, [r7, #20]
}
 800927c:	4618      	mov	r0, r3
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b090      	sub	sp, #64	; 0x40
 800928c:	af02      	add	r7, sp, #8
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xStreamBufferSend+0x36>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10a      	bne.n	80092da <xStreamBufferSend+0x52>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	623b      	str	r3, [r7, #32]
}
 80092d6:	bf00      	nop
 80092d8:	e7fe      	b.n	80092d8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	7f1b      	ldrb	r3, [r3, #28]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d011      	beq.n	800930a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	3304      	adds	r3, #4
 80092ea:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80092ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d80a      	bhi.n	800930a <xStreamBufferSend+0x82>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	61fb      	str	r3, [r7, #28]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d03e      	beq.n	800938e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8009310:	f107 0310 	add.w	r3, r7, #16
 8009314:	4618      	mov	r0, r3
 8009316:	f001 f8ff 	bl	800a518 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800931a:	f002 fca3 	bl	800bc64 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800931e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009320:	f7ff ff7f 	bl	8009222 <xStreamBufferSpacesAvailable>
 8009324:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8009326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	429a      	cmp	r2, r3
 800932c:	d217      	bcs.n	800935e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800932e:	2000      	movs	r0, #0
 8009330:	f001 ffa2 	bl	800b278 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <xStreamBufferSend+0xca>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61bb      	str	r3, [r7, #24]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009352:	f001 fb39 	bl	800a9c8 <xTaskGetCurrentTaskHandle>
 8009356:	4602      	mov	r2, r0
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	615a      	str	r2, [r3, #20]
 800935c:	e002      	b.n	8009364 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800935e:	f002 fcb1 	bl	800bcc4 <vPortExitCritical>
					break;
 8009362:	e014      	b.n	800938e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8009364:	f002 fcae 	bl	800bcc4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	2000      	movs	r0, #0
 8009370:	f001 fd80 	bl	800ae74 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009376:	2200      	movs	r2, #0
 8009378:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800937a:	463a      	mov	r2, r7
 800937c:	f107 0310 	add.w	r3, r7, #16
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f001 f904 	bl	800a590 <xTaskCheckForTimeOut>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0c5      	beq.n	800931a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009390:	2b00      	cmp	r3, #0
 8009392:	d103      	bne.n	800939c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009396:	f7ff ff44 	bl	8009222 <xStreamBufferSpacesAvailable>
 800939a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093a8:	f000 f894 	bl	80094d4 <prvWriteMessageToBuffer>
 80093ac:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d019      	beq.n	80093e8 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80093b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093b6:	f000 fa7d 	bl	80098b4 <prvBytesInBuffer>
 80093ba:	4602      	mov	r2, r0
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d311      	bcc.n	80093e8 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80093c4:	f000 fd8c 	bl	8009ee0 <vTaskSuspendAll>
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <xStreamBufferSend+0x15c>
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	6918      	ldr	r0, [r3, #16]
 80093d4:	2300      	movs	r3, #0
 80093d6:	2200      	movs	r2, #0
 80093d8:	2100      	movs	r1, #0
 80093da:	f001 fdab 	bl	800af34 <xTaskGenericNotify>
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	2200      	movs	r2, #0
 80093e2:	611a      	str	r2, [r3, #16]
 80093e4:	f000 fd8a 	bl	8009efc <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3738      	adds	r7, #56	; 0x38
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b090      	sub	sp, #64	; 0x40
 80093f6:	af02      	add	r7, sp, #8
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	623b      	str	r3, [r7, #32]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	61fb      	str	r3, [r7, #28]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	7f1b      	ldrb	r3, [r3, #28]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	3304      	adds	r3, #4
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009454:	f7ff fee5 	bl	8009222 <xStreamBufferSpacesAvailable>
 8009458:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009466:	f000 f835 	bl	80094d4 <prvWriteMessageToBuffer>
 800946a:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d02b      	beq.n	80094ca <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009474:	f000 fa1e 	bl	80098b4 <prvBytesInBuffer>
 8009478:	4602      	mov	r2, r0
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	429a      	cmp	r2, r3
 8009480:	d323      	bcc.n	80094ca <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8009482:	f3ef 8211 	mrs	r2, BASEPRI
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	61ba      	str	r2, [r7, #24]
 8009498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800949a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00b      	beq.n	80094be <xStreamBufferSendFromISR+0xcc>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	6918      	ldr	r0, [r3, #16]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	2200      	movs	r2, #0
 80094b2:	2100      	movs	r1, #0
 80094b4:	f001 fdfc 	bl	800b0b0 <xTaskGenericNotifyFromISR>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2200      	movs	r2, #0
 80094bc:	611a      	str	r2, [r3, #16]
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f383 8811 	msr	BASEPRI, r3
}
 80094c8:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3738      	adds	r7, #56	; 0x38
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	e01d      	b.n	800952a <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	7f1b      	ldrb	r3, [r3, #28]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d108      	bne.n	800950c <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	4293      	cmp	r3, r2
 8009504:	bf28      	it	cs
 8009506:	4613      	movcs	r3, r2
 8009508:	607b      	str	r3, [r7, #4]
 800950a:	e00e      	b.n	800952a <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	429a      	cmp	r2, r3
 8009512:	d308      	bcc.n	8009526 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009518:	1d3b      	adds	r3, r7, #4
 800951a:	2204      	movs	r2, #4
 800951c:	4619      	mov	r1, r3
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 f8dc 	bl	80096dc <prvWriteBytesToBuffer>
 8009524:	e001      	b.n	800952a <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d007      	beq.n	8009540 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	461a      	mov	r2, r3
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f8d0 	bl	80096dc <prvWriteBytesToBuffer>
 800953c:	6138      	str	r0, [r7, #16]
 800953e:	e001      	b.n	8009544 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8009544:	693b      	ldr	r3, [r7, #16]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b08e      	sub	sp, #56	; 0x38
 8009552:	af02      	add	r7, sp, #8
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009560:	2300      	movs	r3, #0
 8009562:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <xStreamBufferReceive+0x32>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	61fb      	str	r3, [r7, #28]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <xStreamBufferReceive+0x4e>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	61bb      	str	r3, [r7, #24]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	7f1b      	ldrb	r3, [r3, #28]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80095a8:	2304      	movs	r3, #4
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
 80095ac:	e001      	b.n	80095b2 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d034      	beq.n	8009622 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80095b8:	f002 fb54 	bl	800bc64 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80095bc:	6a38      	ldr	r0, [r7, #32]
 80095be:	f000 f979 	bl	80098b4 <prvBytesInBuffer>
 80095c2:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80095c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d816      	bhi.n	80095fa <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80095cc:	2000      	movs	r0, #0
 80095ce:	f001 fe53 	bl	800b278 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <xStreamBufferReceive+0xa2>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	617b      	str	r3, [r7, #20]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80095f0:	f001 f9ea 	bl	800a9c8 <xTaskGetCurrentTaskHandle>
 80095f4:	4602      	mov	r2, r0
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80095fa:	f002 fb63 	bl	800bcc4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80095fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	429a      	cmp	r2, r3
 8009604:	d811      	bhi.n	800962a <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2200      	movs	r2, #0
 800960a:	2100      	movs	r1, #0
 800960c:	2000      	movs	r0, #0
 800960e:	f001 fc31 	bl	800ae74 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	2200      	movs	r2, #0
 8009616:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009618:	6a38      	ldr	r0, [r7, #32]
 800961a:	f000 f94b 	bl	80098b4 <prvBytesInBuffer>
 800961e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009620:	e003      	b.n	800962a <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009622:	6a38      	ldr	r0, [r7, #32]
 8009624:	f000 f946 	bl	80098b4 <prvBytesInBuffer>
 8009628:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800962a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	429a      	cmp	r2, r3
 8009630:	d91d      	bls.n	800966e <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	6a38      	ldr	r0, [r7, #32]
 800963e:	f000 f81b 	bl	8009678 <prvReadMessageFromBuffer>
 8009642:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d011      	beq.n	800966e <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800964a:	f000 fc49 	bl	8009ee0 <vTaskSuspendAll>
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <xStreamBufferReceive+0x11c>
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	6958      	ldr	r0, [r3, #20]
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	f001 fc68 	bl	800af34 <xTaskGenericNotify>
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	2200      	movs	r2, #0
 8009668:	615a      	str	r2, [r3, #20]
 800966a:	f000 fc47 	bl	8009efc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009670:	4618      	mov	r0, r3
 8009672:	3730      	adds	r7, #48	; 0x30
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	d019      	beq.n	80096c0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8009692:	f107 0110 	add.w	r1, r7, #16
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f890 	bl	80097c0 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d907      	bls.n	80096c4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61fb      	str	r3, [r7, #28]
 80096be:	e001      	b.n	80096c4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 f878 	bl	80097c0 <prvReadBytesFromBuffer>
 80096d0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80096d2:	697b      	ldr	r3, [r7, #20]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3720      	adds	r7, #32
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	; 0x28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	61fb      	str	r3, [r7, #28]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	4293      	cmp	r3, r2
 8009716:	bf28      	it	cs
 8009718:	4613      	movcs	r3, r2
 800971a:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800971c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	441a      	add	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	d90a      	bls.n	8009740 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	61bb      	str	r3, [r7, #24]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	4413      	add	r3, r2
 8009748:	6a3a      	ldr	r2, [r7, #32]
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	4618      	mov	r0, r3
 800974e:	f003 fcc4 	bl	800d0da <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	429a      	cmp	r2, r3
 8009758:	d91c      	bls.n	8009794 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	429a      	cmp	r2, r3
 8009766:	d90a      	bls.n	800977e <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	617b      	str	r3, [r7, #20]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6998      	ldr	r0, [r3, #24]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	18d1      	adds	r1, r2, r3
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	461a      	mov	r2, r3
 8009790:	f003 fca3 	bl	800d0da <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8009794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4413      	add	r3, r2
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d304      	bcc.n	80097b0 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b4:	605a      	str	r2, [r3, #4]

	return xCount;
 80097b6:	687b      	ldr	r3, [r7, #4]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3728      	adds	r7, #40	; 0x28
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	; 0x28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	bf28      	it	cs
 80097d6:	4613      	movcs	r3, r2
 80097d8:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d064      	beq.n	80098aa <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	6a3a      	ldr	r2, [r7, #32]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	bf28      	it	cs
 80097f4:	4613      	movcs	r3, r2
 80097f6:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80097f8:	69fa      	ldr	r2, [r7, #28]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d90a      	bls.n	8009816 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	61bb      	str	r3, [r7, #24]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	441a      	add	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	429a      	cmp	r2, r3
 8009822:	d90a      	bls.n	800983a <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	617b      	str	r3, [r7, #20]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	4413      	add	r3, r2
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	4619      	mov	r1, r3
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f003 fc47 	bl	800d0da <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800984c:	6a3a      	ldr	r2, [r7, #32]
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	429a      	cmp	r2, r3
 8009852:	d919      	bls.n	8009888 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8009854:	6a3a      	ldr	r2, [r7, #32]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	429a      	cmp	r2, r3
 800985a:	d90a      	bls.n	8009872 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	613b      	str	r3, [r7, #16]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	18d0      	adds	r0, r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6999      	ldr	r1, [r3, #24]
 800987c:	6a3a      	ldr	r2, [r7, #32]
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	461a      	mov	r2, r3
 8009884:	f003 fc29 	bl	800d0da <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8009888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	4413      	add	r3, r2
 800988e:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009896:	429a      	cmp	r2, r3
 8009898:	d304      	bcc.n	80098a4 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a8:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80098aa:	6a3b      	ldr	r3, [r7, #32]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3728      	adds	r7, #40	; 0x28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	4413      	add	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d304      	bcc.n	80098e6 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80098e6:	68fb      	ldr	r3, [r7, #12]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009902:	2355      	movs	r3, #85	; 0x55
 8009904:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	6979      	ldr	r1, [r7, #20]
 800990a:	68b8      	ldr	r0, [r7, #8]
 800990c:	f003 fbf3 	bl	800d0f6 <memset>
 8009910:	4602      	mov	r2, r0
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	4293      	cmp	r3, r2
 8009916:	d00a      	beq.n	800992e <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	613b      	str	r3, [r7, #16]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800992e:	2224      	movs	r2, #36	; 0x24
 8009930:	2100      	movs	r1, #0
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f003 fbdf 	bl	800d0f6 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009950:	771a      	strb	r2, [r3, #28]
}
 8009952:	bf00      	nop
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800995a:	b580      	push	{r7, lr}
 800995c:	b08e      	sub	sp, #56	; 0x38
 800995e:	af04      	add	r7, sp, #16
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	607a      	str	r2, [r7, #4]
 8009966:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <xTaskCreateStatic+0x2a>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	623b      	str	r3, [r7, #32]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10a      	bne.n	80099a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	61fb      	str	r3, [r7, #28]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099a0:	23bc      	movs	r3, #188	; 0xbc
 80099a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2bbc      	cmp	r3, #188	; 0xbc
 80099a8:	d00a      	beq.n	80099c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	61bb      	str	r3, [r7, #24]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01e      	beq.n	8009a06 <xTaskCreateStatic+0xac>
 80099c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d01b      	beq.n	8009a06 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099e0:	2300      	movs	r3, #0
 80099e2:	9303      	str	r3, [sp, #12]
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	9302      	str	r3, [sp, #8]
 80099e8:	f107 0314 	add.w	r3, r7, #20
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f851 	bl	8009aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a00:	f000 f8f4 	bl	8009bec <prvAddNewTaskToReadyList>
 8009a04:	e001      	b.n	8009a0a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a0a:	697b      	ldr	r3, [r7, #20]
	}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3728      	adds	r7, #40	; 0x28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08c      	sub	sp, #48	; 0x30
 8009a18:	af04      	add	r7, sp, #16
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	4613      	mov	r3, r2
 8009a22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a24:	88fb      	ldrh	r3, [r7, #6]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f002 fa3d 	bl	800bea8 <pvPortMalloc>
 8009a2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00e      	beq.n	8009a54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a36:	20bc      	movs	r0, #188	; 0xbc
 8009a38:	f002 fa36 	bl	800bea8 <pvPortMalloc>
 8009a3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	631a      	str	r2, [r3, #48]	; 0x30
 8009a4a:	e005      	b.n	8009a58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a4c:	6978      	ldr	r0, [r7, #20]
 8009a4e:	f002 faf7 	bl	800c040 <vPortFree>
 8009a52:	e001      	b.n	8009a58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d017      	beq.n	8009a8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a66:	88fa      	ldrh	r2, [r7, #6]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 f80f 	bl	8009aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a82:	69f8      	ldr	r0, [r7, #28]
 8009a84:	f000 f8b2 	bl	8009bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	61bb      	str	r3, [r7, #24]
 8009a8c:	e002      	b.n	8009a94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a94:	69bb      	ldr	r3, [r7, #24]
	}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	21a5      	movs	r1, #165	; 0xa5
 8009aba:	f003 fb1c 	bl	800d0f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	f023 0307 	bic.w	r3, r3, #7
 8009ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00a      	beq.n	8009af8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	617b      	str	r3, [r7, #20]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d01f      	beq.n	8009b3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009afe:	2300      	movs	r3, #0
 8009b00:	61fb      	str	r3, [r7, #28]
 8009b02:	e012      	b.n	8009b2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	7819      	ldrb	r1, [r3, #0]
 8009b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	4413      	add	r3, r2
 8009b12:	3334      	adds	r3, #52	; 0x34
 8009b14:	460a      	mov	r2, r1
 8009b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d006      	beq.n	8009b32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	3301      	adds	r3, #1
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	2b0f      	cmp	r3, #15
 8009b2e:	d9e9      	bls.n	8009b04 <prvInitialiseNewTask+0x64>
 8009b30:	e000      	b.n	8009b34 <prvInitialiseNewTask+0x94>
			{
				break;
 8009b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b3c:	e003      	b.n	8009b46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	2b37      	cmp	r3, #55	; 0x37
 8009b4a:	d901      	bls.n	8009b50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b4c:	2337      	movs	r3, #55	; 0x37
 8009b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	2200      	movs	r2, #0
 8009b60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	3304      	adds	r3, #4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fb64 	bl	8008234 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	3318      	adds	r3, #24
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fb5f 	bl	8008234 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9e:	3354      	adds	r3, #84	; 0x54
 8009ba0:	2260      	movs	r2, #96	; 0x60
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f003 faa6 	bl	800d0f6 <memset>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <prvInitialiseNewTask+0x140>)
 8009bae:	659a      	str	r2, [r3, #88]	; 0x58
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	4a0c      	ldr	r2, [pc, #48]	; (8009be4 <prvInitialiseNewTask+0x144>)
 8009bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <prvInitialiseNewTask+0x148>)
 8009bba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	69b8      	ldr	r0, [r7, #24]
 8009bc2:	f001 ff21 	bl	800ba08 <pxPortInitialiseStack>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bd8:	bf00      	nop
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	0801046c 	.word	0x0801046c
 8009be4:	0801048c 	.word	0x0801048c
 8009be8:	0801044c 	.word	0x0801044c

08009bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bf4:	f002 f836 	bl	800bc64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bf8:	4b2d      	ldr	r3, [pc, #180]	; (8009cb0 <prvAddNewTaskToReadyList+0xc4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	4a2c      	ldr	r2, [pc, #176]	; (8009cb0 <prvAddNewTaskToReadyList+0xc4>)
 8009c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c02:	4b2c      	ldr	r3, [pc, #176]	; (8009cb4 <prvAddNewTaskToReadyList+0xc8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c0a:	4a2a      	ldr	r2, [pc, #168]	; (8009cb4 <prvAddNewTaskToReadyList+0xc8>)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c10:	4b27      	ldr	r3, [pc, #156]	; (8009cb0 <prvAddNewTaskToReadyList+0xc4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d110      	bne.n	8009c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c18:	f000 fd40 	bl	800a69c <prvInitialiseTaskLists>
 8009c1c:	e00d      	b.n	8009c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c1e:	4b26      	ldr	r3, [pc, #152]	; (8009cb8 <prvAddNewTaskToReadyList+0xcc>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d109      	bne.n	8009c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c26:	4b23      	ldr	r3, [pc, #140]	; (8009cb4 <prvAddNewTaskToReadyList+0xc8>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d802      	bhi.n	8009c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c34:	4a1f      	ldr	r2, [pc, #124]	; (8009cb4 <prvAddNewTaskToReadyList+0xc8>)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c3a:	4b20      	ldr	r3, [pc, #128]	; (8009cbc <prvAddNewTaskToReadyList+0xd0>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	4a1e      	ldr	r2, [pc, #120]	; (8009cbc <prvAddNewTaskToReadyList+0xd0>)
 8009c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c44:	4b1d      	ldr	r3, [pc, #116]	; (8009cbc <prvAddNewTaskToReadyList+0xd0>)
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	4b1b      	ldr	r3, [pc, #108]	; (8009cc0 <prvAddNewTaskToReadyList+0xd4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d903      	bls.n	8009c60 <prvAddNewTaskToReadyList+0x74>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	4a18      	ldr	r2, [pc, #96]	; (8009cc0 <prvAddNewTaskToReadyList+0xd4>)
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4a15      	ldr	r2, [pc, #84]	; (8009cc4 <prvAddNewTaskToReadyList+0xd8>)
 8009c6e:	441a      	add	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7fe fae9 	bl	800824e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c7c:	f002 f822 	bl	800bcc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c80:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <prvAddNewTaskToReadyList+0xcc>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00e      	beq.n	8009ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <prvAddNewTaskToReadyList+0xc8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d207      	bcs.n	8009ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <prvAddNewTaskToReadyList+0xdc>)
 8009c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20001234 	.word	0x20001234
 8009cb4:	20000d60 	.word	0x20000d60
 8009cb8:	20001240 	.word	0x20001240
 8009cbc:	20001250 	.word	0x20001250
 8009cc0:	2000123c 	.word	0x2000123c
 8009cc4:	20000d64 	.word	0x20000d64
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d017      	beq.n	8009d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cde:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <vTaskDelay+0x60>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <vTaskDelay+0x30>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	60bb      	str	r3, [r7, #8]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cfc:	f000 f8f0 	bl	8009ee0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fade 	bl	800b2c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d08:	f000 f8f8 	bl	8009efc <xTaskResumeAll>
 8009d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d107      	bne.n	8009d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <vTaskDelay+0x64>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	2000125c 	.word	0x2000125c
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <eTaskGetState+0x28>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60bb      	str	r3, [r7, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009d5c:	4b23      	ldr	r3, [pc, #140]	; (8009dec <eTaskGetState+0xb8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d102      	bne.n	8009d6c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009d66:	2300      	movs	r3, #0
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e03a      	b.n	8009de2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009d6c:	f001 ff7a 	bl	800bc64 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009d76:	4b1e      	ldr	r3, [pc, #120]	; (8009df0 <eTaskGetState+0xbc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009d7c:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <eTaskGetState+0xc0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009d82:	f001 ff9f 	bl	800bcc4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d003      	beq.n	8009d96 <eTaskGetState+0x62>
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d102      	bne.n	8009d9c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009d96:	2302      	movs	r3, #2
 8009d98:	77fb      	strb	r3, [r7, #31]
 8009d9a:	e022      	b.n	8009de2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	4a16      	ldr	r2, [pc, #88]	; (8009df8 <eTaskGetState+0xc4>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d112      	bne.n	8009dca <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009db8:	2302      	movs	r3, #2
 8009dba:	77fb      	strb	r3, [r7, #31]
 8009dbc:	e011      	b.n	8009de2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	77fb      	strb	r3, [r7, #31]
 8009dc2:	e00e      	b.n	8009de2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	77fb      	strb	r3, [r7, #31]
 8009dc8:	e00b      	b.n	8009de2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4a0b      	ldr	r2, [pc, #44]	; (8009dfc <eTaskGetState+0xc8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d002      	beq.n	8009dd8 <eTaskGetState+0xa4>
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009dd8:	2304      	movs	r3, #4
 8009dda:	77fb      	strb	r3, [r7, #31]
 8009ddc:	e001      	b.n	8009de2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009dde:	2301      	movs	r3, #1
 8009de0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009de2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000d60 	.word	0x20000d60
 8009df0:	200011ec 	.word	0x200011ec
 8009df4:	200011f0 	.word	0x200011f0
 8009df8:	20001220 	.word	0x20001220
 8009dfc:	20001208 	.word	0x20001208

08009e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08a      	sub	sp, #40	; 0x28
 8009e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e0e:	463a      	mov	r2, r7
 8009e10:	1d39      	adds	r1, r7, #4
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe f9b8 	bl	800818c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	2300      	movs	r3, #0
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	460a      	mov	r2, r1
 8009e2e:	4924      	ldr	r1, [pc, #144]	; (8009ec0 <vTaskStartScheduler+0xc0>)
 8009e30:	4824      	ldr	r0, [pc, #144]	; (8009ec4 <vTaskStartScheduler+0xc4>)
 8009e32:	f7ff fd92 	bl	800995a <xTaskCreateStatic>
 8009e36:	4603      	mov	r3, r0
 8009e38:	4a23      	ldr	r2, [pc, #140]	; (8009ec8 <vTaskStartScheduler+0xc8>)
 8009e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e3c:	4b22      	ldr	r3, [pc, #136]	; (8009ec8 <vTaskStartScheduler+0xc8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e001      	b.n	8009e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d102      	bne.n	8009e5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e54:	f001 fa8a 	bl	800b36c <xTimerCreateTimerTask>
 8009e58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d11b      	bne.n	8009e98 <vTaskStartScheduler+0x98>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	613b      	str	r3, [r7, #16]
}
 8009e72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e74:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <vTaskStartScheduler+0xcc>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3354      	adds	r3, #84	; 0x54
 8009e7a:	4a15      	ldr	r2, [pc, #84]	; (8009ed0 <vTaskStartScheduler+0xd0>)
 8009e7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e7e:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <vTaskStartScheduler+0xd4>)
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295
 8009e84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <vTaskStartScheduler+0xd8>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e8c:	4b13      	ldr	r3, [pc, #76]	; (8009edc <vTaskStartScheduler+0xdc>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e92:	f001 fe45 	bl	800bb20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e96:	e00e      	b.n	8009eb6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9e:	d10a      	bne.n	8009eb6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <vTaskStartScheduler+0xb4>
}
 8009eb6:	bf00      	nop
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	08010360 	.word	0x08010360
 8009ec4:	0800a66d 	.word	0x0800a66d
 8009ec8:	20001258 	.word	0x20001258
 8009ecc:	20000d60 	.word	0x20000d60
 8009ed0:	2000010c 	.word	0x2000010c
 8009ed4:	20001254 	.word	0x20001254
 8009ed8:	20001240 	.word	0x20001240
 8009edc:	20001238 	.word	0x20001238

08009ee0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <vTaskSuspendAll+0x18>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	4a03      	ldr	r2, [pc, #12]	; (8009ef8 <vTaskSuspendAll+0x18>)
 8009eec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009eee:	bf00      	nop
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	2000125c 	.word	0x2000125c

08009efc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f0a:	4b42      	ldr	r3, [pc, #264]	; (800a014 <xTaskResumeAll+0x118>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	603b      	str	r3, [r7, #0]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f28:	f001 fe9c 	bl	800bc64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f2c:	4b39      	ldr	r3, [pc, #228]	; (800a014 <xTaskResumeAll+0x118>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	4a38      	ldr	r2, [pc, #224]	; (800a014 <xTaskResumeAll+0x118>)
 8009f34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f36:	4b37      	ldr	r3, [pc, #220]	; (800a014 <xTaskResumeAll+0x118>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d162      	bne.n	800a004 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f3e:	4b36      	ldr	r3, [pc, #216]	; (800a018 <xTaskResumeAll+0x11c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d05e      	beq.n	800a004 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f46:	e02f      	b.n	8009fa8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f48:	4b34      	ldr	r3, [pc, #208]	; (800a01c <xTaskResumeAll+0x120>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3318      	adds	r3, #24
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe f9d7 	bl	8008308 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe f9d2 	bl	8008308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f68:	4b2d      	ldr	r3, [pc, #180]	; (800a020 <xTaskResumeAll+0x124>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d903      	bls.n	8009f78 <xTaskResumeAll+0x7c>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f74:	4a2a      	ldr	r2, [pc, #168]	; (800a020 <xTaskResumeAll+0x124>)
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4a27      	ldr	r2, [pc, #156]	; (800a024 <xTaskResumeAll+0x128>)
 8009f86:	441a      	add	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7fe f95d 	bl	800824e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4b23      	ldr	r3, [pc, #140]	; (800a028 <xTaskResumeAll+0x12c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d302      	bcc.n	8009fa8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009fa2:	4b22      	ldr	r3, [pc, #136]	; (800a02c <xTaskResumeAll+0x130>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fa8:	4b1c      	ldr	r3, [pc, #112]	; (800a01c <xTaskResumeAll+0x120>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1cb      	bne.n	8009f48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009fb6:	f000 fce7 	bl	800a988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fba:	4b1d      	ldr	r3, [pc, #116]	; (800a030 <xTaskResumeAll+0x134>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d010      	beq.n	8009fe8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009fc6:	f000 f8d5 	bl	800a174 <xTaskIncrementTick>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009fd0:	4b16      	ldr	r3, [pc, #88]	; (800a02c <xTaskResumeAll+0x130>)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1f1      	bne.n	8009fc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009fe2:	4b13      	ldr	r3, [pc, #76]	; (800a030 <xTaskResumeAll+0x134>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fe8:	4b10      	ldr	r3, [pc, #64]	; (800a02c <xTaskResumeAll+0x130>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ff4:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <xTaskResumeAll+0x138>)
 8009ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a004:	f001 fe5e 	bl	800bcc4 <vPortExitCritical>

	return xAlreadyYielded;
 800a008:	68bb      	ldr	r3, [r7, #8]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	2000125c 	.word	0x2000125c
 800a018:	20001234 	.word	0x20001234
 800a01c:	200011f4 	.word	0x200011f4
 800a020:	2000123c 	.word	0x2000123c
 800a024:	20000d64 	.word	0x20000d64
 800a028:	20000d60 	.word	0x20000d60
 800a02c:	20001248 	.word	0x20001248
 800a030:	20001244 	.word	0x20001244
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <xTaskGetTickCount+0x1c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a044:	687b      	ldr	r3, [r7, #4]
}
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	20001238 	.word	0x20001238

0800a058 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	2338      	movs	r3, #56	; 0x38
 800a06a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800a06c:	f7ff ff38 	bl	8009ee0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a070:	4b3a      	ldr	r3, [pc, #232]	; (800a15c <uxTaskGetSystemState+0x104>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	429a      	cmp	r2, r3
 800a078:	d368      	bcc.n	800a14c <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4613      	mov	r3, r2
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	461a      	mov	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	1898      	adds	r0, r3, r2
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4a31      	ldr	r2, [pc, #196]	; (800a160 <uxTaskGetSystemState+0x108>)
 800a09c:	4413      	add	r3, r2
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f000 fbcf 	bl	800a844 <prvListTasksWithinSingleList>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e2      	bne.n	800a07a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	461a      	mov	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	4a27      	ldr	r2, [pc, #156]	; (800a164 <uxTaskGetSystemState+0x10c>)
 800a0c6:	6811      	ldr	r1, [r2, #0]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fbba 	bl	800a844 <prvListTasksWithinSingleList>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	4a1f      	ldr	r2, [pc, #124]	; (800a168 <uxTaskGetSystemState+0x110>)
 800a0ea:	6811      	ldr	r1, [r2, #0]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fba8 	bl	800a844 <prvListTasksWithinSingleList>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4613      	mov	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	461a      	mov	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4413      	add	r3, r2
 800a10c:	2204      	movs	r2, #4
 800a10e:	4917      	ldr	r1, [pc, #92]	; (800a16c <uxTaskGetSystemState+0x114>)
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fb97 	bl	800a844 <prvListTasksWithinSingleList>
 800a116:	4602      	mov	r2, r0
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	4413      	add	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	4613      	mov	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	461a      	mov	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4413      	add	r3, r2
 800a12e:	2203      	movs	r2, #3
 800a130:	490f      	ldr	r1, [pc, #60]	; (800a170 <uxTaskGetSystemState+0x118>)
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fb86 	bl	800a844 <prvListTasksWithinSingleList>
 800a138:	4602      	mov	r2, r0
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	4413      	add	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800a14c:	f7ff fed6 	bl	8009efc <xTaskResumeAll>

		return uxTask;
 800a150:	697b      	ldr	r3, [r7, #20]
	}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20001234 	.word	0x20001234
 800a160:	20000d64 	.word	0x20000d64
 800a164:	200011ec 	.word	0x200011ec
 800a168:	200011f0 	.word	0x200011f0
 800a16c:	20001208 	.word	0x20001208
 800a170:	20001220 	.word	0x20001220

0800a174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a17e:	4b4f      	ldr	r3, [pc, #316]	; (800a2bc <xTaskIncrementTick+0x148>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f040 808f 	bne.w	800a2a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a188:	4b4d      	ldr	r3, [pc, #308]	; (800a2c0 <xTaskIncrementTick+0x14c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3301      	adds	r3, #1
 800a18e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a190:	4a4b      	ldr	r2, [pc, #300]	; (800a2c0 <xTaskIncrementTick+0x14c>)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d120      	bne.n	800a1de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a19c:	4b49      	ldr	r3, [pc, #292]	; (800a2c4 <xTaskIncrementTick+0x150>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <xTaskIncrementTick+0x48>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	603b      	str	r3, [r7, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <xTaskIncrementTick+0x46>
 800a1bc:	4b41      	ldr	r3, [pc, #260]	; (800a2c4 <xTaskIncrementTick+0x150>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	4b41      	ldr	r3, [pc, #260]	; (800a2c8 <xTaskIncrementTick+0x154>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a3f      	ldr	r2, [pc, #252]	; (800a2c4 <xTaskIncrementTick+0x150>)
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	4a3f      	ldr	r2, [pc, #252]	; (800a2c8 <xTaskIncrementTick+0x154>)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	4b3e      	ldr	r3, [pc, #248]	; (800a2cc <xTaskIncrementTick+0x158>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	4a3d      	ldr	r2, [pc, #244]	; (800a2cc <xTaskIncrementTick+0x158>)
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	f000 fbd5 	bl	800a988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1de:	4b3c      	ldr	r3, [pc, #240]	; (800a2d0 <xTaskIncrementTick+0x15c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d349      	bcc.n	800a27c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e8:	4b36      	ldr	r3, [pc, #216]	; (800a2c4 <xTaskIncrementTick+0x150>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d104      	bne.n	800a1fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f2:	4b37      	ldr	r3, [pc, #220]	; (800a2d0 <xTaskIncrementTick+0x15c>)
 800a1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f8:	601a      	str	r2, [r3, #0]
					break;
 800a1fa:	e03f      	b.n	800a27c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1fc:	4b31      	ldr	r3, [pc, #196]	; (800a2c4 <xTaskIncrementTick+0x150>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	429a      	cmp	r2, r3
 800a212:	d203      	bcs.n	800a21c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a214:	4a2e      	ldr	r2, [pc, #184]	; (800a2d0 <xTaskIncrementTick+0x15c>)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a21a:	e02f      	b.n	800a27c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	3304      	adds	r3, #4
 800a220:	4618      	mov	r0, r3
 800a222:	f7fe f871 	bl	8008308 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	3318      	adds	r3, #24
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe f868 	bl	8008308 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	4b25      	ldr	r3, [pc, #148]	; (800a2d4 <xTaskIncrementTick+0x160>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d903      	bls.n	800a24c <xTaskIncrementTick+0xd8>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a22      	ldr	r2, [pc, #136]	; (800a2d4 <xTaskIncrementTick+0x160>)
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a250:	4613      	mov	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <xTaskIncrementTick+0x164>)
 800a25a:	441a      	add	r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fd fff3 	bl	800824e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26c:	4b1b      	ldr	r3, [pc, #108]	; (800a2dc <xTaskIncrementTick+0x168>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	429a      	cmp	r2, r3
 800a274:	d3b8      	bcc.n	800a1e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a276:	2301      	movs	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a27a:	e7b5      	b.n	800a1e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a27c:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <xTaskIncrementTick+0x168>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a282:	4915      	ldr	r1, [pc, #84]	; (800a2d8 <xTaskIncrementTick+0x164>)
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d901      	bls.n	800a298 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a294:	2301      	movs	r3, #1
 800a296:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a298:	4b11      	ldr	r3, [pc, #68]	; (800a2e0 <xTaskIncrementTick+0x16c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	e004      	b.n	800a2b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <xTaskIncrementTick+0x170>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	4a0d      	ldr	r2, [pc, #52]	; (800a2e4 <xTaskIncrementTick+0x170>)
 800a2ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2b0:	697b      	ldr	r3, [r7, #20]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	2000125c 	.word	0x2000125c
 800a2c0:	20001238 	.word	0x20001238
 800a2c4:	200011ec 	.word	0x200011ec
 800a2c8:	200011f0 	.word	0x200011f0
 800a2cc:	2000124c 	.word	0x2000124c
 800a2d0:	20001254 	.word	0x20001254
 800a2d4:	2000123c 	.word	0x2000123c
 800a2d8:	20000d64 	.word	0x20000d64
 800a2dc:	20000d60 	.word	0x20000d60
 800a2e0:	20001248 	.word	0x20001248
 800a2e4:	20001244 	.word	0x20001244

0800a2e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	; (800a398 <vTaskSwitchContext+0xb0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2f6:	4b29      	ldr	r3, [pc, #164]	; (800a39c <vTaskSwitchContext+0xb4>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2fc:	e046      	b.n	800a38c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a2fe:	4b27      	ldr	r3, [pc, #156]	; (800a39c <vTaskSwitchContext+0xb4>)
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a304:	4b26      	ldr	r3, [pc, #152]	; (800a3a0 <vTaskSwitchContext+0xb8>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e010      	b.n	800a32e <vTaskSwitchContext+0x46>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <vTaskSwitchContext+0x40>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	607b      	str	r3, [r7, #4]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <vTaskSwitchContext+0x3e>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	491d      	ldr	r1, [pc, #116]	; (800a3a4 <vTaskSwitchContext+0xbc>)
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4613      	mov	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	440b      	add	r3, r1
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0e4      	beq.n	800a30c <vTaskSwitchContext+0x24>
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4a15      	ldr	r2, [pc, #84]	; (800a3a4 <vTaskSwitchContext+0xbc>)
 800a34e:	4413      	add	r3, r2
 800a350:	60bb      	str	r3, [r7, #8]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	605a      	str	r2, [r3, #4]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	3308      	adds	r3, #8
 800a364:	429a      	cmp	r2, r3
 800a366:	d104      	bne.n	800a372 <vTaskSwitchContext+0x8a>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	4a0b      	ldr	r2, [pc, #44]	; (800a3a8 <vTaskSwitchContext+0xc0>)
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	4a08      	ldr	r2, [pc, #32]	; (800a3a0 <vTaskSwitchContext+0xb8>)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <vTaskSwitchContext+0xc0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3354      	adds	r3, #84	; 0x54
 800a388:	4a08      	ldr	r2, [pc, #32]	; (800a3ac <vTaskSwitchContext+0xc4>)
 800a38a:	6013      	str	r3, [r2, #0]
}
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	2000125c 	.word	0x2000125c
 800a39c:	20001248 	.word	0x20001248
 800a3a0:	2000123c 	.word	0x2000123c
 800a3a4:	20000d64 	.word	0x20000d64
 800a3a8:	20000d60 	.word	0x20000d60
 800a3ac:	2000010c 	.word	0x2000010c

0800a3b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	60fb      	str	r3, [r7, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3d6:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <vTaskPlaceOnEventList+0x44>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3318      	adds	r3, #24
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7fd ff59 	bl	8008296 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	6838      	ldr	r0, [r7, #0]
 800a3e8:	f000 ff6c 	bl	800b2c4 <prvAddCurrentTaskToDelayedList>
}
 800a3ec:	bf00      	nop
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20000d60 	.word	0x20000d60

0800a3f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	617b      	str	r3, [r7, #20]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <vTaskPlaceOnEventListRestricted+0x54>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3318      	adds	r3, #24
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7fd ff10 	bl	800824e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a434:	f04f 33ff 	mov.w	r3, #4294967295
 800a438:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	68b8      	ldr	r0, [r7, #8]
 800a43e:	f000 ff41 	bl	800b2c4 <prvAddCurrentTaskToDelayedList>
	}
 800a442:	bf00      	nop
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20000d60 	.word	0x20000d60

0800a450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	3318      	adds	r3, #24
 800a480:	4618      	mov	r0, r3
 800a482:	f7fd ff41 	bl	8008308 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a486:	4b1e      	ldr	r3, [pc, #120]	; (800a500 <xTaskRemoveFromEventList+0xb0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d11d      	bne.n	800a4ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	3304      	adds	r3, #4
 800a492:	4618      	mov	r0, r3
 800a494:	f7fd ff38 	bl	8008308 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49c:	4b19      	ldr	r3, [pc, #100]	; (800a504 <xTaskRemoveFromEventList+0xb4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d903      	bls.n	800a4ac <xTaskRemoveFromEventList+0x5c>
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	4a16      	ldr	r2, [pc, #88]	; (800a504 <xTaskRemoveFromEventList+0xb4>)
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4a13      	ldr	r2, [pc, #76]	; (800a508 <xTaskRemoveFromEventList+0xb8>)
 800a4ba:	441a      	add	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f7fd fec3 	bl	800824e <vListInsertEnd>
 800a4c8:	e005      	b.n	800a4d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3318      	adds	r3, #24
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	480e      	ldr	r0, [pc, #56]	; (800a50c <xTaskRemoveFromEventList+0xbc>)
 800a4d2:	f7fd febc 	bl	800824e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4da:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <xTaskRemoveFromEventList+0xc0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d905      	bls.n	800a4f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	; (800a514 <xTaskRemoveFromEventList+0xc4>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e001      	b.n	800a4f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4f4:	697b      	ldr	r3, [r7, #20]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	2000125c 	.word	0x2000125c
 800a504:	2000123c 	.word	0x2000123c
 800a508:	20000d64 	.word	0x20000d64
 800a50c:	200011f4 	.word	0x200011f4
 800a510:	20000d60 	.word	0x20000d60
 800a514:	20001248 	.word	0x20001248

0800a518 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60fb      	str	r3, [r7, #12]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a53c:	f001 fb92 	bl	800bc64 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a540:	4b06      	ldr	r3, [pc, #24]	; (800a55c <vTaskSetTimeOutState+0x44>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <vTaskSetTimeOutState+0x48>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a550:	f001 fbb8 	bl	800bcc4 <vPortExitCritical>
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	2000124c 	.word	0x2000124c
 800a560:	20001238 	.word	0x20001238

0800a564 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a56c:	4b06      	ldr	r3, [pc, #24]	; (800a588 <vTaskInternalSetTimeOutState+0x24>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <vTaskInternalSetTimeOutState+0x28>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	605a      	str	r2, [r3, #4]
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	2000124c 	.word	0x2000124c
 800a58c:	20001238 	.word	0x20001238

0800a590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	613b      	str	r3, [r7, #16]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	60fb      	str	r3, [r7, #12]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a5d2:	f001 fb47 	bl	800bc64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	; (800a64c <xTaskCheckForTimeOut+0xbc>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	69ba      	ldr	r2, [r7, #24]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ee:	d102      	bne.n	800a5f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61fb      	str	r3, [r7, #28]
 800a5f4:	e023      	b.n	800a63e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b15      	ldr	r3, [pc, #84]	; (800a650 <xTaskCheckForTimeOut+0xc0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d007      	beq.n	800a612 <xTaskCheckForTimeOut+0x82>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d302      	bcc.n	800a612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a60c:	2301      	movs	r3, #1
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	e015      	b.n	800a63e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d20b      	bcs.n	800a634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	1ad2      	subs	r2, r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff ff9b 	bl	800a564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]
 800a632:	e004      	b.n	800a63e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a63a:	2301      	movs	r3, #1
 800a63c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a63e:	f001 fb41 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800a642:	69fb      	ldr	r3, [r7, #28]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3720      	adds	r7, #32
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20001238 	.word	0x20001238
 800a650:	2000124c 	.word	0x2000124c

0800a654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a654:	b480      	push	{r7}
 800a656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a658:	4b03      	ldr	r3, [pc, #12]	; (800a668 <vTaskMissedYield+0x14>)
 800a65a:	2201      	movs	r2, #1
 800a65c:	601a      	str	r2, [r3, #0]
}
 800a65e:	bf00      	nop
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	20001248 	.word	0x20001248

0800a66c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a674:	f000 f852 	bl	800a71c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <prvIdleTask+0x28>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d9f9      	bls.n	800a674 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a680:	4b05      	ldr	r3, [pc, #20]	; (800a698 <prvIdleTask+0x2c>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a690:	e7f0      	b.n	800a674 <prvIdleTask+0x8>
 800a692:	bf00      	nop
 800a694:	20000d64 	.word	0x20000d64
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	607b      	str	r3, [r7, #4]
 800a6a6:	e00c      	b.n	800a6c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <prvInitialiseTaskLists+0x60>)
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fd fd9c 	bl	80081f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	607b      	str	r3, [r7, #4]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b37      	cmp	r3, #55	; 0x37
 800a6c6:	d9ef      	bls.n	800a6a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6c8:	480d      	ldr	r0, [pc, #52]	; (800a700 <prvInitialiseTaskLists+0x64>)
 800a6ca:	f7fd fd93 	bl	80081f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6ce:	480d      	ldr	r0, [pc, #52]	; (800a704 <prvInitialiseTaskLists+0x68>)
 800a6d0:	f7fd fd90 	bl	80081f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6d4:	480c      	ldr	r0, [pc, #48]	; (800a708 <prvInitialiseTaskLists+0x6c>)
 800a6d6:	f7fd fd8d 	bl	80081f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6da:	480c      	ldr	r0, [pc, #48]	; (800a70c <prvInitialiseTaskLists+0x70>)
 800a6dc:	f7fd fd8a 	bl	80081f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6e0:	480b      	ldr	r0, [pc, #44]	; (800a710 <prvInitialiseTaskLists+0x74>)
 800a6e2:	f7fd fd87 	bl	80081f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6e6:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <prvInitialiseTaskLists+0x78>)
 800a6e8:	4a05      	ldr	r2, [pc, #20]	; (800a700 <prvInitialiseTaskLists+0x64>)
 800a6ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <prvInitialiseTaskLists+0x7c>)
 800a6ee:	4a05      	ldr	r2, [pc, #20]	; (800a704 <prvInitialiseTaskLists+0x68>)
 800a6f0:	601a      	str	r2, [r3, #0]
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000d64 	.word	0x20000d64
 800a700:	200011c4 	.word	0x200011c4
 800a704:	200011d8 	.word	0x200011d8
 800a708:	200011f4 	.word	0x200011f4
 800a70c:	20001208 	.word	0x20001208
 800a710:	20001220 	.word	0x20001220
 800a714:	200011ec 	.word	0x200011ec
 800a718:	200011f0 	.word	0x200011f0

0800a71c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a722:	e019      	b.n	800a758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a724:	f001 fa9e 	bl	800bc64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a728:	4b10      	ldr	r3, [pc, #64]	; (800a76c <prvCheckTasksWaitingTermination+0x50>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3304      	adds	r3, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f7fd fde7 	bl	8008308 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a73a:	4b0d      	ldr	r3, [pc, #52]	; (800a770 <prvCheckTasksWaitingTermination+0x54>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3b01      	subs	r3, #1
 800a740:	4a0b      	ldr	r2, [pc, #44]	; (800a770 <prvCheckTasksWaitingTermination+0x54>)
 800a742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a744:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <prvCheckTasksWaitingTermination+0x58>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3b01      	subs	r3, #1
 800a74a:	4a0a      	ldr	r2, [pc, #40]	; (800a774 <prvCheckTasksWaitingTermination+0x58>)
 800a74c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a74e:	f001 fab9 	bl	800bcc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f8e4 	bl	800a920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a758:	4b06      	ldr	r3, [pc, #24]	; (800a774 <prvCheckTasksWaitingTermination+0x58>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e1      	bne.n	800a724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20001208 	.word	0x20001208
 800a770:	20001234 	.word	0x20001234
 800a774:	2000121c 	.word	0x2000121c

0800a778 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <vTaskGetInfo+0x1a>
 800a78c:	4b2c      	ldr	r3, [pc, #176]	; (800a840 <vTaskGetInfo+0xc8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	e000      	b.n	800a794 <vTaskGetInfo+0x1c>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a7cc:	78fb      	ldrb	r3, [r7, #3]
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	d01a      	beq.n	800a808 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a7d2:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <vTaskGetInfo+0xc8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d103      	bne.n	800a7e4 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	731a      	strb	r2, [r3, #12]
 800a7e2:	e018      	b.n	800a816 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	78fa      	ldrb	r2, [r7, #3]
 800a7e8:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d112      	bne.n	800a816 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a7f0:	f7ff fb76 	bl	8009ee0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2202      	movs	r2, #2
 800a800:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a802:	f7ff fb7b 	bl	8009efc <xTaskResumeAll>
 800a806:	e006      	b.n	800a816 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a808:	6978      	ldr	r0, [r7, #20]
 800a80a:	f7ff fa93 	bl	8009d34 <eTaskGetState>
 800a80e:	4603      	mov	r3, r0
 800a810:	461a      	mov	r2, r3
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d009      	beq.n	800a830 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a820:	4618      	mov	r0, r3
 800a822:	f000 f861 	bl	800a8e8 <prvTaskCheckFreeStackSpace>
 800a826:	4603      	mov	r3, r0
 800a828:	461a      	mov	r2, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a82e:	e002      	b.n	800a836 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	841a      	strh	r2, [r3, #32]
	}
 800a836:	bf00      	nop
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20000d60 	.word	0x20000d60

0800a844 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4613      	mov	r3, r2
 800a850:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d03f      	beq.n	800a8de <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	623b      	str	r3, [r7, #32]
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	605a      	str	r2, [r3, #4]
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	3308      	adds	r3, #8
 800a874:	429a      	cmp	r2, r3
 800a876:	d104      	bne.n	800a882 <prvListTasksWithinSingleList+0x3e>
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	605a      	str	r2, [r3, #4]
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	61bb      	str	r3, [r7, #24]
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	605a      	str	r2, [r3, #4]
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d104      	bne.n	800a8ae <prvListTasksWithinSingleList+0x6a>
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	605a      	str	r2, [r3, #4]
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	1899      	adds	r1, r3, r2
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f7ff ff54 	bl	800a778 <vTaskGetInfo>
				uxTask++;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d1d5      	bne.n	800a88a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3728      	adds	r7, #40	; 0x28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a8f4:	e005      	b.n	800a902 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2ba5      	cmp	r3, #165	; 0xa5
 800a908:	d0f5      	beq.n	800a8f6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	089b      	lsrs	r3, r3, #2
 800a90e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	b29b      	uxth	r3, r3
	}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3354      	adds	r3, #84	; 0x54
 800a92c:	4618      	mov	r0, r3
 800a92e:	f003 f8f7 	bl	800db20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d108      	bne.n	800a94e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	4618      	mov	r0, r3
 800a942:	f001 fb7d 	bl	800c040 <vPortFree>
				vPortFree( pxTCB );
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f001 fb7a 	bl	800c040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a94c:	e018      	b.n	800a980 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a954:	2b01      	cmp	r3, #1
 800a956:	d103      	bne.n	800a960 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 fb71 	bl	800c040 <vPortFree>
	}
 800a95e:	e00f      	b.n	800a980 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a966:	2b02      	cmp	r3, #2
 800a968:	d00a      	beq.n	800a980 <prvDeleteTCB+0x60>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	60fb      	str	r3, [r7, #12]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <prvDeleteTCB+0x5e>
	}
 800a980:	bf00      	nop
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a98e:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <prvResetNextTaskUnblockTime+0x38>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d104      	bne.n	800a9a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a998:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295
 800a99e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9a0:	e008      	b.n	800a9b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a2:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <prvResetNextTaskUnblockTime+0x38>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a04      	ldr	r2, [pc, #16]	; (800a9c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a9b2:	6013      	str	r3, [r2, #0]
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	200011ec 	.word	0x200011ec
 800a9c4:	20001254 	.word	0x20001254

0800a9c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <xTaskGetCurrentTaskHandle+0x1c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a9d4:	687b      	ldr	r3, [r7, #4]
	}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20000d60 	.word	0x20000d60

0800a9e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9ee:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <xTaskGetSchedulerState+0x34>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	607b      	str	r3, [r7, #4]
 800a9fa:	e008      	b.n	800aa0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9fc:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <xTaskGetSchedulerState+0x38>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa04:	2302      	movs	r3, #2
 800aa06:	607b      	str	r3, [r7, #4]
 800aa08:	e001      	b.n	800aa0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa0e:	687b      	ldr	r3, [r7, #4]
	}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	20001240 	.word	0x20001240
 800aa20:	2000125c 	.word	0x2000125c

0800aa24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d051      	beq.n	800aade <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3e:	4b2a      	ldr	r3, [pc, #168]	; (800aae8 <xTaskPriorityInherit+0xc4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d241      	bcs.n	800aacc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	db06      	blt.n	800aa5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa50:	4b25      	ldr	r3, [pc, #148]	; (800aae8 <xTaskPriorityInherit+0xc4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	6959      	ldr	r1, [r3, #20]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4a1f      	ldr	r2, [pc, #124]	; (800aaec <xTaskPriorityInherit+0xc8>)
 800aa70:	4413      	add	r3, r2
 800aa72:	4299      	cmp	r1, r3
 800aa74:	d122      	bne.n	800aabc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	3304      	adds	r3, #4
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fd fc44 	bl	8008308 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa80:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <xTaskPriorityInherit+0xc4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8e:	4b18      	ldr	r3, [pc, #96]	; (800aaf0 <xTaskPriorityInherit+0xcc>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d903      	bls.n	800aa9e <xTaskPriorityInherit+0x7a>
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	4a15      	ldr	r2, [pc, #84]	; (800aaf0 <xTaskPriorityInherit+0xcc>)
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4a10      	ldr	r2, [pc, #64]	; (800aaec <xTaskPriorityInherit+0xc8>)
 800aaac:	441a      	add	r2, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	3304      	adds	r3, #4
 800aab2:	4619      	mov	r1, r3
 800aab4:	4610      	mov	r0, r2
 800aab6:	f7fd fbca 	bl	800824e <vListInsertEnd>
 800aaba:	e004      	b.n	800aac6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <xTaskPriorityInherit+0xc4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aac6:	2301      	movs	r3, #1
 800aac8:	60fb      	str	r3, [r7, #12]
 800aaca:	e008      	b.n	800aade <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <xTaskPriorityInherit+0xc4>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d201      	bcs.n	800aade <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aada:	2301      	movs	r3, #1
 800aadc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aade:	68fb      	ldr	r3, [r7, #12]
	}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	20000d60 	.word	0x20000d60
 800aaec:	20000d64 	.word	0x20000d64
 800aaf0:	2000123c 	.word	0x2000123c

0800aaf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d056      	beq.n	800abb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab0a:	4b2e      	ldr	r3, [pc, #184]	; (800abc4 <xTaskPriorityDisinherit+0xd0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d00a      	beq.n	800ab2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	60fb      	str	r3, [r7, #12]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10a      	bne.n	800ab48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	60bb      	str	r3, [r7, #8]
}
 800ab44:	bf00      	nop
 800ab46:	e7fe      	b.n	800ab46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	1e5a      	subs	r2, r3, #1
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d02c      	beq.n	800abb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d128      	bne.n	800abb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fd fbcc 	bl	8008308 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <xTaskPriorityDisinherit+0xd4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d903      	bls.n	800ab98 <xTaskPriorityDisinherit+0xa4>
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	4a0c      	ldr	r2, [pc, #48]	; (800abc8 <xTaskPriorityDisinherit+0xd4>)
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4a09      	ldr	r2, [pc, #36]	; (800abcc <xTaskPriorityDisinherit+0xd8>)
 800aba6:	441a      	add	r2, r3
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f7fd fb4d 	bl	800824e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abb4:	2301      	movs	r3, #1
 800abb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abb8:	697b      	ldr	r3, [r7, #20]
	}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000d60 	.word	0x20000d60
 800abc8:	2000123c 	.word	0x2000123c
 800abcc:	20000d64 	.word	0x20000d64

0800abd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800abde:	2301      	movs	r3, #1
 800abe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d06a      	beq.n	800acbe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	60fb      	str	r3, [r7, #12]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d902      	bls.n	800ac16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	e002      	b.n	800ac1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	69fa      	ldr	r2, [r7, #28]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d04b      	beq.n	800acbe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d146      	bne.n	800acbe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ac30:	4b25      	ldr	r3, [pc, #148]	; (800acc8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d10a      	bne.n	800ac50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60bb      	str	r3, [r7, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	db04      	blt.n	800ac6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	6959      	ldr	r1, [r3, #20]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4a13      	ldr	r2, [pc, #76]	; (800accc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac7e:	4413      	add	r3, r2
 800ac80:	4299      	cmp	r1, r3
 800ac82:	d11c      	bne.n	800acbe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	3304      	adds	r3, #4
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fd fb3d 	bl	8008308 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac92:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d903      	bls.n	800aca2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	4a0c      	ldr	r2, [pc, #48]	; (800acd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4a07      	ldr	r2, [pc, #28]	; (800accc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800acb0:	441a      	add	r2, r3
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	3304      	adds	r3, #4
 800acb6:	4619      	mov	r1, r3
 800acb8:	4610      	mov	r0, r2
 800acba:	f7fd fac8 	bl	800824e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acbe:	bf00      	nop
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20000d60 	.word	0x20000d60
 800accc:	20000d64 	.word	0x20000d64
 800acd0:	2000123c 	.word	0x2000123c

0800acd4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f002 ffec 	bl	800dcbe <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7f5 fa7c 	bl	80001e4 <strlen>
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	e007      	b.n	800ad00 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4413      	add	r3, r2
 800acf6:	2220      	movs	r2, #32
 800acf8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3301      	adds	r3, #1
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b0e      	cmp	r3, #14
 800ad04:	d9f4      	bls.n	800acf0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
	}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b089      	sub	sp, #36	; 0x24
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ad2e:	4b45      	ldr	r3, [pc, #276]	; (800ae44 <vTaskList+0x124>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ad34:	4b43      	ldr	r3, [pc, #268]	; (800ae44 <vTaskList+0x124>)
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f001 f8b1 	bl	800bea8 <pvPortMalloc>
 800ad46:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d076      	beq.n	800ae3c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ad4e:	2200      	movs	r2, #0
 800ad50:	68f9      	ldr	r1, [r7, #12]
 800ad52:	68b8      	ldr	r0, [r7, #8]
 800ad54:	f7ff f980 	bl	800a058 <uxTaskGetSystemState>
 800ad58:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	e066      	b.n	800ae2e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4613      	mov	r3, r2
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	4413      	add	r3, r2
 800ad70:	7b1b      	ldrb	r3, [r3, #12]
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	d81b      	bhi.n	800adae <vTaskList+0x8e>
 800ad76:	a201      	add	r2, pc, #4	; (adr r2, 800ad7c <vTaskList+0x5c>)
 800ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7c:	0800ad91 	.word	0x0800ad91
 800ad80:	0800ad97 	.word	0x0800ad97
 800ad84:	0800ad9d 	.word	0x0800ad9d
 800ad88:	0800ada3 	.word	0x0800ada3
 800ad8c:	0800ada9 	.word	0x0800ada9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ad90:	2358      	movs	r3, #88	; 0x58
 800ad92:	74fb      	strb	r3, [r7, #19]
										break;
 800ad94:	e00e      	b.n	800adb4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ad96:	2352      	movs	r3, #82	; 0x52
 800ad98:	74fb      	strb	r3, [r7, #19]
										break;
 800ad9a:	e00b      	b.n	800adb4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ad9c:	2342      	movs	r3, #66	; 0x42
 800ad9e:	74fb      	strb	r3, [r7, #19]
										break;
 800ada0:	e008      	b.n	800adb4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ada2:	2353      	movs	r3, #83	; 0x53
 800ada4:	74fb      	strb	r3, [r7, #19]
										break;
 800ada6:	e005      	b.n	800adb4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ada8:	2344      	movs	r3, #68	; 0x44
 800adaa:	74fb      	strb	r3, [r7, #19]
										break;
 800adac:	e002      	b.n	800adb4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800adae:	2300      	movs	r3, #0
 800adb0:	74fb      	strb	r3, [r7, #19]
										break;
 800adb2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	4613      	mov	r3, r2
 800adb8:	00db      	lsls	r3, r3, #3
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	461a      	mov	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4413      	add	r3, r2
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff ff83 	bl	800acd4 <prvWriteNameToBuffer>
 800adce:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800add0:	7cf9      	ldrb	r1, [r7, #19]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	4613      	mov	r3, r2
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	461a      	mov	r2, r3
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	4413      	add	r3, r2
 800ade2:	6918      	ldr	r0, [r3, #16]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	4613      	mov	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	461a      	mov	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4413      	add	r3, r2
 800adf4:	8c1b      	ldrh	r3, [r3, #32]
 800adf6:	461c      	mov	r4, r3
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4613      	mov	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	461a      	mov	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4413      	add	r3, r2
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	9400      	str	r4, [sp, #0]
 800ae0e:	4603      	mov	r3, r0
 800ae10:	460a      	mov	r2, r1
 800ae12:	490d      	ldr	r1, [pc, #52]	; (800ae48 <vTaskList+0x128>)
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f002 feef 	bl	800dbf8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f5 f9e2 	bl	80001e4 <strlen>
 800ae20:	4602      	mov	r2, r0
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4413      	add	r3, r2
 800ae26:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d394      	bcc.n	800ad60 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ae36:	68b8      	ldr	r0, [r7, #8]
 800ae38:	f001 f902 	bl	800c040 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae3c:	bf00      	nop
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd90      	pop	{r4, r7, pc}
 800ae44:	20001234 	.word	0x20001234
 800ae48:	08010368 	.word	0x08010368

0800ae4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae58:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae5e:	3201      	adds	r2, #1
 800ae60:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ae62:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae64:	681b      	ldr	r3, [r3, #0]
	}
 800ae66:	4618      	mov	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000d60 	.word	0x20000d60

0800ae74 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ae82:	f000 feef 	bl	800bc64 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ae86:	4b29      	ldr	r3, [pc, #164]	; (800af2c <xTaskNotifyWait+0xb8>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d01c      	beq.n	800aece <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <xTaskNotifyWait+0xb8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	43d2      	mvns	r2, r2
 800aea0:	400a      	ands	r2, r1
 800aea2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800aea6:	4b21      	ldr	r3, [pc, #132]	; (800af2c <xTaskNotifyWait+0xb8>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f000 fa03 	bl	800b2c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800aebe:	4b1c      	ldr	r3, [pc, #112]	; (800af30 <xTaskNotifyWait+0xbc>)
 800aec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aece:	f000 fef9 	bl	800bcc4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800aed2:	f000 fec7 	bl	800bc64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d005      	beq.n	800aee8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800aedc:	4b13      	ldr	r3, [pc, #76]	; (800af2c <xTaskNotifyWait+0xb8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aee8:	4b10      	ldr	r3, [pc, #64]	; (800af2c <xTaskNotifyWait+0xb8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d002      	beq.n	800aefc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
 800aefa:	e00a      	b.n	800af12 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800aefc:	4b0b      	ldr	r3, [pc, #44]	; (800af2c <xTaskNotifyWait+0xb8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	43d2      	mvns	r2, r2
 800af08:	400a      	ands	r2, r1
 800af0a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800af0e:	2301      	movs	r3, #1
 800af10:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <xTaskNotifyWait+0xb8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800af1c:	f000 fed2 	bl	800bcc4 <vPortExitCritical>

		return xReturn;
 800af20:	697b      	ldr	r3, [r7, #20]
	}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20000d60 	.word	0x20000d60
 800af30:	e000ed04 	.word	0xe000ed04

0800af34 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08a      	sub	sp, #40	; 0x28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	4613      	mov	r3, r2
 800af42:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800af44:	2301      	movs	r3, #1
 800af46:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <xTaskGenericNotify+0x30>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	61bb      	str	r3, [r7, #24]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800af68:	f000 fe7c 	bl	800bc64 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d004      	beq.n	800af7c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800af82:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d82d      	bhi.n	800afee <xTaskGenericNotify+0xba>
 800af92:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <xTaskGenericNotify+0x64>)
 800af94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af98:	0800b011 	.word	0x0800b011
 800af9c:	0800afad 	.word	0x0800afad
 800afa0:	0800afbf 	.word	0x0800afbf
 800afa4:	0800afcf 	.word	0x0800afcf
 800afa8:	0800afd9 	.word	0x0800afd9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	431a      	orrs	r2, r3
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800afbc:	e02b      	b.n	800b016 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800afcc:	e023      	b.n	800b016 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800afd6:	e01e      	b.n	800b016 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d004      	beq.n	800afe8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800afe6:	e016      	b.n	800b016 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800afe8:	2300      	movs	r3, #0
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800afec:	e013      	b.n	800b016 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff8:	d00c      	beq.n	800b014 <xTaskGenericNotify+0xe0>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	617b      	str	r3, [r7, #20]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <xTaskGenericNotify+0xda>
					break;
 800b010:	bf00      	nop
 800b012:	e000      	b.n	800b016 <xTaskGenericNotify+0xe2>

					break;
 800b014:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b016:	7ffb      	ldrb	r3, [r7, #31]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d13a      	bne.n	800b092 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	3304      	adds	r3, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f7fd f971 	bl	8008308 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02a:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <xTaskGenericNotify+0x16c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d903      	bls.n	800b03a <xTaskGenericNotify+0x106>
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	4a1a      	ldr	r2, [pc, #104]	; (800b0a0 <xTaskGenericNotify+0x16c>)
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4a17      	ldr	r2, [pc, #92]	; (800b0a4 <xTaskGenericNotify+0x170>)
 800b048:	441a      	add	r2, r3
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	4610      	mov	r0, r2
 800b052:	f7fd f8fc 	bl	800824e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <xTaskGenericNotify+0x140>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	613b      	str	r3, [r7, #16]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b078:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <xTaskGenericNotify+0x174>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	429a      	cmp	r2, r3
 800b080:	d907      	bls.n	800b092 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b082:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <xTaskGenericNotify+0x178>)
 800b084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b092:	f000 fe17 	bl	800bcc4 <vPortExitCritical>

		return xReturn;
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b098:	4618      	mov	r0, r3
 800b09a:	3728      	adds	r7, #40	; 0x28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	2000123c 	.word	0x2000123c
 800b0a4:	20000d64 	.word	0x20000d64
 800b0a8:	20000d60 	.word	0x20000d60
 800b0ac:	e000ed04 	.word	0xe000ed04

0800b0b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08e      	sub	sp, #56	; 0x38
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0e0:	f000 fea2 	bl	800be28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b0e8:	f3ef 8211 	mrs	r2, BASEPRI
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	623a      	str	r2, [r7, #32]
 800b0fe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b100:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b11a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	2202      	movs	r2, #2
 800b122:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	2b04      	cmp	r3, #4
 800b12a:	d82f      	bhi.n	800b18c <xTaskGenericNotifyFromISR+0xdc>
 800b12c:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <xTaskGenericNotifyFromISR+0x84>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b1af 	.word	0x0800b1af
 800b138:	0800b149 	.word	0x0800b149
 800b13c:	0800b15b 	.word	0x0800b15b
 800b140:	0800b16b 	.word	0x0800b16b
 800b144:	0800b175 	.word	0x0800b175
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	431a      	orrs	r2, r3
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b158:	e02c      	b.n	800b1b4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b168:	e024      	b.n	800b1b4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b172:	e01f      	b.n	800b1b4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d004      	beq.n	800b186 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b184:	e016      	b.n	800b1b4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b186:	2300      	movs	r3, #0
 800b188:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b18a:	e013      	b.n	800b1b4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d00c      	beq.n	800b1b2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	61bb      	str	r3, [r7, #24]
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b1ae:	bf00      	nop
 800b1b0:	e000      	b.n	800b1b4 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b1b2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b1b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d146      	bne.n	800b24a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00a      	beq.n	800b1da <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	617b      	str	r3, [r7, #20]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1da:	4b21      	ldr	r3, [pc, #132]	; (800b260 <xTaskGenericNotifyFromISR+0x1b0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d11d      	bne.n	800b21e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd f88e 	bl	8008308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f0:	4b1c      	ldr	r3, [pc, #112]	; (800b264 <xTaskGenericNotifyFromISR+0x1b4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d903      	bls.n	800b200 <xTaskGenericNotifyFromISR+0x150>
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	4a19      	ldr	r2, [pc, #100]	; (800b264 <xTaskGenericNotifyFromISR+0x1b4>)
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4a16      	ldr	r2, [pc, #88]	; (800b268 <xTaskGenericNotifyFromISR+0x1b8>)
 800b20e:	441a      	add	r2, r3
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	3304      	adds	r3, #4
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f7fd f819 	bl	800824e <vListInsertEnd>
 800b21c:	e005      	b.n	800b22a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	3318      	adds	r3, #24
 800b222:	4619      	mov	r1, r3
 800b224:	4811      	ldr	r0, [pc, #68]	; (800b26c <xTaskGenericNotifyFromISR+0x1bc>)
 800b226:	f7fd f812 	bl	800824e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	4b10      	ldr	r3, [pc, #64]	; (800b270 <xTaskGenericNotifyFromISR+0x1c0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	429a      	cmp	r2, r3
 800b236:	d908      	bls.n	800b24a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b240:	2201      	movs	r2, #1
 800b242:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b244:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <xTaskGenericNotifyFromISR+0x1c4>)
 800b246:	2201      	movs	r2, #1
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f383 8811 	msr	BASEPRI, r3
}
 800b254:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b258:	4618      	mov	r0, r3
 800b25a:	3738      	adds	r7, #56	; 0x38
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	2000125c 	.word	0x2000125c
 800b264:	2000123c 	.word	0x2000123c
 800b268:	20000d64 	.word	0x20000d64
 800b26c:	200011f4 	.word	0x200011f4
 800b270:	20000d60 	.word	0x20000d60
 800b274:	20001248 	.word	0x20001248

0800b278 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d102      	bne.n	800b28c <xTaskNotifyStateClear+0x14>
 800b286:	4b0e      	ldr	r3, [pc, #56]	; (800b2c0 <xTaskNotifyStateClear+0x48>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	e000      	b.n	800b28e <xTaskNotifyStateClear+0x16>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800b290:	f000 fce8 	bl	800bc64 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d106      	bne.n	800b2ae <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	e001      	b.n	800b2b2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b2b2:	f000 fd07 	bl	800bcc4 <vPortExitCritical>

		return xReturn;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
	}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	20000d60 	.word	0x20000d60

0800b2c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2ce:	4b21      	ldr	r3, [pc, #132]	; (800b354 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2d4:	4b20      	ldr	r3, [pc, #128]	; (800b358 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd f814 	bl	8008308 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e6:	d10a      	bne.n	800b2fe <prvAddCurrentTaskToDelayedList+0x3a>
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d007      	beq.n	800b2fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2ee:	4b1a      	ldr	r3, [pc, #104]	; (800b358 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4819      	ldr	r0, [pc, #100]	; (800b35c <prvAddCurrentTaskToDelayedList+0x98>)
 800b2f8:	f7fc ffa9 	bl	800824e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2fc:	e026      	b.n	800b34c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4413      	add	r3, r2
 800b304:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b306:	4b14      	ldr	r3, [pc, #80]	; (800b358 <prvAddCurrentTaskToDelayedList+0x94>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	429a      	cmp	r2, r3
 800b314:	d209      	bcs.n	800b32a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b316:	4b12      	ldr	r3, [pc, #72]	; (800b360 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <prvAddCurrentTaskToDelayedList+0x94>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3304      	adds	r3, #4
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	f7fc ffb7 	bl	8008296 <vListInsert>
}
 800b328:	e010      	b.n	800b34c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b32a:	4b0e      	ldr	r3, [pc, #56]	; (800b364 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <prvAddCurrentTaskToDelayedList+0x94>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3304      	adds	r3, #4
 800b334:	4619      	mov	r1, r3
 800b336:	4610      	mov	r0, r2
 800b338:	f7fc ffad 	bl	8008296 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b33c:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	429a      	cmp	r2, r3
 800b344:	d202      	bcs.n	800b34c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b346:	4a08      	ldr	r2, [pc, #32]	; (800b368 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	6013      	str	r3, [r2, #0]
}
 800b34c:	bf00      	nop
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20001238 	.word	0x20001238
 800b358:	20000d60 	.word	0x20000d60
 800b35c:	20001220 	.word	0x20001220
 800b360:	200011f0 	.word	0x200011f0
 800b364:	200011ec 	.word	0x200011ec
 800b368:	20001254 	.word	0x20001254

0800b36c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08a      	sub	sp, #40	; 0x28
 800b370:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b376:	f000 fb07 	bl	800b988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b37a:	4b1c      	ldr	r3, [pc, #112]	; (800b3ec <xTimerCreateTimerTask+0x80>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d021      	beq.n	800b3c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b38a:	1d3a      	adds	r2, r7, #4
 800b38c:	f107 0108 	add.w	r1, r7, #8
 800b390:	f107 030c 	add.w	r3, r7, #12
 800b394:	4618      	mov	r0, r3
 800b396:	f7fc ff13 	bl	80081c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	9202      	str	r2, [sp, #8]
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	460a      	mov	r2, r1
 800b3ac:	4910      	ldr	r1, [pc, #64]	; (800b3f0 <xTimerCreateTimerTask+0x84>)
 800b3ae:	4811      	ldr	r0, [pc, #68]	; (800b3f4 <xTimerCreateTimerTask+0x88>)
 800b3b0:	f7fe fad3 	bl	800995a <xTaskCreateStatic>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	4a10      	ldr	r2, [pc, #64]	; (800b3f8 <xTimerCreateTimerTask+0x8c>)
 800b3b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <xTimerCreateTimerTask+0x8c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	613b      	str	r3, [r7, #16]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3e2:	697b      	ldr	r3, [r7, #20]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20001290 	.word	0x20001290
 800b3f0:	08010378 	.word	0x08010378
 800b3f4:	0800b531 	.word	0x0800b531
 800b3f8:	20001294 	.word	0x20001294

0800b3fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08a      	sub	sp, #40	; 0x28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10a      	bne.n	800b42a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	623b      	str	r3, [r7, #32]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b42a:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <xTimerGenericCommand+0x98>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d02a      	beq.n	800b488 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b05      	cmp	r3, #5
 800b442:	dc18      	bgt.n	800b476 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b444:	f7ff fad0 	bl	800a9e8 <xTaskGetSchedulerState>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d109      	bne.n	800b462 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b44e:	4b11      	ldr	r3, [pc, #68]	; (800b494 <xTimerGenericCommand+0x98>)
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	f107 0110 	add.w	r1, r7, #16
 800b456:	2300      	movs	r3, #0
 800b458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45a:	f7fd f8ef 	bl	800863c <xQueueGenericSend>
 800b45e:	6278      	str	r0, [r7, #36]	; 0x24
 800b460:	e012      	b.n	800b488 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b462:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <xTimerGenericCommand+0x98>)
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f107 0110 	add.w	r1, r7, #16
 800b46a:	2300      	movs	r3, #0
 800b46c:	2200      	movs	r2, #0
 800b46e:	f7fd f8e5 	bl	800863c <xQueueGenericSend>
 800b472:	6278      	str	r0, [r7, #36]	; 0x24
 800b474:	e008      	b.n	800b488 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b476:	4b07      	ldr	r3, [pc, #28]	; (800b494 <xTimerGenericCommand+0x98>)
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	f107 0110 	add.w	r1, r7, #16
 800b47e:	2300      	movs	r3, #0
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	f7fd f9d9 	bl	8008838 <xQueueGenericSendFromISR>
 800b486:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3728      	adds	r7, #40	; 0x28
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20001290 	.word	0x20001290

0800b498 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a2:	4b22      	ldr	r3, [pc, #136]	; (800b52c <prvProcessExpiredTimer+0x94>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fc ff29 	bl	8008308 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d022      	beq.n	800b50a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	699a      	ldr	r2, [r3, #24]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	18d1      	adds	r1, r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	6978      	ldr	r0, [r7, #20]
 800b4d2:	f000 f8d1 	bl	800b678 <prvInsertTimerInActiveList>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d01f      	beq.n	800b51c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	6978      	ldr	r0, [r7, #20]
 800b4e8:	f7ff ff88 	bl	800b3fc <xTimerGenericCommand>
 800b4ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d113      	bne.n	800b51c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	60fb      	str	r3, [r7, #12]
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b510:	f023 0301 	bic.w	r3, r3, #1
 800b514:	b2da      	uxtb	r2, r3
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	6978      	ldr	r0, [r7, #20]
 800b522:	4798      	blx	r3
}
 800b524:	bf00      	nop
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20001288 	.word	0x20001288

0800b530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b538:	f107 0308 	add.w	r3, r7, #8
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 f857 	bl	800b5f0 <prvGetNextExpireTime>
 800b542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	4619      	mov	r1, r3
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f803 	bl	800b554 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b54e:	f000 f8d5 	bl	800b6fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b552:	e7f1      	b.n	800b538 <prvTimerTask+0x8>

0800b554 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b55e:	f7fe fcbf 	bl	8009ee0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b562:	f107 0308 	add.w	r3, r7, #8
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f866 	bl	800b638 <prvSampleTimeNow>
 800b56c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d130      	bne.n	800b5d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <prvProcessTimerOrBlockTask+0x3c>
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d806      	bhi.n	800b590 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b582:	f7fe fcbb 	bl	8009efc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff ff85 	bl	800b498 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b58e:	e024      	b.n	800b5da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b596:	4b13      	ldr	r3, [pc, #76]	; (800b5e4 <prvProcessTimerOrBlockTask+0x90>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <prvProcessTimerOrBlockTask+0x50>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e000      	b.n	800b5a6 <prvProcessTimerOrBlockTask+0x52>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <prvProcessTimerOrBlockTask+0x94>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f7fd fda5 	bl	8009104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5ba:	f7fe fc9f 	bl	8009efc <xTaskResumeAll>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5c4:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <prvProcessTimerOrBlockTask+0x98>)
 800b5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	f3bf 8f6f 	isb	sy
}
 800b5d4:	e001      	b.n	800b5da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5d6:	f7fe fc91 	bl	8009efc <xTaskResumeAll>
}
 800b5da:	bf00      	nop
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	2000128c 	.word	0x2000128c
 800b5e8:	20001290 	.word	0x20001290
 800b5ec:	e000ed04 	.word	0xe000ed04

0800b5f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5f8:	4b0e      	ldr	r3, [pc, #56]	; (800b634 <prvGetNextExpireTime+0x44>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <prvGetNextExpireTime+0x16>
 800b602:	2201      	movs	r2, #1
 800b604:	e000      	b.n	800b608 <prvGetNextExpireTime+0x18>
 800b606:	2200      	movs	r2, #0
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d105      	bne.n	800b620 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b614:	4b07      	ldr	r3, [pc, #28]	; (800b634 <prvGetNextExpireTime+0x44>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	e001      	b.n	800b624 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b620:	2300      	movs	r3, #0
 800b622:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b624:	68fb      	ldr	r3, [r7, #12]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	20001288 	.word	0x20001288

0800b638 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b640:	f7fe fcfa 	bl	800a038 <xTaskGetTickCount>
 800b644:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b646:	4b0b      	ldr	r3, [pc, #44]	; (800b674 <prvSampleTimeNow+0x3c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d205      	bcs.n	800b65c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b650:	f000 f936 	bl	800b8c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e002      	b.n	800b662 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b662:	4a04      	ldr	r2, [pc, #16]	; (800b674 <prvSampleTimeNow+0x3c>)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b668:	68fb      	ldr	r3, [r7, #12]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20001298 	.word	0x20001298

0800b678 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b686:	2300      	movs	r3, #0
 800b688:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d812      	bhi.n	800b6c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	1ad2      	subs	r2, r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d302      	bcc.n	800b6b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	e01b      	b.n	800b6ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6b2:	4b10      	ldr	r3, [pc, #64]	; (800b6f4 <prvInsertTimerInActiveList+0x7c>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4610      	mov	r0, r2
 800b6be:	f7fc fdea 	bl	8008296 <vListInsert>
 800b6c2:	e012      	b.n	800b6ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d206      	bcs.n	800b6da <prvInsertTimerInActiveList+0x62>
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d302      	bcc.n	800b6da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	617b      	str	r3, [r7, #20]
 800b6d8:	e007      	b.n	800b6ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6da:	4b07      	ldr	r3, [pc, #28]	; (800b6f8 <prvInsertTimerInActiveList+0x80>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7fc fdd6 	bl	8008296 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6ea:	697b      	ldr	r3, [r7, #20]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	2000128c 	.word	0x2000128c
 800b6f8:	20001288 	.word	0x20001288

0800b6fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08e      	sub	sp, #56	; 0x38
 800b700:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b702:	e0ca      	b.n	800b89a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	da18      	bge.n	800b73c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b70a:	1d3b      	adds	r3, r7, #4
 800b70c:	3304      	adds	r3, #4
 800b70e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	61fb      	str	r3, [r7, #28]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b732:	6850      	ldr	r0, [r2, #4]
 800b734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b736:	6892      	ldr	r2, [r2, #8]
 800b738:	4611      	mov	r1, r2
 800b73a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f2c0 80aa 	blt.w	800b898 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	3304      	adds	r3, #4
 800b754:	4618      	mov	r0, r3
 800b756:	f7fc fdd7 	bl	8008308 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b75a:	463b      	mov	r3, r7
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff ff6b 	bl	800b638 <prvSampleTimeNow>
 800b762:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b09      	cmp	r3, #9
 800b768:	f200 8097 	bhi.w	800b89a <prvProcessReceivedCommands+0x19e>
 800b76c:	a201      	add	r2, pc, #4	; (adr r2, 800b774 <prvProcessReceivedCommands+0x78>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b79d 	.word	0x0800b79d
 800b778:	0800b79d 	.word	0x0800b79d
 800b77c:	0800b79d 	.word	0x0800b79d
 800b780:	0800b811 	.word	0x0800b811
 800b784:	0800b825 	.word	0x0800b825
 800b788:	0800b86f 	.word	0x0800b86f
 800b78c:	0800b79d 	.word	0x0800b79d
 800b790:	0800b79d 	.word	0x0800b79d
 800b794:	0800b811 	.word	0x0800b811
 800b798:	0800b825 	.word	0x0800b825
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7a2:	f043 0301 	orr.w	r3, r3, #1
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	18d1      	adds	r1, r2, r3
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7bc:	f7ff ff5c 	bl	800b678 <prvInsertTimerInActiveList>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d069      	beq.n	800b89a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d05e      	beq.n	800b89a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	441a      	add	r2, r3
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ee:	f7ff fe05 	bl	800b3fc <xTimerGenericCommand>
 800b7f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d14f      	bne.n	800b89a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	61bb      	str	r3, [r7, #24]
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b816:	f023 0301 	bic.w	r3, r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b822:	e03a      	b.n	800b89a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	617b      	str	r3, [r7, #20]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	699a      	ldr	r2, [r3, #24]
 800b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b860:	18d1      	adds	r1, r2, r3
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b868:	f7ff ff06 	bl	800b678 <prvInsertTimerInActiveList>
					break;
 800b86c:	e015      	b.n	800b89a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b87e:	f000 fbdf 	bl	800c040 <vPortFree>
 800b882:	e00a      	b.n	800b89a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b88a:	f023 0301 	bic.w	r3, r3, #1
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b896:	e000      	b.n	800b89a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b898:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b89a:	4b08      	ldr	r3, [pc, #32]	; (800b8bc <prvProcessReceivedCommands+0x1c0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	1d39      	adds	r1, r7, #4
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd f8f0 	bl	8008a88 <xQueueReceive>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f47f af2a 	bne.w	800b704 <prvProcessReceivedCommands+0x8>
	}
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	3730      	adds	r7, #48	; 0x30
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20001290 	.word	0x20001290

0800b8c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8c6:	e048      	b.n	800b95a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8c8:	4b2d      	ldr	r3, [pc, #180]	; (800b980 <prvSwitchTimerLists+0xc0>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d2:	4b2b      	ldr	r3, [pc, #172]	; (800b980 <prvSwitchTimerLists+0xc0>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fc fd11 	bl	8008308 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d02e      	beq.n	800b95a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	4413      	add	r3, r2
 800b904:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d90e      	bls.n	800b92c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b91a:	4b19      	ldr	r3, [pc, #100]	; (800b980 <prvSwitchTimerLists+0xc0>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3304      	adds	r3, #4
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f7fc fcb6 	bl	8008296 <vListInsert>
 800b92a:	e016      	b.n	800b95a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b92c:	2300      	movs	r3, #0
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	2300      	movs	r3, #0
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	2100      	movs	r1, #0
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff fd60 	bl	800b3fc <xTimerGenericCommand>
 800b93c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	603b      	str	r3, [r7, #0]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b95a:	4b09      	ldr	r3, [pc, #36]	; (800b980 <prvSwitchTimerLists+0xc0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1b1      	bne.n	800b8c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <prvSwitchTimerLists+0xc0>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b96a:	4b06      	ldr	r3, [pc, #24]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a04      	ldr	r2, [pc, #16]	; (800b980 <prvSwitchTimerLists+0xc0>)
 800b970:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b972:	4a04      	ldr	r2, [pc, #16]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	6013      	str	r3, [r2, #0]
}
 800b978:	bf00      	nop
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	20001288 	.word	0x20001288
 800b984:	2000128c 	.word	0x2000128c

0800b988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b98e:	f000 f969 	bl	800bc64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <prvCheckForValidListAndQueue+0x60>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d120      	bne.n	800b9dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b99a:	4814      	ldr	r0, [pc, #80]	; (800b9ec <prvCheckForValidListAndQueue+0x64>)
 800b99c:	f7fc fc2a 	bl	80081f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9a0:	4813      	ldr	r0, [pc, #76]	; (800b9f0 <prvCheckForValidListAndQueue+0x68>)
 800b9a2:	f7fc fc27 	bl	80081f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9a6:	4b13      	ldr	r3, [pc, #76]	; (800b9f4 <prvCheckForValidListAndQueue+0x6c>)
 800b9a8:	4a10      	ldr	r2, [pc, #64]	; (800b9ec <prvCheckForValidListAndQueue+0x64>)
 800b9aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9ac:	4b12      	ldr	r3, [pc, #72]	; (800b9f8 <prvCheckForValidListAndQueue+0x70>)
 800b9ae:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <prvCheckForValidListAndQueue+0x68>)
 800b9b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <prvCheckForValidListAndQueue+0x74>)
 800b9b8:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <prvCheckForValidListAndQueue+0x78>)
 800b9ba:	2110      	movs	r1, #16
 800b9bc:	200a      	movs	r0, #10
 800b9be:	f7fc fd35 	bl	800842c <xQueueGenericCreateStatic>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	4a08      	ldr	r2, [pc, #32]	; (800b9e8 <prvCheckForValidListAndQueue+0x60>)
 800b9c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <prvCheckForValidListAndQueue+0x60>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d005      	beq.n	800b9dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <prvCheckForValidListAndQueue+0x60>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	490b      	ldr	r1, [pc, #44]	; (800ba04 <prvCheckForValidListAndQueue+0x7c>)
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fd fb6a 	bl	80090b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9dc:	f000 f972 	bl	800bcc4 <vPortExitCritical>
}
 800b9e0:	bf00      	nop
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20001290 	.word	0x20001290
 800b9ec:	20001260 	.word	0x20001260
 800b9f0:	20001274 	.word	0x20001274
 800b9f4:	20001288 	.word	0x20001288
 800b9f8:	2000128c 	.word	0x2000128c
 800b9fc:	2000133c 	.word	0x2000133c
 800ba00:	2000129c 	.word	0x2000129c
 800ba04:	08010380 	.word	0x08010380

0800ba08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	3b04      	subs	r3, #4
 800ba18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	3b04      	subs	r3, #4
 800ba26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f023 0201 	bic.w	r2, r3, #1
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3b04      	subs	r3, #4
 800ba36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba38:	4a0c      	ldr	r2, [pc, #48]	; (800ba6c <pxPortInitialiseStack+0x64>)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	3b14      	subs	r3, #20
 800ba42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3b04      	subs	r3, #4
 800ba4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f06f 0202 	mvn.w	r2, #2
 800ba56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3b20      	subs	r3, #32
 800ba5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	0800ba71 	.word	0x0800ba71

0800ba70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba7a:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <prvTaskExitError+0x54>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba82:	d00a      	beq.n	800ba9a <prvTaskExitError+0x2a>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	60fb      	str	r3, [r7, #12]
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <prvTaskExitError+0x28>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60bb      	str	r3, [r7, #8]
}
 800baac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800baae:	bf00      	nop
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0fc      	beq.n	800bab0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	200000a4 	.word	0x200000a4
	...

0800bad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <pxCurrentTCBConst2>)
 800bad2:	6819      	ldr	r1, [r3, #0]
 800bad4:	6808      	ldr	r0, [r1, #0]
 800bad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bada:	f380 8809 	msr	PSP, r0
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f04f 0000 	mov.w	r0, #0
 800bae6:	f380 8811 	msr	BASEPRI, r0
 800baea:	4770      	bx	lr
 800baec:	f3af 8000 	nop.w

0800baf0 <pxCurrentTCBConst2>:
 800baf0:	20000d60 	.word	0x20000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop

0800baf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800baf8:	4808      	ldr	r0, [pc, #32]	; (800bb1c <prvPortStartFirstTask+0x24>)
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	6800      	ldr	r0, [r0, #0]
 800bafe:	f380 8808 	msr	MSP, r0
 800bb02:	f04f 0000 	mov.w	r0, #0
 800bb06:	f380 8814 	msr	CONTROL, r0
 800bb0a:	b662      	cpsie	i
 800bb0c:	b661      	cpsie	f
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	df00      	svc	0
 800bb18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb1a:	bf00      	nop
 800bb1c:	e000ed08 	.word	0xe000ed08

0800bb20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb26:	4b46      	ldr	r3, [pc, #280]	; (800bc40 <xPortStartScheduler+0x120>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a46      	ldr	r2, [pc, #280]	; (800bc44 <xPortStartScheduler+0x124>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d10a      	bne.n	800bb46 <xPortStartScheduler+0x26>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	613b      	str	r3, [r7, #16]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb46:	4b3e      	ldr	r3, [pc, #248]	; (800bc40 <xPortStartScheduler+0x120>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a3f      	ldr	r2, [pc, #252]	; (800bc48 <xPortStartScheduler+0x128>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10a      	bne.n	800bb66 <xPortStartScheduler+0x46>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60fb      	str	r3, [r7, #12]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb66:	4b39      	ldr	r3, [pc, #228]	; (800bc4c <xPortStartScheduler+0x12c>)
 800bb68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	22ff      	movs	r2, #255	; 0xff
 800bb76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	4b31      	ldr	r3, [pc, #196]	; (800bc50 <xPortStartScheduler+0x130>)
 800bb8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb8e:	4b31      	ldr	r3, [pc, #196]	; (800bc54 <xPortStartScheduler+0x134>)
 800bb90:	2207      	movs	r2, #7
 800bb92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb94:	e009      	b.n	800bbaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb96:	4b2f      	ldr	r3, [pc, #188]	; (800bc54 <xPortStartScheduler+0x134>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	4a2d      	ldr	r2, [pc, #180]	; (800bc54 <xPortStartScheduler+0x134>)
 800bb9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb2:	2b80      	cmp	r3, #128	; 0x80
 800bbb4:	d0ef      	beq.n	800bb96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbb6:	4b27      	ldr	r3, [pc, #156]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f1c3 0307 	rsb	r3, r3, #7
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	d00a      	beq.n	800bbd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	60bb      	str	r3, [r7, #8]
}
 800bbd4:	bf00      	nop
 800bbd6:	e7fe      	b.n	800bbd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbd8:	4b1e      	ldr	r3, [pc, #120]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	021b      	lsls	r3, r3, #8
 800bbde:	4a1d      	ldr	r2, [pc, #116]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbe2:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbea:	4a1a      	ldr	r2, [pc, #104]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbf6:	4b18      	ldr	r3, [pc, #96]	; (800bc58 <xPortStartScheduler+0x138>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <xPortStartScheduler+0x138>)
 800bbfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc02:	4b15      	ldr	r3, [pc, #84]	; (800bc58 <xPortStartScheduler+0x138>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a14      	ldr	r2, [pc, #80]	; (800bc58 <xPortStartScheduler+0x138>)
 800bc08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc0e:	f000 f8dd 	bl	800bdcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc12:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <xPortStartScheduler+0x13c>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc18:	f000 f8fc 	bl	800be14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc1c:	4b10      	ldr	r3, [pc, #64]	; (800bc60 <xPortStartScheduler+0x140>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a0f      	ldr	r2, [pc, #60]	; (800bc60 <xPortStartScheduler+0x140>)
 800bc22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc28:	f7ff ff66 	bl	800baf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc2c:	f7fe fb5c 	bl	800a2e8 <vTaskSwitchContext>
	prvTaskExitError();
 800bc30:	f7ff ff1e 	bl	800ba70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	e000ed00 	.word	0xe000ed00
 800bc44:	410fc271 	.word	0x410fc271
 800bc48:	410fc270 	.word	0x410fc270
 800bc4c:	e000e400 	.word	0xe000e400
 800bc50:	2000138c 	.word	0x2000138c
 800bc54:	20001390 	.word	0x20001390
 800bc58:	e000ed20 	.word	0xe000ed20
 800bc5c:	200000a4 	.word	0x200000a4
 800bc60:	e000ef34 	.word	0xe000ef34

0800bc64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	607b      	str	r3, [r7, #4]
}
 800bc7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc7e:	4b0f      	ldr	r3, [pc, #60]	; (800bcbc <vPortEnterCritical+0x58>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3301      	adds	r3, #1
 800bc84:	4a0d      	ldr	r2, [pc, #52]	; (800bcbc <vPortEnterCritical+0x58>)
 800bc86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc88:	4b0c      	ldr	r3, [pc, #48]	; (800bcbc <vPortEnterCritical+0x58>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d10f      	bne.n	800bcb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc90:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <vPortEnterCritical+0x5c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	603b      	str	r3, [r7, #0]
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <vPortEnterCritical+0x4a>
	}
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	200000a4 	.word	0x200000a4
 800bcc0:	e000ed04 	.word	0xe000ed04

0800bcc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcca:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <vPortExitCritical+0x50>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <vPortExitCritical+0x24>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	607b      	str	r3, [r7, #4]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <vPortExitCritical+0x50>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	4a09      	ldr	r2, [pc, #36]	; (800bd14 <vPortExitCritical+0x50>)
 800bcf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcf2:	4b08      	ldr	r3, [pc, #32]	; (800bd14 <vPortExitCritical+0x50>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d105      	bne.n	800bd06 <vPortExitCritical+0x42>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f383 8811 	msr	BASEPRI, r3
}
 800bd04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd06:	bf00      	nop
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	200000a4 	.word	0x200000a4
	...

0800bd20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd20:	f3ef 8009 	mrs	r0, PSP
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	4b15      	ldr	r3, [pc, #84]	; (800bd80 <pxCurrentTCBConst>)
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	f01e 0f10 	tst.w	lr, #16
 800bd30:	bf08      	it	eq
 800bd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3a:	6010      	str	r0, [r2, #0]
 800bd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd44:	f380 8811 	msr	BASEPRI, r0
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f7fe faca 	bl	800a2e8 <vTaskSwitchContext>
 800bd54:	f04f 0000 	mov.w	r0, #0
 800bd58:	f380 8811 	msr	BASEPRI, r0
 800bd5c:	bc09      	pop	{r0, r3}
 800bd5e:	6819      	ldr	r1, [r3, #0]
 800bd60:	6808      	ldr	r0, [r1, #0]
 800bd62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd66:	f01e 0f10 	tst.w	lr, #16
 800bd6a:	bf08      	it	eq
 800bd6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd70:	f380 8809 	msr	PSP, r0
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	f3af 8000 	nop.w

0800bd80 <pxCurrentTCBConst>:
 800bd80:	20000d60 	.word	0x20000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop

0800bd88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	607b      	str	r3, [r7, #4]
}
 800bda0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bda2:	f7fe f9e7 	bl	800a174 <xTaskIncrementTick>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdac:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <xPortSysTickHandler+0x40>)
 800bdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	f383 8811 	msr	BASEPRI, r3
}
 800bdbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	e000ed04 	.word	0xe000ed04

0800bdcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdcc:	b480      	push	{r7}
 800bdce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <vPortSetupTimerInterrupt+0x34>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <vPortSetupTimerInterrupt+0x38>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bddc:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <vPortSetupTimerInterrupt+0x3c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a0a      	ldr	r2, [pc, #40]	; (800be0c <vPortSetupTimerInterrupt+0x40>)
 800bde2:	fba2 2303 	umull	r2, r3, r2, r3
 800bde6:	099b      	lsrs	r3, r3, #6
 800bde8:	4a09      	ldr	r2, [pc, #36]	; (800be10 <vPortSetupTimerInterrupt+0x44>)
 800bdea:	3b01      	subs	r3, #1
 800bdec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdee:	4b04      	ldr	r3, [pc, #16]	; (800be00 <vPortSetupTimerInterrupt+0x34>)
 800bdf0:	2207      	movs	r2, #7
 800bdf2:	601a      	str	r2, [r3, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	e000e010 	.word	0xe000e010
 800be04:	e000e018 	.word	0xe000e018
 800be08:	2000000c 	.word	0x2000000c
 800be0c:	10624dd3 	.word	0x10624dd3
 800be10:	e000e014 	.word	0xe000e014

0800be14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be24 <vPortEnableVFP+0x10>
 800be18:	6801      	ldr	r1, [r0, #0]
 800be1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be1e:	6001      	str	r1, [r0, #0]
 800be20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be22:	bf00      	nop
 800be24:	e000ed88 	.word	0xe000ed88

0800be28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be2e:	f3ef 8305 	mrs	r3, IPSR
 800be32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b0f      	cmp	r3, #15
 800be38:	d914      	bls.n	800be64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be3a:	4a17      	ldr	r2, [pc, #92]	; (800be98 <vPortValidateInterruptPriority+0x70>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be44:	4b15      	ldr	r3, [pc, #84]	; (800be9c <vPortValidateInterruptPriority+0x74>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	7afa      	ldrb	r2, [r7, #11]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d20a      	bcs.n	800be64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	607b      	str	r3, [r7, #4]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <vPortValidateInterruptPriority+0x78>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <vPortValidateInterruptPriority+0x7c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d90a      	bls.n	800be8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	603b      	str	r3, [r7, #0]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <vPortValidateInterruptPriority+0x60>
	}
 800be8a:	bf00      	nop
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	e000e3f0 	.word	0xe000e3f0
 800be9c:	2000138c 	.word	0x2000138c
 800bea0:	e000ed0c 	.word	0xe000ed0c
 800bea4:	20001390 	.word	0x20001390

0800bea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800beb4:	f7fe f814 	bl	8009ee0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800beb8:	4b5b      	ldr	r3, [pc, #364]	; (800c028 <pvPortMalloc+0x180>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bec0:	f000 f920 	bl	800c104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bec4:	4b59      	ldr	r3, [pc, #356]	; (800c02c <pvPortMalloc+0x184>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4013      	ands	r3, r2
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 8093 	bne.w	800bff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01d      	beq.n	800bf14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bed8:	2208      	movs	r2, #8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4413      	add	r3, r2
 800bede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d014      	beq.n	800bf14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f023 0307 	bic.w	r3, r3, #7
 800bef0:	3308      	adds	r3, #8
 800bef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00a      	beq.n	800bf14 <pvPortMalloc+0x6c>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	617b      	str	r3, [r7, #20]
}
 800bf10:	bf00      	nop
 800bf12:	e7fe      	b.n	800bf12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d06e      	beq.n	800bff8 <pvPortMalloc+0x150>
 800bf1a:	4b45      	ldr	r3, [pc, #276]	; (800c030 <pvPortMalloc+0x188>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d869      	bhi.n	800bff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf24:	4b43      	ldr	r3, [pc, #268]	; (800c034 <pvPortMalloc+0x18c>)
 800bf26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf28:	4b42      	ldr	r3, [pc, #264]	; (800c034 <pvPortMalloc+0x18c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf2e:	e004      	b.n	800bf3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d903      	bls.n	800bf4c <pvPortMalloc+0xa4>
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1f1      	bne.n	800bf30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf4c:	4b36      	ldr	r3, [pc, #216]	; (800c028 <pvPortMalloc+0x180>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d050      	beq.n	800bff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	4413      	add	r3, r2
 800bf5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	1ad2      	subs	r2, r2, r3
 800bf70:	2308      	movs	r3, #8
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d91f      	bls.n	800bfb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	f003 0307 	and.w	r3, r3, #7
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <pvPortMalloc+0xf8>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	613b      	str	r3, [r7, #16]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	1ad2      	subs	r2, r2, r3
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfb2:	69b8      	ldr	r0, [r7, #24]
 800bfb4:	f000 f908 	bl	800c1c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfb8:	4b1d      	ldr	r3, [pc, #116]	; (800c030 <pvPortMalloc+0x188>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	4a1b      	ldr	r2, [pc, #108]	; (800c030 <pvPortMalloc+0x188>)
 800bfc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfc6:	4b1a      	ldr	r3, [pc, #104]	; (800c030 <pvPortMalloc+0x188>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	4b1b      	ldr	r3, [pc, #108]	; (800c038 <pvPortMalloc+0x190>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d203      	bcs.n	800bfda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bfd2:	4b17      	ldr	r3, [pc, #92]	; (800c030 <pvPortMalloc+0x188>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a18      	ldr	r2, [pc, #96]	; (800c038 <pvPortMalloc+0x190>)
 800bfd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	4b13      	ldr	r3, [pc, #76]	; (800c02c <pvPortMalloc+0x184>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bfee:	4b13      	ldr	r3, [pc, #76]	; (800c03c <pvPortMalloc+0x194>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3301      	adds	r3, #1
 800bff4:	4a11      	ldr	r2, [pc, #68]	; (800c03c <pvPortMalloc+0x194>)
 800bff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bff8:	f7fd ff80 	bl	8009efc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	f003 0307 	and.w	r3, r3, #7
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00a      	beq.n	800c01c <pvPortMalloc+0x174>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	60fb      	str	r3, [r7, #12]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <pvPortMalloc+0x172>
	return pvReturn;
 800c01c:	69fb      	ldr	r3, [r7, #28]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3728      	adds	r7, #40	; 0x28
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	2000939c 	.word	0x2000939c
 800c02c:	200093b0 	.word	0x200093b0
 800c030:	200093a0 	.word	0x200093a0
 800c034:	20009394 	.word	0x20009394
 800c038:	200093a4 	.word	0x200093a4
 800c03c:	200093a8 	.word	0x200093a8

0800c040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d04d      	beq.n	800c0ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c052:	2308      	movs	r3, #8
 800c054:	425b      	negs	r3, r3
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	4413      	add	r3, r2
 800c05a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <vPortFree+0xb8>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4013      	ands	r3, r2
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10a      	bne.n	800c084 <vPortFree+0x44>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	60fb      	str	r3, [r7, #12]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <vPortFree+0x62>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	60bb      	str	r3, [r7, #8]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	685a      	ldr	r2, [r3, #4]
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <vPortFree+0xb8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d01e      	beq.n	800c0ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d11a      	bne.n	800c0ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	4b0e      	ldr	r3, [pc, #56]	; (800c0f8 <vPortFree+0xb8>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	43db      	mvns	r3, r3
 800c0c2:	401a      	ands	r2, r3
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0c8:	f7fd ff0a 	bl	8009ee0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	685a      	ldr	r2, [r3, #4]
 800c0d0:	4b0a      	ldr	r3, [pc, #40]	; (800c0fc <vPortFree+0xbc>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	4a09      	ldr	r2, [pc, #36]	; (800c0fc <vPortFree+0xbc>)
 800c0d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0da:	6938      	ldr	r0, [r7, #16]
 800c0dc:	f000 f874 	bl	800c1c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0e0:	4b07      	ldr	r3, [pc, #28]	; (800c100 <vPortFree+0xc0>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	4a06      	ldr	r2, [pc, #24]	; (800c100 <vPortFree+0xc0>)
 800c0e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0ea:	f7fd ff07 	bl	8009efc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0ee:	bf00      	nop
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	200093b0 	.word	0x200093b0
 800c0fc:	200093a0 	.word	0x200093a0
 800c100:	200093ac 	.word	0x200093ac

0800c104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c10e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c110:	4b27      	ldr	r3, [pc, #156]	; (800c1b0 <prvHeapInit+0xac>)
 800c112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3307      	adds	r3, #7
 800c122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	4a1f      	ldr	r2, [pc, #124]	; (800c1b0 <prvHeapInit+0xac>)
 800c134:	4413      	add	r3, r2
 800c136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c13c:	4a1d      	ldr	r2, [pc, #116]	; (800c1b4 <prvHeapInit+0xb0>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <prvHeapInit+0xb0>)
 800c144:	2200      	movs	r2, #0
 800c146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	4413      	add	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c150:	2208      	movs	r2, #8
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	1a9b      	subs	r3, r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f023 0307 	bic.w	r3, r3, #7
 800c15e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4a15      	ldr	r2, [pc, #84]	; (800c1b8 <prvHeapInit+0xb4>)
 800c164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c166:	4b14      	ldr	r3, [pc, #80]	; (800c1b8 <prvHeapInit+0xb4>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2200      	movs	r2, #0
 800c16c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c16e:	4b12      	ldr	r3, [pc, #72]	; (800c1b8 <prvHeapInit+0xb4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c184:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <prvHeapInit+0xb4>)
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	4a0a      	ldr	r2, [pc, #40]	; (800c1bc <prvHeapInit+0xb8>)
 800c192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	4a09      	ldr	r2, [pc, #36]	; (800c1c0 <prvHeapInit+0xbc>)
 800c19a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c19c:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <prvHeapInit+0xc0>)
 800c19e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1a2:	601a      	str	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20001394 	.word	0x20001394
 800c1b4:	20009394 	.word	0x20009394
 800c1b8:	2000939c 	.word	0x2000939c
 800c1bc:	200093a4 	.word	0x200093a4
 800c1c0:	200093a0 	.word	0x200093a0
 800c1c4:	200093b0 	.word	0x200093b0

0800c1c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1d0:	4b28      	ldr	r3, [pc, #160]	; (800c274 <prvInsertBlockIntoFreeList+0xac>)
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	e002      	b.n	800c1dc <prvInsertBlockIntoFreeList+0x14>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d8f7      	bhi.n	800c1d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d108      	bne.n	800c20a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	441a      	add	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	441a      	add	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d118      	bne.n	800c250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4b15      	ldr	r3, [pc, #84]	; (800c278 <prvInsertBlockIntoFreeList+0xb0>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d00d      	beq.n	800c246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	441a      	add	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	e008      	b.n	800c258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c246:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <prvInsertBlockIntoFreeList+0xb0>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	e003      	b.n	800c258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d002      	beq.n	800c266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c266:	bf00      	nop
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	20009394 	.word	0x20009394
 800c278:	2000939c 	.word	0x2000939c

0800c27c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c280:	2200      	movs	r2, #0
 800c282:	4912      	ldr	r1, [pc, #72]	; (800c2cc <MX_USB_DEVICE_Init+0x50>)
 800c284:	4812      	ldr	r0, [pc, #72]	; (800c2d0 <MX_USB_DEVICE_Init+0x54>)
 800c286:	f7fa fb6f 	bl	8006968 <USBD_Init>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c290:	f7f5 fb64 	bl	800195c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c294:	490f      	ldr	r1, [pc, #60]	; (800c2d4 <MX_USB_DEVICE_Init+0x58>)
 800c296:	480e      	ldr	r0, [pc, #56]	; (800c2d0 <MX_USB_DEVICE_Init+0x54>)
 800c298:	f7fa fb96 	bl	80069c8 <USBD_RegisterClass>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d001      	beq.n	800c2a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2a2:	f7f5 fb5b 	bl	800195c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c2a6:	490c      	ldr	r1, [pc, #48]	; (800c2d8 <MX_USB_DEVICE_Init+0x5c>)
 800c2a8:	4809      	ldr	r0, [pc, #36]	; (800c2d0 <MX_USB_DEVICE_Init+0x54>)
 800c2aa:	f7fa fa87 	bl	80067bc <USBD_CDC_RegisterInterface>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d001      	beq.n	800c2b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c2b4:	f7f5 fb52 	bl	800195c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2b8:	4805      	ldr	r0, [pc, #20]	; (800c2d0 <MX_USB_DEVICE_Init+0x54>)
 800c2ba:	f7fa fbbb 	bl	8006a34 <USBD_Start>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c2c4:	f7f5 fb4a 	bl	800195c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2c8:	bf00      	nop
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	200000bc 	.word	0x200000bc
 800c2d0:	200093b4 	.word	0x200093b4
 800c2d4:	20000024 	.word	0x20000024
 800c2d8:	200000a8 	.word	0x200000a8

0800c2dc <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	4905      	ldr	r1, [pc, #20]	; (800c2f8 <CDC_Init_FS+0x1c>)
 800c2e4:	4805      	ldr	r0, [pc, #20]	; (800c2fc <CDC_Init_FS+0x20>)
 800c2e6:	f7fa fa83 	bl	80067f0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c2ea:	4905      	ldr	r1, [pc, #20]	; (800c300 <CDC_Init_FS+0x24>)
 800c2ec:	4803      	ldr	r0, [pc, #12]	; (800c2fc <CDC_Init_FS+0x20>)
 800c2ee:	f7fa faa1 	bl	8006834 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800c2f2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20009e90 	.word	0x20009e90
 800c2fc:	200093b4 	.word	0x200093b4
 800c300:	20009690 	.word	0x20009690

0800c304 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800c308:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	6039      	str	r1, [r7, #0]
 800c31e:	71fb      	strb	r3, [r7, #7]
 800c320:	4613      	mov	r3, r2
 800c322:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	2b23      	cmp	r3, #35	; 0x23
 800c328:	d84a      	bhi.n	800c3c0 <CDC_Control_FS+0xac>
 800c32a:	a201      	add	r2, pc, #4	; (adr r2, 800c330 <CDC_Control_FS+0x1c>)
 800c32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c330:	0800c3c1 	.word	0x0800c3c1
 800c334:	0800c3c1 	.word	0x0800c3c1
 800c338:	0800c3c1 	.word	0x0800c3c1
 800c33c:	0800c3c1 	.word	0x0800c3c1
 800c340:	0800c3c1 	.word	0x0800c3c1
 800c344:	0800c3c1 	.word	0x0800c3c1
 800c348:	0800c3c1 	.word	0x0800c3c1
 800c34c:	0800c3c1 	.word	0x0800c3c1
 800c350:	0800c3c1 	.word	0x0800c3c1
 800c354:	0800c3c1 	.word	0x0800c3c1
 800c358:	0800c3c1 	.word	0x0800c3c1
 800c35c:	0800c3c1 	.word	0x0800c3c1
 800c360:	0800c3c1 	.word	0x0800c3c1
 800c364:	0800c3c1 	.word	0x0800c3c1
 800c368:	0800c3c1 	.word	0x0800c3c1
 800c36c:	0800c3c1 	.word	0x0800c3c1
 800c370:	0800c3c1 	.word	0x0800c3c1
 800c374:	0800c3c1 	.word	0x0800c3c1
 800c378:	0800c3c1 	.word	0x0800c3c1
 800c37c:	0800c3c1 	.word	0x0800c3c1
 800c380:	0800c3c1 	.word	0x0800c3c1
 800c384:	0800c3c1 	.word	0x0800c3c1
 800c388:	0800c3c1 	.word	0x0800c3c1
 800c38c:	0800c3c1 	.word	0x0800c3c1
 800c390:	0800c3c1 	.word	0x0800c3c1
 800c394:	0800c3c1 	.word	0x0800c3c1
 800c398:	0800c3c1 	.word	0x0800c3c1
 800c39c:	0800c3c1 	.word	0x0800c3c1
 800c3a0:	0800c3c1 	.word	0x0800c3c1
 800c3a4:	0800c3c1 	.word	0x0800c3c1
 800c3a8:	0800c3c1 	.word	0x0800c3c1
 800c3ac:	0800c3c1 	.word	0x0800c3c1
 800c3b0:	0800c3c1 	.word	0x0800c3c1
 800c3b4:	0800c3c1 	.word	0x0800c3c1
 800c3b8:	0800c3c1 	.word	0x0800c3c1
 800c3bc:	0800c3c1 	.word	0x0800c3c1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800c3c0:	bf00      	nop
	}

	return (USBD_OK);
 800c3c2:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
/* USER CODE BEGIN 6 */


	portBASE_TYPE yield = pdFALSE;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60bb      	str	r3, [r7, #8]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	4815      	ldr	r0, [pc, #84]	; (800c438 <CDC_Receive_FS+0x68>)
 800c3e2:	f7fa fa27 	bl	8006834 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c3e6:	4814      	ldr	r0, [pc, #80]	; (800c438 <CDC_Receive_FS+0x68>)
 800c3e8:	f7fa fa88 	bl	80068fc <USBD_CDC_ReceivePacket>

	uint32_t len = *Len;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	60fb      	str	r3, [r7, #12]
	while(len){
 800c3f2:	e00d      	b.n	800c410 <CDC_Receive_FS+0x40>
//	xMessageBufferTxSendFromISR(xMessageBufferRx, Buf, len, &yield);

	xMessageBufferSendFromISR(xMessageBufferRx, Buf++, *Len,  &yield );
 800c3f4:	4b11      	ldr	r3, [pc, #68]	; (800c43c <CDC_Receive_FS+0x6c>)
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	6879      	ldr	r1, [r7, #4]
 800c3fa:	1c4b      	adds	r3, r1, #1
 800c3fc:	607b      	str	r3, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	f107 0308 	add.w	r3, r7, #8
 800c406:	f7fc fff4 	bl	80093f2 <xStreamBufferSendFromISR>
	len--;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	60fb      	str	r3, [r7, #12]
	while(len){
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1ee      	bne.n	800c3f4 <CDC_Receive_FS+0x24>
	}

	portYIELD_FROM_ISR(yield);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d007      	beq.n	800c42c <CDC_Receive_FS+0x5c>
 800c41c:	4b08      	ldr	r3, [pc, #32]	; (800c440 <CDC_Receive_FS+0x70>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800c42c:	2300      	movs	r3, #0
/* USER CODE END 6
 * */
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	200093b4 	.word	0x200093b4
 800c43c:	2000a698 	.word	0x2000a698
 800c440:	e000ed04 	.word	0xe000ed04

0800c444 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	//if (xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800c454:	4b10      	ldr	r3, [pc, #64]	; (800c498 <CDC_Transmit_FS+0x54>)
 800c456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c45a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <CDC_Transmit_FS+0x26>
		//	xSemaphoreGive(mutex_usb);
		return USBD_BUSY;
 800c466:	2301      	movs	r3, #1
 800c468:	e012      	b.n	800c490 <CDC_Transmit_FS+0x4c>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c46a:	887b      	ldrh	r3, [r7, #2]
 800c46c:	461a      	mov	r2, r3
 800c46e:	6879      	ldr	r1, [r7, #4]
 800c470:	4809      	ldr	r0, [pc, #36]	; (800c498 <CDC_Transmit_FS+0x54>)
 800c472:	f7fa f9bd 	bl	80067f0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c476:	4808      	ldr	r0, [pc, #32]	; (800c498 <CDC_Transmit_FS+0x54>)
 800c478:	f7fa f9fa 	bl	8006870 <USBD_CDC_TransmitPacket>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800c480:	4b06      	ldr	r3, [pc, #24]	; (800c49c <CDC_Transmit_FS+0x58>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f04f 31ff 	mov.w	r1, #4294967295
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fc fbdd 	bl	8008c48 <xQueueSemaphoreTake>
	//}

	/* USER CODE END 7 */
	return result;
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	200093b4 	.word	0x200093b4
 800c49c:	2000a690 	.word	0x2000a690

0800c4a0 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	portBASE_TYPE tmp = pdFALSE;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	613b      	str	r3, [r7, #16]
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	; (800c4e8 <CDC_TransmitCplt_FS+0x48>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f107 0210 	add.w	r2, r7, #16
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fc fa54 	bl	800896e <xQueueGiveFromISR>
	portYIELD_FROM_ISR(tmp);
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d007      	beq.n	800c4dc <CDC_TransmitCplt_FS+0x3c>
 800c4cc:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <CDC_TransmitCplt_FS+0x4c>)
 800c4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	f3bf 8f6f 	isb	sy
	/* USER CODE END 13 */
	return result;
 800c4dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	2000a690 	.word	0x2000a690
 800c4ec:	e000ed04 	.word	0xe000ed04

0800c4f0 <init_usb_rtos_obj>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
volatile uint32_t usb_is_on = 0;
void init_usb_rtos_obj(void) {
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0

	sem_usb_tx = xSemaphoreCreateBinary();
 800c4f4:	2203      	movs	r2, #3
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	2001      	movs	r0, #1
 800c4fa:	f7fc f80f 	bl	800851c <xQueueGenericCreate>
 800c4fe:	4603      	mov	r3, r0
 800c500:	4a13      	ldr	r2, [pc, #76]	; (800c550 <init_usb_rtos_obj+0x60>)
 800c502:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 800c504:	2001      	movs	r0, #1
 800c506:	f7fc f880 	bl	800860a <xQueueCreateMutex>
 800c50a:	4603      	mov	r3, r0
 800c50c:	4a11      	ldr	r2, [pc, #68]	; (800c554 <init_usb_rtos_obj+0x64>)
 800c50e:	6013      	str	r3, [r2, #0]
	queue_usb = xQueueCreate(768, sizeof(char));
 800c510:	2200      	movs	r2, #0
 800c512:	2101      	movs	r1, #1
 800c514:	f44f 7040 	mov.w	r0, #768	; 0x300
 800c518:	f7fc f800 	bl	800851c <xQueueGenericCreate>
 800c51c:	4603      	mov	r3, r0
 800c51e:	4a0e      	ldr	r2, [pc, #56]	; (800c558 <init_usb_rtos_obj+0x68>)
 800c520:	6013      	str	r3, [r2, #0]
	xMessageBufferTx = xMessageBufferCreate(768);
 800c522:	2201      	movs	r2, #1
 800c524:	2100      	movs	r1, #0
 800c526:	f44f 7040 	mov.w	r0, #768	; 0x300
 800c52a:	f7fc fe1f 	bl	800916c <xStreamBufferGenericCreate>
 800c52e:	4603      	mov	r3, r0
 800c530:	4a0a      	ldr	r2, [pc, #40]	; (800c55c <init_usb_rtos_obj+0x6c>)
 800c532:	6013      	str	r3, [r2, #0]
	xMessageBufferRx = xMessageBufferCreate(768);
 800c534:	2201      	movs	r2, #1
 800c536:	2100      	movs	r1, #0
 800c538:	f44f 7040 	mov.w	r0, #768	; 0x300
 800c53c:	f7fc fe16 	bl	800916c <xStreamBufferGenericCreate>
 800c540:	4603      	mov	r3, r0
 800c542:	4a07      	ldr	r2, [pc, #28]	; (800c560 <init_usb_rtos_obj+0x70>)
 800c544:	6013      	str	r3, [r2, #0]
	usb_is_on = 1;
 800c546:	4b07      	ldr	r3, [pc, #28]	; (800c564 <init_usb_rtos_obj+0x74>)
 800c548:	2201      	movs	r2, #1
 800c54a:	601a      	str	r2, [r3, #0]
}
 800c54c:	bf00      	nop
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	2000a690 	.word	0x2000a690
 800c554:	2000a694 	.word	0x2000a694
 800c558:	2000a6a0 	.word	0x2000a6a0
 800c55c:	2000a69c 	.word	0x2000a69c
 800c560:	2000a698 	.word	0x2000a698
 800c564:	2000a6a4 	.word	0x2000a6a4

0800c568 <is_usb_on>:

uint32_t is_usb_on(void) {
 800c568:	b480      	push	{r7}
 800c56a:	af00      	add	r7, sp, #0
	return usb_is_on;
 800c56c:	4b03      	ldr	r3, [pc, #12]	; (800c57c <is_usb_on+0x14>)
 800c56e:	681b      	ldr	r3, [r3, #0]
}
 800c570:	4618      	mov	r0, r3
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	2000a6a4 	.word	0x2000a6a4

0800c580 <CDC_Receivem_FS>:
//}
BaseType_t CDC_Receiveq_FS(uint8_t *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}

BaseType_t CDC_Receivem_FS(uint8_t *data, TickType_t timeout){
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	return xMessageBufferReceive(xMessageBufferRx, data, 128, timeout);;
 800c58a:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <CDC_Receivem_FS+0x24>)
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2280      	movs	r2, #128	; 0x80
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	f7fc ffdb 	bl	800954e <xStreamBufferReceive>
 800c598:	4603      	mov	r3, r0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	2000a698 	.word	0x2000a698

0800c5a8 <queue_print>:
//		xMessageBufferTxSend(xMessageBufferTx, data, size, portMAX_DELAY);
//		xSemaphoreGive(mutex_usb);
//	}
//}

void queue_print(uint8_t *data, uint16_t len){
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	807b      	strh	r3, [r7, #2]
	//taskENTER_CRITICAL();
	if (xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
 800c5b4:	4b0d      	ldr	r3, [pc, #52]	; (800c5ec <queue_print+0x44>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fc fb43 	bl	8008c48 <xQueueSemaphoreTake>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d10d      	bne.n	800c5e4 <queue_print+0x3c>
		xMessageBufferSend(xMessageBufferTx, data, len, 0);
 800c5c8:	4b09      	ldr	r3, [pc, #36]	; (800c5f0 <queue_print+0x48>)
 800c5ca:	6818      	ldr	r0, [r3, #0]
 800c5cc:	887a      	ldrh	r2, [r7, #2]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	f7fc fe59 	bl	8009288 <xStreamBufferSend>
		xSemaphoreGive(mutex_usb);
 800c5d6:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <queue_print+0x44>)
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f7fc f82c 	bl	800863c <xQueueGenericSend>
	}
	//taskEXIT_CRITICAL();
}
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	2000a694 	.word	0x2000a694
 800c5f0:	2000a69c 	.word	0x2000a69c

0800c5f4 <Print_Task>:
//				sizeof(buffer), portMAX_DELAY);
//		(void) qtd;
//		CDC_Transmit_FS((uint8_t*) buffer, qtd);
//	}
//}
void Print_Task(uint8_t *data){
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	uint16_t len;
	len = xMessageBufferReceive(xMessageBufferTx, data, 512, portMAX_DELAY);
 800c5fc:	4b09      	ldr	r3, [pc, #36]	; (800c624 <Print_Task+0x30>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	f04f 33ff 	mov.w	r3, #4294967295
 800c604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c608:	6879      	ldr	r1, [r7, #4]
 800c60a:	f7fc ffa0 	bl	800954e <xStreamBufferReceive>
 800c60e:	4603      	mov	r3, r0
 800c610:	81fb      	strh	r3, [r7, #14]
	CDC_Transmit_FS(data, len);
 800c612:	89fb      	ldrh	r3, [r7, #14]
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff ff14 	bl	800c444 <CDC_Transmit_FS>
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	2000a69c 	.word	0x2000a69c

0800c628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	6039      	str	r1, [r7, #0]
 800c632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2212      	movs	r2, #18
 800c638:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c63a:	4b03      	ldr	r3, [pc, #12]	; (800c648 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	200000d8 	.word	0x200000d8

0800c64c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2204      	movs	r2, #4
 800c65c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c65e:	4b03      	ldr	r3, [pc, #12]	; (800c66c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	200000ec 	.word	0x200000ec

0800c670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	6039      	str	r1, [r7, #0]
 800c67a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	4907      	ldr	r1, [pc, #28]	; (800c6a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c686:	4808      	ldr	r0, [pc, #32]	; (800c6a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c688:	f7fb fb80 	bl	8007d8c <USBD_GetString>
 800c68c:	e004      	b.n	800c698 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	4904      	ldr	r1, [pc, #16]	; (800c6a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c692:	4805      	ldr	r0, [pc, #20]	; (800c6a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c694:	f7fb fb7a 	bl	8007d8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c698:	4b02      	ldr	r3, [pc, #8]	; (800c6a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	2000a6a8 	.word	0x2000a6a8
 800c6a8:	08010388 	.word	0x08010388

0800c6ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	4904      	ldr	r1, [pc, #16]	; (800c6cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c6bc:	4804      	ldr	r0, [pc, #16]	; (800c6d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6be:	f7fb fb65 	bl	8007d8c <USBD_GetString>
  return USBD_StrDesc;
 800c6c2:	4b02      	ldr	r3, [pc, #8]	; (800c6cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	2000a6a8 	.word	0x2000a6a8
 800c6d0:	080103a0 	.word	0x080103a0

0800c6d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	6039      	str	r1, [r7, #0]
 800c6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	221a      	movs	r2, #26
 800c6e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6e6:	f000 f843 	bl	800c770 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6ea:	4b02      	ldr	r3, [pc, #8]	; (800c6f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200000f0 	.word	0x200000f0

0800c6f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d105      	bne.n	800c716 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	4907      	ldr	r1, [pc, #28]	; (800c72c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c70e:	4808      	ldr	r0, [pc, #32]	; (800c730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c710:	f7fb fb3c 	bl	8007d8c <USBD_GetString>
 800c714:	e004      	b.n	800c720 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	4904      	ldr	r1, [pc, #16]	; (800c72c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c71a:	4805      	ldr	r0, [pc, #20]	; (800c730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c71c:	f7fb fb36 	bl	8007d8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c720:	4b02      	ldr	r3, [pc, #8]	; (800c72c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	2000a6a8 	.word	0x2000a6a8
 800c730:	080103b4 	.word	0x080103b4

0800c734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	4603      	mov	r3, r0
 800c73c:	6039      	str	r1, [r7, #0]
 800c73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c740:	79fb      	ldrb	r3, [r7, #7]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d105      	bne.n	800c752 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	4907      	ldr	r1, [pc, #28]	; (800c768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c74a:	4808      	ldr	r0, [pc, #32]	; (800c76c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c74c:	f7fb fb1e 	bl	8007d8c <USBD_GetString>
 800c750:	e004      	b.n	800c75c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	4904      	ldr	r1, [pc, #16]	; (800c768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c756:	4805      	ldr	r0, [pc, #20]	; (800c76c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c758:	f7fb fb18 	bl	8007d8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c75c:	4b02      	ldr	r3, [pc, #8]	; (800c768 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	2000a6a8 	.word	0x2000a6a8
 800c76c:	080103c0 	.word	0x080103c0

0800c770 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c776:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <Get_SerialNum+0x44>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c77c:	4b0e      	ldr	r3, [pc, #56]	; (800c7b8 <Get_SerialNum+0x48>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c782:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <Get_SerialNum+0x4c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4413      	add	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c796:	2208      	movs	r2, #8
 800c798:	4909      	ldr	r1, [pc, #36]	; (800c7c0 <Get_SerialNum+0x50>)
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f814 	bl	800c7c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	4908      	ldr	r1, [pc, #32]	; (800c7c4 <Get_SerialNum+0x54>)
 800c7a4:	68b8      	ldr	r0, [r7, #8]
 800c7a6:	f000 f80f 	bl	800c7c8 <IntToUnicode>
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	1fff7a10 	.word	0x1fff7a10
 800c7b8:	1fff7a14 	.word	0x1fff7a14
 800c7bc:	1fff7a18 	.word	0x1fff7a18
 800c7c0:	200000f2 	.word	0x200000f2
 800c7c4:	20000102 	.word	0x20000102

0800c7c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75fb      	strb	r3, [r7, #23]
 800c7de:	e027      	b.n	800c830 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	0f1b      	lsrs	r3, r3, #28
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	d80b      	bhi.n	800c800 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	0f1b      	lsrs	r3, r3, #28
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	440b      	add	r3, r1
 800c7f8:	3230      	adds	r2, #48	; 0x30
 800c7fa:	b2d2      	uxtb	r2, r2
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e00a      	b.n	800c816 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	0f1b      	lsrs	r3, r3, #28
 800c804:	b2da      	uxtb	r2, r3
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	4619      	mov	r1, r3
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	440b      	add	r3, r1
 800c810:	3237      	adds	r2, #55	; 0x37
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	011b      	lsls	r3, r3, #4
 800c81a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	3301      	adds	r3, #1
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	4413      	add	r3, r2
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	3301      	adds	r3, #1
 800c82e:	75fb      	strb	r3, [r7, #23]
 800c830:	7dfa      	ldrb	r2, [r7, #23]
 800c832:	79fb      	ldrb	r3, [r7, #7]
 800c834:	429a      	cmp	r2, r3
 800c836:	d3d3      	bcc.n	800c7e0 <IntToUnicode+0x18>
  }
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
	...

0800c848 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	; 0x28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c850:	f107 0314 	add.w	r3, r7, #20
 800c854:	2200      	movs	r2, #0
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	605a      	str	r2, [r3, #4]
 800c85a:	609a      	str	r2, [r3, #8]
 800c85c:	60da      	str	r2, [r3, #12]
 800c85e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c868:	d147      	bne.n	800c8fa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c86a:	2300      	movs	r3, #0
 800c86c:	613b      	str	r3, [r7, #16]
 800c86e:	4b25      	ldr	r3, [pc, #148]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c872:	4a24      	ldr	r2, [pc, #144]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c874:	f043 0301 	orr.w	r3, r3, #1
 800c878:	6313      	str	r3, [r2, #48]	; 0x30
 800c87a:	4b22      	ldr	r3, [pc, #136]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800c886:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c88a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c88c:	2302      	movs	r3, #2
 800c88e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c890:	2300      	movs	r3, #0
 800c892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c894:	2303      	movs	r3, #3
 800c896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c898:	230a      	movs	r3, #10
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c89c:	f107 0314 	add.w	r3, r7, #20
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4819      	ldr	r0, [pc, #100]	; (800c908 <HAL_PCD_MspInit+0xc0>)
 800c8a4:	f7f5 fb74 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c8a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8b6:	f107 0314 	add.w	r3, r7, #20
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4812      	ldr	r0, [pc, #72]	; (800c908 <HAL_PCD_MspInit+0xc0>)
 800c8be:	f7f5 fb67 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8c2:	4b10      	ldr	r3, [pc, #64]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c6:	4a0f      	ldr	r2, [pc, #60]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8cc:	6353      	str	r3, [r2, #52]	; 0x34
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	4b0c      	ldr	r3, [pc, #48]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d6:	4a0b      	ldr	r2, [pc, #44]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c8d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8dc:	6453      	str	r3, [r2, #68]	; 0x44
 800c8de:	4b09      	ldr	r3, [pc, #36]	; (800c904 <HAL_PCD_MspInit+0xbc>)
 800c8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8e6:	60fb      	str	r3, [r7, #12]
 800c8e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2105      	movs	r1, #5
 800c8ee:	2043      	movs	r0, #67	; 0x43
 800c8f0:	f7f5 fb24 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c8f4:	2043      	movs	r0, #67	; 0x43
 800c8f6:	f7f5 fb3d 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8fa:	bf00      	nop
 800c8fc:	3728      	adds	r7, #40	; 0x28
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	40023800 	.word	0x40023800
 800c908:	40020000 	.word	0x40020000

0800c90c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fa f8d3 	bl	8006ace <USBD_LL_SetupStage>
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c942:	78fa      	ldrb	r2, [r7, #3]
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	4613      	mov	r3, r2
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	4413      	add	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	440b      	add	r3, r1
 800c950:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	78fb      	ldrb	r3, [r7, #3]
 800c958:	4619      	mov	r1, r3
 800c95a:	f7fa f90d 	bl	8006b78 <USBD_LL_DataOutStage>
}
 800c95e:	bf00      	nop
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	460b      	mov	r3, r1
 800c970:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4613      	mov	r3, r2
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	4413      	add	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	440b      	add	r3, r1
 800c986:	334c      	adds	r3, #76	; 0x4c
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	4619      	mov	r1, r3
 800c98e:	f7fa f9a6 	bl	8006cde <USBD_LL_DataInStage>
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b082      	sub	sp, #8
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fa fada 	bl	8006f62 <USBD_LL_SOF>
}
 800c9ae:	bf00      	nop
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b084      	sub	sp, #16
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	73fb      	strb	r3, [r7, #15]
 800c9ce:	e008      	b.n	800c9e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d102      	bne.n	800c9de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
 800c9dc:	e001      	b.n	800c9e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c9de:	f7f4 ffbd 	bl	800195c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9e8:	7bfa      	ldrb	r2, [r7, #15]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fa fa7a 	bl	8006ee6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fa fa22 	bl	8006e42 <USBD_LL_Reset>
}
 800c9fe:	bf00      	nop
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fa fa75 	bl	8006f06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	6812      	ldr	r2, [r2, #0]
 800ca2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca2e:	f043 0301 	orr.w	r3, r3, #1
 800ca32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a1b      	ldr	r3, [r3, #32]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d005      	beq.n	800ca48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca3c:	4b04      	ldr	r3, [pc, #16]	; (800ca50 <HAL_PCD_SuspendCallback+0x48>)
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	4a03      	ldr	r2, [pc, #12]	; (800ca50 <HAL_PCD_SuspendCallback+0x48>)
 800ca42:	f043 0306 	orr.w	r3, r3, #6
 800ca46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca48:	bf00      	nop
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	e000ed00 	.word	0xe000ed00

0800ca54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fa fa65 	bl	8006f32 <USBD_LL_Resume>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca82:	78fa      	ldrb	r2, [r7, #3]
 800ca84:	4611      	mov	r1, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fa fabd 	bl	8007006 <USBD_LL_IsoOUTIncomplete>
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800caa6:	78fa      	ldrb	r2, [r7, #3]
 800caa8:	4611      	mov	r1, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fa fa79 	bl	8006fa2 <USBD_LL_IsoINIncomplete>
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fa facf 	bl	800706a <USBD_LL_DevConnected>
}
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fa facc 	bl	8007080 <USBD_LL_DevDisconnected>
}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d13c      	bne.n	800cb7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb00:	4a20      	ldr	r2, [pc, #128]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a1e      	ldr	r2, [pc, #120]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb10:	4b1c      	ldr	r3, [pc, #112]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb18:	4b1a      	ldr	r3, [pc, #104]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb1a:	2204      	movs	r2, #4
 800cb1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb1e:	4b19      	ldr	r3, [pc, #100]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb20:	2202      	movs	r2, #2
 800cb22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb24:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb2a:	4b16      	ldr	r3, [pc, #88]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800cb30:	4b14      	ldr	r3, [pc, #80]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb32:	2201      	movs	r2, #1
 800cb34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb36:	4b13      	ldr	r3, [pc, #76]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb3c:	4b11      	ldr	r3, [pc, #68]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cb42:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb44:	2201      	movs	r2, #1
 800cb46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb48:	4b0e      	ldr	r3, [pc, #56]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb4e:	480d      	ldr	r0, [pc, #52]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb50:	f7f5 fc05 	bl	800235e <HAL_PCD_Init>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb5a:	f7f4 feff 	bl	800195c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb5e:	2180      	movs	r1, #128	; 0x80
 800cb60:	4808      	ldr	r0, [pc, #32]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb62:	f7f6 fe5c 	bl	800381e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb66:	2240      	movs	r2, #64	; 0x40
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4806      	ldr	r0, [pc, #24]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb6c:	f7f6 fe10 	bl	8003790 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb70:	2280      	movs	r2, #128	; 0x80
 800cb72:	2101      	movs	r1, #1
 800cb74:	4803      	ldr	r0, [pc, #12]	; (800cb84 <USBD_LL_Init+0x94>)
 800cb76:	f7f6 fe0b 	bl	8003790 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	2000a8a8 	.word	0x2000a8a8

0800cb88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7f5 fcfa 	bl	8002598 <HAL_PCD_Start>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cba8:	7bfb      	ldrb	r3, [r7, #15]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f942 	bl	800ce34 <USBD_Get_USB_Status>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b084      	sub	sp, #16
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	4611      	mov	r1, r2
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4603      	mov	r3, r0
 800cbce:	70fb      	strb	r3, [r7, #3]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70bb      	strb	r3, [r7, #2]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cbe6:	78bb      	ldrb	r3, [r7, #2]
 800cbe8:	883a      	ldrh	r2, [r7, #0]
 800cbea:	78f9      	ldrb	r1, [r7, #3]
 800cbec:	f7f6 f9cb 	bl	8002f86 <HAL_PCD_EP_Open>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f91c 	bl	800ce34 <USBD_Get_USB_Status>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b084      	sub	sp, #16
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	460b      	mov	r3, r1
 800cc14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc16:	2300      	movs	r3, #0
 800cc18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc24:	78fa      	ldrb	r2, [r7, #3]
 800cc26:	4611      	mov	r1, r2
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7f6 fa14 	bl	8003056 <HAL_PCD_EP_Close>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 f8fd 	bl	800ce34 <USBD_Get_USB_Status>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc62:	78fa      	ldrb	r2, [r7, #3]
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f6 faec 	bl	8003244 <HAL_PCD_EP_SetStall>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 f8de 	bl	800ce34 <USBD_Get_USB_Status>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cca0:	78fa      	ldrb	r2, [r7, #3]
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7f6 fb31 	bl	800330c <HAL_PCD_EP_ClrStall>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f8bf 	bl	800ce34 <USBD_Get_USB_Status>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccba:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	da0b      	bge.n	800ccf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cce6:	68f9      	ldr	r1, [r7, #12]
 800cce8:	4613      	mov	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	440b      	add	r3, r1
 800ccf2:	333e      	adds	r3, #62	; 0x3e
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	e00b      	b.n	800cd10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccf8:	78fb      	ldrb	r3, [r7, #3]
 800ccfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccfe:	68f9      	ldr	r1, [r7, #12]
 800cd00:	4613      	mov	r3, r2
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	4413      	add	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	440b      	add	r3, r1
 800cd0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cd0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd36:	78fa      	ldrb	r2, [r7, #3]
 800cd38:	4611      	mov	r1, r2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7f6 f8fe 	bl	8002f3c <HAL_PCD_SetAddress>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 f874 	bl	800ce34 <USBD_Get_USB_Status>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b086      	sub	sp, #24
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	603b      	str	r3, [r7, #0]
 800cd66:	460b      	mov	r3, r1
 800cd68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd78:	7af9      	ldrb	r1, [r7, #11]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	f7f6 fa17 	bl	80031b0 <HAL_PCD_EP_Transmit>
 800cd82:	4603      	mov	r3, r0
 800cd84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 f853 	bl	800ce34 <USBD_Get_USB_Status>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd92:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	607a      	str	r2, [r7, #4]
 800cda6:	603b      	str	r3, [r7, #0]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cdba:	7af9      	ldrb	r1, [r7, #11]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	f7f6 f993 	bl	80030ea <HAL_PCD_EP_Receive>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 f832 	bl	800ce34 <USBD_Get_USB_Status>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b082      	sub	sp, #8
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	460b      	mov	r3, r1
 800cde8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdf0:	78fa      	ldrb	r2, [r7, #3]
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7f6 f9c3 	bl	8003180 <HAL_PCD_EP_GetRxCount>
 800cdfa:	4603      	mov	r3, r0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce0c:	4b03      	ldr	r3, [pc, #12]	; (800ce1c <USBD_static_malloc+0x18>)
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	2000adb4 	.word	0x2000adb4

0800ce20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]

}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d817      	bhi.n	800ce78 <USBD_Get_USB_Status+0x44>
 800ce48:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <USBD_Get_USB_Status+0x1c>)
 800ce4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4e:	bf00      	nop
 800ce50:	0800ce61 	.word	0x0800ce61
 800ce54:	0800ce67 	.word	0x0800ce67
 800ce58:	0800ce6d 	.word	0x0800ce6d
 800ce5c:	0800ce73 	.word	0x0800ce73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]
    break;
 800ce64:	e00b      	b.n	800ce7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce66:	2303      	movs	r3, #3
 800ce68:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6a:	e008      	b.n	800ce7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce70:	e005      	b.n	800ce7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce72:	2303      	movs	r3, #3
 800ce74:	73fb      	strb	r3, [r7, #15]
    break;
 800ce76:	e002      	b.n	800ce7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7c:	bf00      	nop
  }
  return usb_status;
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <atoi>:
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	2100      	movs	r1, #0
 800ce90:	f000 bfc6 	b.w	800de20 <strtol>

0800ce94 <__errno>:
 800ce94:	4b01      	ldr	r3, [pc, #4]	; (800ce9c <__errno+0x8>)
 800ce96:	6818      	ldr	r0, [r3, #0]
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	2000010c 	.word	0x2000010c

0800cea0 <std>:
 800cea0:	2300      	movs	r3, #0
 800cea2:	b510      	push	{r4, lr}
 800cea4:	4604      	mov	r4, r0
 800cea6:	e9c0 3300 	strd	r3, r3, [r0]
 800ceaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceae:	6083      	str	r3, [r0, #8]
 800ceb0:	8181      	strh	r1, [r0, #12]
 800ceb2:	6643      	str	r3, [r0, #100]	; 0x64
 800ceb4:	81c2      	strh	r2, [r0, #14]
 800ceb6:	6183      	str	r3, [r0, #24]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	2208      	movs	r2, #8
 800cebc:	305c      	adds	r0, #92	; 0x5c
 800cebe:	f000 f91a 	bl	800d0f6 <memset>
 800cec2:	4b05      	ldr	r3, [pc, #20]	; (800ced8 <std+0x38>)
 800cec4:	6263      	str	r3, [r4, #36]	; 0x24
 800cec6:	4b05      	ldr	r3, [pc, #20]	; (800cedc <std+0x3c>)
 800cec8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ceca:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <std+0x40>)
 800cecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cece:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <std+0x44>)
 800ced0:	6224      	str	r4, [r4, #32]
 800ced2:	6323      	str	r3, [r4, #48]	; 0x30
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	bf00      	nop
 800ced8:	0800dc39 	.word	0x0800dc39
 800cedc:	0800dc5b 	.word	0x0800dc5b
 800cee0:	0800dc93 	.word	0x0800dc93
 800cee4:	0800dcb7 	.word	0x0800dcb7

0800cee8 <_cleanup_r>:
 800cee8:	4901      	ldr	r1, [pc, #4]	; (800cef0 <_cleanup_r+0x8>)
 800ceea:	f000 b8af 	b.w	800d04c <_fwalk_reent>
 800ceee:	bf00      	nop
 800cef0:	0800ec79 	.word	0x0800ec79

0800cef4 <__sfmoreglue>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	2268      	movs	r2, #104	; 0x68
 800cef8:	1e4d      	subs	r5, r1, #1
 800cefa:	4355      	muls	r5, r2
 800cefc:	460e      	mov	r6, r1
 800cefe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf02:	f000 f921 	bl	800d148 <_malloc_r>
 800cf06:	4604      	mov	r4, r0
 800cf08:	b140      	cbz	r0, 800cf1c <__sfmoreglue+0x28>
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	e9c0 1600 	strd	r1, r6, [r0]
 800cf10:	300c      	adds	r0, #12
 800cf12:	60a0      	str	r0, [r4, #8]
 800cf14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf18:	f000 f8ed 	bl	800d0f6 <memset>
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}

0800cf20 <__sfp_lock_acquire>:
 800cf20:	4801      	ldr	r0, [pc, #4]	; (800cf28 <__sfp_lock_acquire+0x8>)
 800cf22:	f000 b8d8 	b.w	800d0d6 <__retarget_lock_acquire_recursive>
 800cf26:	bf00      	nop
 800cf28:	2000afd5 	.word	0x2000afd5

0800cf2c <__sfp_lock_release>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	; (800cf34 <__sfp_lock_release+0x8>)
 800cf2e:	f000 b8d3 	b.w	800d0d8 <__retarget_lock_release_recursive>
 800cf32:	bf00      	nop
 800cf34:	2000afd5 	.word	0x2000afd5

0800cf38 <__sinit_lock_acquire>:
 800cf38:	4801      	ldr	r0, [pc, #4]	; (800cf40 <__sinit_lock_acquire+0x8>)
 800cf3a:	f000 b8cc 	b.w	800d0d6 <__retarget_lock_acquire_recursive>
 800cf3e:	bf00      	nop
 800cf40:	2000afd6 	.word	0x2000afd6

0800cf44 <__sinit_lock_release>:
 800cf44:	4801      	ldr	r0, [pc, #4]	; (800cf4c <__sinit_lock_release+0x8>)
 800cf46:	f000 b8c7 	b.w	800d0d8 <__retarget_lock_release_recursive>
 800cf4a:	bf00      	nop
 800cf4c:	2000afd6 	.word	0x2000afd6

0800cf50 <__sinit>:
 800cf50:	b510      	push	{r4, lr}
 800cf52:	4604      	mov	r4, r0
 800cf54:	f7ff fff0 	bl	800cf38 <__sinit_lock_acquire>
 800cf58:	69a3      	ldr	r3, [r4, #24]
 800cf5a:	b11b      	cbz	r3, 800cf64 <__sinit+0x14>
 800cf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf60:	f7ff bff0 	b.w	800cf44 <__sinit_lock_release>
 800cf64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf68:	6523      	str	r3, [r4, #80]	; 0x50
 800cf6a:	4b13      	ldr	r3, [pc, #76]	; (800cfb8 <__sinit+0x68>)
 800cf6c:	4a13      	ldr	r2, [pc, #76]	; (800cfbc <__sinit+0x6c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf72:	42a3      	cmp	r3, r4
 800cf74:	bf04      	itt	eq
 800cf76:	2301      	moveq	r3, #1
 800cf78:	61a3      	streq	r3, [r4, #24]
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 f820 	bl	800cfc0 <__sfp>
 800cf80:	6060      	str	r0, [r4, #4]
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 f81c 	bl	800cfc0 <__sfp>
 800cf88:	60a0      	str	r0, [r4, #8]
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 f818 	bl	800cfc0 <__sfp>
 800cf90:	2200      	movs	r2, #0
 800cf92:	60e0      	str	r0, [r4, #12]
 800cf94:	2104      	movs	r1, #4
 800cf96:	6860      	ldr	r0, [r4, #4]
 800cf98:	f7ff ff82 	bl	800cea0 <std>
 800cf9c:	68a0      	ldr	r0, [r4, #8]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	2109      	movs	r1, #9
 800cfa2:	f7ff ff7d 	bl	800cea0 <std>
 800cfa6:	68e0      	ldr	r0, [r4, #12]
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	2112      	movs	r1, #18
 800cfac:	f7ff ff78 	bl	800cea0 <std>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	61a3      	str	r3, [r4, #24]
 800cfb4:	e7d2      	b.n	800cf5c <__sinit+0xc>
 800cfb6:	bf00      	nop
 800cfb8:	080104ac 	.word	0x080104ac
 800cfbc:	0800cee9 	.word	0x0800cee9

0800cfc0 <__sfp>:
 800cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	f7ff ffac 	bl	800cf20 <__sfp_lock_acquire>
 800cfc8:	4b1e      	ldr	r3, [pc, #120]	; (800d044 <__sfp+0x84>)
 800cfca:	681e      	ldr	r6, [r3, #0]
 800cfcc:	69b3      	ldr	r3, [r6, #24]
 800cfce:	b913      	cbnz	r3, 800cfd6 <__sfp+0x16>
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7ff ffbd 	bl	800cf50 <__sinit>
 800cfd6:	3648      	adds	r6, #72	; 0x48
 800cfd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	d503      	bpl.n	800cfe8 <__sfp+0x28>
 800cfe0:	6833      	ldr	r3, [r6, #0]
 800cfe2:	b30b      	cbz	r3, 800d028 <__sfp+0x68>
 800cfe4:	6836      	ldr	r6, [r6, #0]
 800cfe6:	e7f7      	b.n	800cfd8 <__sfp+0x18>
 800cfe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfec:	b9d5      	cbnz	r5, 800d024 <__sfp+0x64>
 800cfee:	4b16      	ldr	r3, [pc, #88]	; (800d048 <__sfp+0x88>)
 800cff0:	60e3      	str	r3, [r4, #12]
 800cff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cff6:	6665      	str	r5, [r4, #100]	; 0x64
 800cff8:	f000 f86c 	bl	800d0d4 <__retarget_lock_init_recursive>
 800cffc:	f7ff ff96 	bl	800cf2c <__sfp_lock_release>
 800d000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d008:	6025      	str	r5, [r4, #0]
 800d00a:	61a5      	str	r5, [r4, #24]
 800d00c:	2208      	movs	r2, #8
 800d00e:	4629      	mov	r1, r5
 800d010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d014:	f000 f86f 	bl	800d0f6 <memset>
 800d018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d01c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d020:	4620      	mov	r0, r4
 800d022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d024:	3468      	adds	r4, #104	; 0x68
 800d026:	e7d9      	b.n	800cfdc <__sfp+0x1c>
 800d028:	2104      	movs	r1, #4
 800d02a:	4638      	mov	r0, r7
 800d02c:	f7ff ff62 	bl	800cef4 <__sfmoreglue>
 800d030:	4604      	mov	r4, r0
 800d032:	6030      	str	r0, [r6, #0]
 800d034:	2800      	cmp	r0, #0
 800d036:	d1d5      	bne.n	800cfe4 <__sfp+0x24>
 800d038:	f7ff ff78 	bl	800cf2c <__sfp_lock_release>
 800d03c:	230c      	movs	r3, #12
 800d03e:	603b      	str	r3, [r7, #0]
 800d040:	e7ee      	b.n	800d020 <__sfp+0x60>
 800d042:	bf00      	nop
 800d044:	080104ac 	.word	0x080104ac
 800d048:	ffff0001 	.word	0xffff0001

0800d04c <_fwalk_reent>:
 800d04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d050:	4606      	mov	r6, r0
 800d052:	4688      	mov	r8, r1
 800d054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d058:	2700      	movs	r7, #0
 800d05a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d05e:	f1b9 0901 	subs.w	r9, r9, #1
 800d062:	d505      	bpl.n	800d070 <_fwalk_reent+0x24>
 800d064:	6824      	ldr	r4, [r4, #0]
 800d066:	2c00      	cmp	r4, #0
 800d068:	d1f7      	bne.n	800d05a <_fwalk_reent+0xe>
 800d06a:	4638      	mov	r0, r7
 800d06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d070:	89ab      	ldrh	r3, [r5, #12]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d907      	bls.n	800d086 <_fwalk_reent+0x3a>
 800d076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d07a:	3301      	adds	r3, #1
 800d07c:	d003      	beq.n	800d086 <_fwalk_reent+0x3a>
 800d07e:	4629      	mov	r1, r5
 800d080:	4630      	mov	r0, r6
 800d082:	47c0      	blx	r8
 800d084:	4307      	orrs	r7, r0
 800d086:	3568      	adds	r5, #104	; 0x68
 800d088:	e7e9      	b.n	800d05e <_fwalk_reent+0x12>
	...

0800d08c <__libc_init_array>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4d0d      	ldr	r5, [pc, #52]	; (800d0c4 <__libc_init_array+0x38>)
 800d090:	4c0d      	ldr	r4, [pc, #52]	; (800d0c8 <__libc_init_array+0x3c>)
 800d092:	1b64      	subs	r4, r4, r5
 800d094:	10a4      	asrs	r4, r4, #2
 800d096:	2600      	movs	r6, #0
 800d098:	42a6      	cmp	r6, r4
 800d09a:	d109      	bne.n	800d0b0 <__libc_init_array+0x24>
 800d09c:	4d0b      	ldr	r5, [pc, #44]	; (800d0cc <__libc_init_array+0x40>)
 800d09e:	4c0c      	ldr	r4, [pc, #48]	; (800d0d0 <__libc_init_array+0x44>)
 800d0a0:	f002 ff30 	bl	800ff04 <_init>
 800d0a4:	1b64      	subs	r4, r4, r5
 800d0a6:	10a4      	asrs	r4, r4, #2
 800d0a8:	2600      	movs	r6, #0
 800d0aa:	42a6      	cmp	r6, r4
 800d0ac:	d105      	bne.n	800d0ba <__libc_init_array+0x2e>
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b4:	4798      	blx	r3
 800d0b6:	3601      	adds	r6, #1
 800d0b8:	e7ee      	b.n	800d098 <__libc_init_array+0xc>
 800d0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0be:	4798      	blx	r3
 800d0c0:	3601      	adds	r6, #1
 800d0c2:	e7f2      	b.n	800d0aa <__libc_init_array+0x1e>
 800d0c4:	08010834 	.word	0x08010834
 800d0c8:	08010834 	.word	0x08010834
 800d0cc:	08010834 	.word	0x08010834
 800d0d0:	08010838 	.word	0x08010838

0800d0d4 <__retarget_lock_init_recursive>:
 800d0d4:	4770      	bx	lr

0800d0d6 <__retarget_lock_acquire_recursive>:
 800d0d6:	4770      	bx	lr

0800d0d8 <__retarget_lock_release_recursive>:
 800d0d8:	4770      	bx	lr

0800d0da <memcpy>:
 800d0da:	440a      	add	r2, r1
 800d0dc:	4291      	cmp	r1, r2
 800d0de:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0e2:	d100      	bne.n	800d0e6 <memcpy+0xc>
 800d0e4:	4770      	bx	lr
 800d0e6:	b510      	push	{r4, lr}
 800d0e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0f0:	4291      	cmp	r1, r2
 800d0f2:	d1f9      	bne.n	800d0e8 <memcpy+0xe>
 800d0f4:	bd10      	pop	{r4, pc}

0800d0f6 <memset>:
 800d0f6:	4402      	add	r2, r0
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d100      	bne.n	800d100 <memset+0xa>
 800d0fe:	4770      	bx	lr
 800d100:	f803 1b01 	strb.w	r1, [r3], #1
 800d104:	e7f9      	b.n	800d0fa <memset+0x4>
	...

0800d108 <sbrk_aligned>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	4e0e      	ldr	r6, [pc, #56]	; (800d144 <sbrk_aligned+0x3c>)
 800d10c:	460c      	mov	r4, r1
 800d10e:	6831      	ldr	r1, [r6, #0]
 800d110:	4605      	mov	r5, r0
 800d112:	b911      	cbnz	r1, 800d11a <sbrk_aligned+0x12>
 800d114:	f000 fd60 	bl	800dbd8 <_sbrk_r>
 800d118:	6030      	str	r0, [r6, #0]
 800d11a:	4621      	mov	r1, r4
 800d11c:	4628      	mov	r0, r5
 800d11e:	f000 fd5b 	bl	800dbd8 <_sbrk_r>
 800d122:	1c43      	adds	r3, r0, #1
 800d124:	d00a      	beq.n	800d13c <sbrk_aligned+0x34>
 800d126:	1cc4      	adds	r4, r0, #3
 800d128:	f024 0403 	bic.w	r4, r4, #3
 800d12c:	42a0      	cmp	r0, r4
 800d12e:	d007      	beq.n	800d140 <sbrk_aligned+0x38>
 800d130:	1a21      	subs	r1, r4, r0
 800d132:	4628      	mov	r0, r5
 800d134:	f000 fd50 	bl	800dbd8 <_sbrk_r>
 800d138:	3001      	adds	r0, #1
 800d13a:	d101      	bne.n	800d140 <sbrk_aligned+0x38>
 800d13c:	f04f 34ff 	mov.w	r4, #4294967295
 800d140:	4620      	mov	r0, r4
 800d142:	bd70      	pop	{r4, r5, r6, pc}
 800d144:	2000afdc 	.word	0x2000afdc

0800d148 <_malloc_r>:
 800d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14c:	1ccd      	adds	r5, r1, #3
 800d14e:	f025 0503 	bic.w	r5, r5, #3
 800d152:	3508      	adds	r5, #8
 800d154:	2d0c      	cmp	r5, #12
 800d156:	bf38      	it	cc
 800d158:	250c      	movcc	r5, #12
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	4607      	mov	r7, r0
 800d15e:	db01      	blt.n	800d164 <_malloc_r+0x1c>
 800d160:	42a9      	cmp	r1, r5
 800d162:	d905      	bls.n	800d170 <_malloc_r+0x28>
 800d164:	230c      	movs	r3, #12
 800d166:	603b      	str	r3, [r7, #0]
 800d168:	2600      	movs	r6, #0
 800d16a:	4630      	mov	r0, r6
 800d16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d170:	4e2e      	ldr	r6, [pc, #184]	; (800d22c <_malloc_r+0xe4>)
 800d172:	f001 fddb 	bl	800ed2c <__malloc_lock>
 800d176:	6833      	ldr	r3, [r6, #0]
 800d178:	461c      	mov	r4, r3
 800d17a:	bb34      	cbnz	r4, 800d1ca <_malloc_r+0x82>
 800d17c:	4629      	mov	r1, r5
 800d17e:	4638      	mov	r0, r7
 800d180:	f7ff ffc2 	bl	800d108 <sbrk_aligned>
 800d184:	1c43      	adds	r3, r0, #1
 800d186:	4604      	mov	r4, r0
 800d188:	d14d      	bne.n	800d226 <_malloc_r+0xde>
 800d18a:	6834      	ldr	r4, [r6, #0]
 800d18c:	4626      	mov	r6, r4
 800d18e:	2e00      	cmp	r6, #0
 800d190:	d140      	bne.n	800d214 <_malloc_r+0xcc>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	4631      	mov	r1, r6
 800d196:	4638      	mov	r0, r7
 800d198:	eb04 0803 	add.w	r8, r4, r3
 800d19c:	f000 fd1c 	bl	800dbd8 <_sbrk_r>
 800d1a0:	4580      	cmp	r8, r0
 800d1a2:	d13a      	bne.n	800d21a <_malloc_r+0xd2>
 800d1a4:	6821      	ldr	r1, [r4, #0]
 800d1a6:	3503      	adds	r5, #3
 800d1a8:	1a6d      	subs	r5, r5, r1
 800d1aa:	f025 0503 	bic.w	r5, r5, #3
 800d1ae:	3508      	adds	r5, #8
 800d1b0:	2d0c      	cmp	r5, #12
 800d1b2:	bf38      	it	cc
 800d1b4:	250c      	movcc	r5, #12
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	f7ff ffa5 	bl	800d108 <sbrk_aligned>
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d02b      	beq.n	800d21a <_malloc_r+0xd2>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	442b      	add	r3, r5
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	e00e      	b.n	800d1e8 <_malloc_r+0xa0>
 800d1ca:	6822      	ldr	r2, [r4, #0]
 800d1cc:	1b52      	subs	r2, r2, r5
 800d1ce:	d41e      	bmi.n	800d20e <_malloc_r+0xc6>
 800d1d0:	2a0b      	cmp	r2, #11
 800d1d2:	d916      	bls.n	800d202 <_malloc_r+0xba>
 800d1d4:	1961      	adds	r1, r4, r5
 800d1d6:	42a3      	cmp	r3, r4
 800d1d8:	6025      	str	r5, [r4, #0]
 800d1da:	bf18      	it	ne
 800d1dc:	6059      	strne	r1, [r3, #4]
 800d1de:	6863      	ldr	r3, [r4, #4]
 800d1e0:	bf08      	it	eq
 800d1e2:	6031      	streq	r1, [r6, #0]
 800d1e4:	5162      	str	r2, [r4, r5]
 800d1e6:	604b      	str	r3, [r1, #4]
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f104 060b 	add.w	r6, r4, #11
 800d1ee:	f001 fda3 	bl	800ed38 <__malloc_unlock>
 800d1f2:	f026 0607 	bic.w	r6, r6, #7
 800d1f6:	1d23      	adds	r3, r4, #4
 800d1f8:	1af2      	subs	r2, r6, r3
 800d1fa:	d0b6      	beq.n	800d16a <_malloc_r+0x22>
 800d1fc:	1b9b      	subs	r3, r3, r6
 800d1fe:	50a3      	str	r3, [r4, r2]
 800d200:	e7b3      	b.n	800d16a <_malloc_r+0x22>
 800d202:	6862      	ldr	r2, [r4, #4]
 800d204:	42a3      	cmp	r3, r4
 800d206:	bf0c      	ite	eq
 800d208:	6032      	streq	r2, [r6, #0]
 800d20a:	605a      	strne	r2, [r3, #4]
 800d20c:	e7ec      	b.n	800d1e8 <_malloc_r+0xa0>
 800d20e:	4623      	mov	r3, r4
 800d210:	6864      	ldr	r4, [r4, #4]
 800d212:	e7b2      	b.n	800d17a <_malloc_r+0x32>
 800d214:	4634      	mov	r4, r6
 800d216:	6876      	ldr	r6, [r6, #4]
 800d218:	e7b9      	b.n	800d18e <_malloc_r+0x46>
 800d21a:	230c      	movs	r3, #12
 800d21c:	603b      	str	r3, [r7, #0]
 800d21e:	4638      	mov	r0, r7
 800d220:	f001 fd8a 	bl	800ed38 <__malloc_unlock>
 800d224:	e7a1      	b.n	800d16a <_malloc_r+0x22>
 800d226:	6025      	str	r5, [r4, #0]
 800d228:	e7de      	b.n	800d1e8 <_malloc_r+0xa0>
 800d22a:	bf00      	nop
 800d22c:	2000afd8 	.word	0x2000afd8

0800d230 <__cvt>:
 800d230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d234:	ec55 4b10 	vmov	r4, r5, d0
 800d238:	2d00      	cmp	r5, #0
 800d23a:	460e      	mov	r6, r1
 800d23c:	4619      	mov	r1, r3
 800d23e:	462b      	mov	r3, r5
 800d240:	bfbb      	ittet	lt
 800d242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d246:	461d      	movlt	r5, r3
 800d248:	2300      	movge	r3, #0
 800d24a:	232d      	movlt	r3, #45	; 0x2d
 800d24c:	700b      	strb	r3, [r1, #0]
 800d24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d254:	4691      	mov	r9, r2
 800d256:	f023 0820 	bic.w	r8, r3, #32
 800d25a:	bfbc      	itt	lt
 800d25c:	4622      	movlt	r2, r4
 800d25e:	4614      	movlt	r4, r2
 800d260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d264:	d005      	beq.n	800d272 <__cvt+0x42>
 800d266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d26a:	d100      	bne.n	800d26e <__cvt+0x3e>
 800d26c:	3601      	adds	r6, #1
 800d26e:	2102      	movs	r1, #2
 800d270:	e000      	b.n	800d274 <__cvt+0x44>
 800d272:	2103      	movs	r1, #3
 800d274:	ab03      	add	r3, sp, #12
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	ab02      	add	r3, sp, #8
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	ec45 4b10 	vmov	d0, r4, r5
 800d280:	4653      	mov	r3, sl
 800d282:	4632      	mov	r2, r6
 800d284:	f000 fe84 	bl	800df90 <_dtoa_r>
 800d288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d28c:	4607      	mov	r7, r0
 800d28e:	d102      	bne.n	800d296 <__cvt+0x66>
 800d290:	f019 0f01 	tst.w	r9, #1
 800d294:	d022      	beq.n	800d2dc <__cvt+0xac>
 800d296:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d29a:	eb07 0906 	add.w	r9, r7, r6
 800d29e:	d110      	bne.n	800d2c2 <__cvt+0x92>
 800d2a0:	783b      	ldrb	r3, [r7, #0]
 800d2a2:	2b30      	cmp	r3, #48	; 0x30
 800d2a4:	d10a      	bne.n	800d2bc <__cvt+0x8c>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	f7f3 fc1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2b2:	b918      	cbnz	r0, 800d2bc <__cvt+0x8c>
 800d2b4:	f1c6 0601 	rsb	r6, r6, #1
 800d2b8:	f8ca 6000 	str.w	r6, [sl]
 800d2bc:	f8da 3000 	ldr.w	r3, [sl]
 800d2c0:	4499      	add	r9, r3
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	f7f3 fc0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2ce:	b108      	cbz	r0, 800d2d4 <__cvt+0xa4>
 800d2d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d2d4:	2230      	movs	r2, #48	; 0x30
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	454b      	cmp	r3, r9
 800d2da:	d307      	bcc.n	800d2ec <__cvt+0xbc>
 800d2dc:	9b03      	ldr	r3, [sp, #12]
 800d2de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2e0:	1bdb      	subs	r3, r3, r7
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	6013      	str	r3, [r2, #0]
 800d2e6:	b004      	add	sp, #16
 800d2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ec:	1c59      	adds	r1, r3, #1
 800d2ee:	9103      	str	r1, [sp, #12]
 800d2f0:	701a      	strb	r2, [r3, #0]
 800d2f2:	e7f0      	b.n	800d2d6 <__cvt+0xa6>

0800d2f4 <__exponent>:
 800d2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2900      	cmp	r1, #0
 800d2fa:	bfb8      	it	lt
 800d2fc:	4249      	neglt	r1, r1
 800d2fe:	f803 2b02 	strb.w	r2, [r3], #2
 800d302:	bfb4      	ite	lt
 800d304:	222d      	movlt	r2, #45	; 0x2d
 800d306:	222b      	movge	r2, #43	; 0x2b
 800d308:	2909      	cmp	r1, #9
 800d30a:	7042      	strb	r2, [r0, #1]
 800d30c:	dd2a      	ble.n	800d364 <__exponent+0x70>
 800d30e:	f10d 0407 	add.w	r4, sp, #7
 800d312:	46a4      	mov	ip, r4
 800d314:	270a      	movs	r7, #10
 800d316:	46a6      	mov	lr, r4
 800d318:	460a      	mov	r2, r1
 800d31a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d31e:	fb07 1516 	mls	r5, r7, r6, r1
 800d322:	3530      	adds	r5, #48	; 0x30
 800d324:	2a63      	cmp	r2, #99	; 0x63
 800d326:	f104 34ff 	add.w	r4, r4, #4294967295
 800d32a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d32e:	4631      	mov	r1, r6
 800d330:	dcf1      	bgt.n	800d316 <__exponent+0x22>
 800d332:	3130      	adds	r1, #48	; 0x30
 800d334:	f1ae 0502 	sub.w	r5, lr, #2
 800d338:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d33c:	1c44      	adds	r4, r0, #1
 800d33e:	4629      	mov	r1, r5
 800d340:	4561      	cmp	r1, ip
 800d342:	d30a      	bcc.n	800d35a <__exponent+0x66>
 800d344:	f10d 0209 	add.w	r2, sp, #9
 800d348:	eba2 020e 	sub.w	r2, r2, lr
 800d34c:	4565      	cmp	r5, ip
 800d34e:	bf88      	it	hi
 800d350:	2200      	movhi	r2, #0
 800d352:	4413      	add	r3, r2
 800d354:	1a18      	subs	r0, r3, r0
 800d356:	b003      	add	sp, #12
 800d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d35e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d362:	e7ed      	b.n	800d340 <__exponent+0x4c>
 800d364:	2330      	movs	r3, #48	; 0x30
 800d366:	3130      	adds	r1, #48	; 0x30
 800d368:	7083      	strb	r3, [r0, #2]
 800d36a:	70c1      	strb	r1, [r0, #3]
 800d36c:	1d03      	adds	r3, r0, #4
 800d36e:	e7f1      	b.n	800d354 <__exponent+0x60>

0800d370 <_printf_float>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ed2d 8b02 	vpush	{d8}
 800d378:	b08d      	sub	sp, #52	; 0x34
 800d37a:	460c      	mov	r4, r1
 800d37c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d380:	4616      	mov	r6, r2
 800d382:	461f      	mov	r7, r3
 800d384:	4605      	mov	r5, r0
 800d386:	f001 fcb3 	bl	800ecf0 <_localeconv_r>
 800d38a:	f8d0 a000 	ldr.w	sl, [r0]
 800d38e:	4650      	mov	r0, sl
 800d390:	f7f2 ff28 	bl	80001e4 <strlen>
 800d394:	2300      	movs	r3, #0
 800d396:	930a      	str	r3, [sp, #40]	; 0x28
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	9305      	str	r3, [sp, #20]
 800d39c:	f8d8 3000 	ldr.w	r3, [r8]
 800d3a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d3a4:	3307      	adds	r3, #7
 800d3a6:	f023 0307 	bic.w	r3, r3, #7
 800d3aa:	f103 0208 	add.w	r2, r3, #8
 800d3ae:	f8c8 2000 	str.w	r2, [r8]
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d3ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d3be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d3c2:	9307      	str	r3, [sp, #28]
 800d3c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d3c8:	ee08 0a10 	vmov	s16, r0
 800d3cc:	4b9f      	ldr	r3, [pc, #636]	; (800d64c <_printf_float+0x2dc>)
 800d3ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d6:	f7f3 fbb9 	bl	8000b4c <__aeabi_dcmpun>
 800d3da:	bb88      	cbnz	r0, 800d440 <_printf_float+0xd0>
 800d3dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3e0:	4b9a      	ldr	r3, [pc, #616]	; (800d64c <_printf_float+0x2dc>)
 800d3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e6:	f7f3 fb93 	bl	8000b10 <__aeabi_dcmple>
 800d3ea:	bb48      	cbnz	r0, 800d440 <_printf_float+0xd0>
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	4640      	mov	r0, r8
 800d3f2:	4649      	mov	r1, r9
 800d3f4:	f7f3 fb82 	bl	8000afc <__aeabi_dcmplt>
 800d3f8:	b110      	cbz	r0, 800d400 <_printf_float+0x90>
 800d3fa:	232d      	movs	r3, #45	; 0x2d
 800d3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d400:	4b93      	ldr	r3, [pc, #588]	; (800d650 <_printf_float+0x2e0>)
 800d402:	4894      	ldr	r0, [pc, #592]	; (800d654 <_printf_float+0x2e4>)
 800d404:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d408:	bf94      	ite	ls
 800d40a:	4698      	movls	r8, r3
 800d40c:	4680      	movhi	r8, r0
 800d40e:	2303      	movs	r3, #3
 800d410:	6123      	str	r3, [r4, #16]
 800d412:	9b05      	ldr	r3, [sp, #20]
 800d414:	f023 0204 	bic.w	r2, r3, #4
 800d418:	6022      	str	r2, [r4, #0]
 800d41a:	f04f 0900 	mov.w	r9, #0
 800d41e:	9700      	str	r7, [sp, #0]
 800d420:	4633      	mov	r3, r6
 800d422:	aa0b      	add	r2, sp, #44	; 0x2c
 800d424:	4621      	mov	r1, r4
 800d426:	4628      	mov	r0, r5
 800d428:	f000 f9d8 	bl	800d7dc <_printf_common>
 800d42c:	3001      	adds	r0, #1
 800d42e:	f040 8090 	bne.w	800d552 <_printf_float+0x1e2>
 800d432:	f04f 30ff 	mov.w	r0, #4294967295
 800d436:	b00d      	add	sp, #52	; 0x34
 800d438:	ecbd 8b02 	vpop	{d8}
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	4642      	mov	r2, r8
 800d442:	464b      	mov	r3, r9
 800d444:	4640      	mov	r0, r8
 800d446:	4649      	mov	r1, r9
 800d448:	f7f3 fb80 	bl	8000b4c <__aeabi_dcmpun>
 800d44c:	b140      	cbz	r0, 800d460 <_printf_float+0xf0>
 800d44e:	464b      	mov	r3, r9
 800d450:	2b00      	cmp	r3, #0
 800d452:	bfbc      	itt	lt
 800d454:	232d      	movlt	r3, #45	; 0x2d
 800d456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d45a:	487f      	ldr	r0, [pc, #508]	; (800d658 <_printf_float+0x2e8>)
 800d45c:	4b7f      	ldr	r3, [pc, #508]	; (800d65c <_printf_float+0x2ec>)
 800d45e:	e7d1      	b.n	800d404 <_printf_float+0x94>
 800d460:	6863      	ldr	r3, [r4, #4]
 800d462:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d466:	9206      	str	r2, [sp, #24]
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	d13f      	bne.n	800d4ec <_printf_float+0x17c>
 800d46c:	2306      	movs	r3, #6
 800d46e:	6063      	str	r3, [r4, #4]
 800d470:	9b05      	ldr	r3, [sp, #20]
 800d472:	6861      	ldr	r1, [r4, #4]
 800d474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d478:	2300      	movs	r3, #0
 800d47a:	9303      	str	r3, [sp, #12]
 800d47c:	ab0a      	add	r3, sp, #40	; 0x28
 800d47e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d482:	ab09      	add	r3, sp, #36	; 0x24
 800d484:	ec49 8b10 	vmov	d0, r8, r9
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	6022      	str	r2, [r4, #0]
 800d48c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d490:	4628      	mov	r0, r5
 800d492:	f7ff fecd 	bl	800d230 <__cvt>
 800d496:	9b06      	ldr	r3, [sp, #24]
 800d498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d49a:	2b47      	cmp	r3, #71	; 0x47
 800d49c:	4680      	mov	r8, r0
 800d49e:	d108      	bne.n	800d4b2 <_printf_float+0x142>
 800d4a0:	1cc8      	adds	r0, r1, #3
 800d4a2:	db02      	blt.n	800d4aa <_printf_float+0x13a>
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	4299      	cmp	r1, r3
 800d4a8:	dd41      	ble.n	800d52e <_printf_float+0x1be>
 800d4aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800d4ae:	fa5f fb8b 	uxtb.w	fp, fp
 800d4b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d4b6:	d820      	bhi.n	800d4fa <_printf_float+0x18a>
 800d4b8:	3901      	subs	r1, #1
 800d4ba:	465a      	mov	r2, fp
 800d4bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d4c0:	9109      	str	r1, [sp, #36]	; 0x24
 800d4c2:	f7ff ff17 	bl	800d2f4 <__exponent>
 800d4c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4c8:	1813      	adds	r3, r2, r0
 800d4ca:	2a01      	cmp	r2, #1
 800d4cc:	4681      	mov	r9, r0
 800d4ce:	6123      	str	r3, [r4, #16]
 800d4d0:	dc02      	bgt.n	800d4d8 <_printf_float+0x168>
 800d4d2:	6822      	ldr	r2, [r4, #0]
 800d4d4:	07d2      	lsls	r2, r2, #31
 800d4d6:	d501      	bpl.n	800d4dc <_printf_float+0x16c>
 800d4d8:	3301      	adds	r3, #1
 800d4da:	6123      	str	r3, [r4, #16]
 800d4dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d09c      	beq.n	800d41e <_printf_float+0xae>
 800d4e4:	232d      	movs	r3, #45	; 0x2d
 800d4e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4ea:	e798      	b.n	800d41e <_printf_float+0xae>
 800d4ec:	9a06      	ldr	r2, [sp, #24]
 800d4ee:	2a47      	cmp	r2, #71	; 0x47
 800d4f0:	d1be      	bne.n	800d470 <_printf_float+0x100>
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1bc      	bne.n	800d470 <_printf_float+0x100>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e7b9      	b.n	800d46e <_printf_float+0xfe>
 800d4fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d4fe:	d118      	bne.n	800d532 <_printf_float+0x1c2>
 800d500:	2900      	cmp	r1, #0
 800d502:	6863      	ldr	r3, [r4, #4]
 800d504:	dd0b      	ble.n	800d51e <_printf_float+0x1ae>
 800d506:	6121      	str	r1, [r4, #16]
 800d508:	b913      	cbnz	r3, 800d510 <_printf_float+0x1a0>
 800d50a:	6822      	ldr	r2, [r4, #0]
 800d50c:	07d0      	lsls	r0, r2, #31
 800d50e:	d502      	bpl.n	800d516 <_printf_float+0x1a6>
 800d510:	3301      	adds	r3, #1
 800d512:	440b      	add	r3, r1
 800d514:	6123      	str	r3, [r4, #16]
 800d516:	65a1      	str	r1, [r4, #88]	; 0x58
 800d518:	f04f 0900 	mov.w	r9, #0
 800d51c:	e7de      	b.n	800d4dc <_printf_float+0x16c>
 800d51e:	b913      	cbnz	r3, 800d526 <_printf_float+0x1b6>
 800d520:	6822      	ldr	r2, [r4, #0]
 800d522:	07d2      	lsls	r2, r2, #31
 800d524:	d501      	bpl.n	800d52a <_printf_float+0x1ba>
 800d526:	3302      	adds	r3, #2
 800d528:	e7f4      	b.n	800d514 <_printf_float+0x1a4>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e7f2      	b.n	800d514 <_printf_float+0x1a4>
 800d52e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d534:	4299      	cmp	r1, r3
 800d536:	db05      	blt.n	800d544 <_printf_float+0x1d4>
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	6121      	str	r1, [r4, #16]
 800d53c:	07d8      	lsls	r0, r3, #31
 800d53e:	d5ea      	bpl.n	800d516 <_printf_float+0x1a6>
 800d540:	1c4b      	adds	r3, r1, #1
 800d542:	e7e7      	b.n	800d514 <_printf_float+0x1a4>
 800d544:	2900      	cmp	r1, #0
 800d546:	bfd4      	ite	le
 800d548:	f1c1 0202 	rsble	r2, r1, #2
 800d54c:	2201      	movgt	r2, #1
 800d54e:	4413      	add	r3, r2
 800d550:	e7e0      	b.n	800d514 <_printf_float+0x1a4>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	055a      	lsls	r2, r3, #21
 800d556:	d407      	bmi.n	800d568 <_printf_float+0x1f8>
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	4642      	mov	r2, r8
 800d55c:	4631      	mov	r1, r6
 800d55e:	4628      	mov	r0, r5
 800d560:	47b8      	blx	r7
 800d562:	3001      	adds	r0, #1
 800d564:	d12c      	bne.n	800d5c0 <_printf_float+0x250>
 800d566:	e764      	b.n	800d432 <_printf_float+0xc2>
 800d568:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d56c:	f240 80e0 	bls.w	800d730 <_printf_float+0x3c0>
 800d570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d574:	2200      	movs	r2, #0
 800d576:	2300      	movs	r3, #0
 800d578:	f7f3 fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d034      	beq.n	800d5ea <_printf_float+0x27a>
 800d580:	4a37      	ldr	r2, [pc, #220]	; (800d660 <_printf_float+0x2f0>)
 800d582:	2301      	movs	r3, #1
 800d584:	4631      	mov	r1, r6
 800d586:	4628      	mov	r0, r5
 800d588:	47b8      	blx	r7
 800d58a:	3001      	adds	r0, #1
 800d58c:	f43f af51 	beq.w	800d432 <_printf_float+0xc2>
 800d590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d594:	429a      	cmp	r2, r3
 800d596:	db02      	blt.n	800d59e <_printf_float+0x22e>
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	07d8      	lsls	r0, r3, #31
 800d59c:	d510      	bpl.n	800d5c0 <_printf_float+0x250>
 800d59e:	ee18 3a10 	vmov	r3, s16
 800d5a2:	4652      	mov	r2, sl
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	47b8      	blx	r7
 800d5aa:	3001      	adds	r0, #1
 800d5ac:	f43f af41 	beq.w	800d432 <_printf_float+0xc2>
 800d5b0:	f04f 0800 	mov.w	r8, #0
 800d5b4:	f104 091a 	add.w	r9, r4, #26
 800d5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	4543      	cmp	r3, r8
 800d5be:	dc09      	bgt.n	800d5d4 <_printf_float+0x264>
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	079b      	lsls	r3, r3, #30
 800d5c4:	f100 8105 	bmi.w	800d7d2 <_printf_float+0x462>
 800d5c8:	68e0      	ldr	r0, [r4, #12]
 800d5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5cc:	4298      	cmp	r0, r3
 800d5ce:	bfb8      	it	lt
 800d5d0:	4618      	movlt	r0, r3
 800d5d2:	e730      	b.n	800d436 <_printf_float+0xc6>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	464a      	mov	r2, r9
 800d5d8:	4631      	mov	r1, r6
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b8      	blx	r7
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f43f af27 	beq.w	800d432 <_printf_float+0xc2>
 800d5e4:	f108 0801 	add.w	r8, r8, #1
 800d5e8:	e7e6      	b.n	800d5b8 <_printf_float+0x248>
 800d5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	dc39      	bgt.n	800d664 <_printf_float+0x2f4>
 800d5f0:	4a1b      	ldr	r2, [pc, #108]	; (800d660 <_printf_float+0x2f0>)
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	47b8      	blx	r7
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	f43f af19 	beq.w	800d432 <_printf_float+0xc2>
 800d600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d604:	4313      	orrs	r3, r2
 800d606:	d102      	bne.n	800d60e <_printf_float+0x29e>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	07d9      	lsls	r1, r3, #31
 800d60c:	d5d8      	bpl.n	800d5c0 <_printf_float+0x250>
 800d60e:	ee18 3a10 	vmov	r3, s16
 800d612:	4652      	mov	r2, sl
 800d614:	4631      	mov	r1, r6
 800d616:	4628      	mov	r0, r5
 800d618:	47b8      	blx	r7
 800d61a:	3001      	adds	r0, #1
 800d61c:	f43f af09 	beq.w	800d432 <_printf_float+0xc2>
 800d620:	f04f 0900 	mov.w	r9, #0
 800d624:	f104 0a1a 	add.w	sl, r4, #26
 800d628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62a:	425b      	negs	r3, r3
 800d62c:	454b      	cmp	r3, r9
 800d62e:	dc01      	bgt.n	800d634 <_printf_float+0x2c4>
 800d630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d632:	e792      	b.n	800d55a <_printf_float+0x1ea>
 800d634:	2301      	movs	r3, #1
 800d636:	4652      	mov	r2, sl
 800d638:	4631      	mov	r1, r6
 800d63a:	4628      	mov	r0, r5
 800d63c:	47b8      	blx	r7
 800d63e:	3001      	adds	r0, #1
 800d640:	f43f aef7 	beq.w	800d432 <_printf_float+0xc2>
 800d644:	f109 0901 	add.w	r9, r9, #1
 800d648:	e7ee      	b.n	800d628 <_printf_float+0x2b8>
 800d64a:	bf00      	nop
 800d64c:	7fefffff 	.word	0x7fefffff
 800d650:	080104b0 	.word	0x080104b0
 800d654:	080104b4 	.word	0x080104b4
 800d658:	080104bc 	.word	0x080104bc
 800d65c:	080104b8 	.word	0x080104b8
 800d660:	080104c0 	.word	0x080104c0
 800d664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d668:	429a      	cmp	r2, r3
 800d66a:	bfa8      	it	ge
 800d66c:	461a      	movge	r2, r3
 800d66e:	2a00      	cmp	r2, #0
 800d670:	4691      	mov	r9, r2
 800d672:	dc37      	bgt.n	800d6e4 <_printf_float+0x374>
 800d674:	f04f 0b00 	mov.w	fp, #0
 800d678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d67c:	f104 021a 	add.w	r2, r4, #26
 800d680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d682:	9305      	str	r3, [sp, #20]
 800d684:	eba3 0309 	sub.w	r3, r3, r9
 800d688:	455b      	cmp	r3, fp
 800d68a:	dc33      	bgt.n	800d6f4 <_printf_float+0x384>
 800d68c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d690:	429a      	cmp	r2, r3
 800d692:	db3b      	blt.n	800d70c <_printf_float+0x39c>
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	07da      	lsls	r2, r3, #31
 800d698:	d438      	bmi.n	800d70c <_printf_float+0x39c>
 800d69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d69c:	9a05      	ldr	r2, [sp, #20]
 800d69e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6a0:	1a9a      	subs	r2, r3, r2
 800d6a2:	eba3 0901 	sub.w	r9, r3, r1
 800d6a6:	4591      	cmp	r9, r2
 800d6a8:	bfa8      	it	ge
 800d6aa:	4691      	movge	r9, r2
 800d6ac:	f1b9 0f00 	cmp.w	r9, #0
 800d6b0:	dc35      	bgt.n	800d71e <_printf_float+0x3ae>
 800d6b2:	f04f 0800 	mov.w	r8, #0
 800d6b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6ba:	f104 0a1a 	add.w	sl, r4, #26
 800d6be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6c2:	1a9b      	subs	r3, r3, r2
 800d6c4:	eba3 0309 	sub.w	r3, r3, r9
 800d6c8:	4543      	cmp	r3, r8
 800d6ca:	f77f af79 	ble.w	800d5c0 <_printf_float+0x250>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	4652      	mov	r2, sl
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	47b8      	blx	r7
 800d6d8:	3001      	adds	r0, #1
 800d6da:	f43f aeaa 	beq.w	800d432 <_printf_float+0xc2>
 800d6de:	f108 0801 	add.w	r8, r8, #1
 800d6e2:	e7ec      	b.n	800d6be <_printf_float+0x34e>
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	4631      	mov	r1, r6
 800d6e8:	4642      	mov	r2, r8
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	47b8      	blx	r7
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	d1c0      	bne.n	800d674 <_printf_float+0x304>
 800d6f2:	e69e      	b.n	800d432 <_printf_float+0xc2>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	9205      	str	r2, [sp, #20]
 800d6fc:	47b8      	blx	r7
 800d6fe:	3001      	adds	r0, #1
 800d700:	f43f ae97 	beq.w	800d432 <_printf_float+0xc2>
 800d704:	9a05      	ldr	r2, [sp, #20]
 800d706:	f10b 0b01 	add.w	fp, fp, #1
 800d70a:	e7b9      	b.n	800d680 <_printf_float+0x310>
 800d70c:	ee18 3a10 	vmov	r3, s16
 800d710:	4652      	mov	r2, sl
 800d712:	4631      	mov	r1, r6
 800d714:	4628      	mov	r0, r5
 800d716:	47b8      	blx	r7
 800d718:	3001      	adds	r0, #1
 800d71a:	d1be      	bne.n	800d69a <_printf_float+0x32a>
 800d71c:	e689      	b.n	800d432 <_printf_float+0xc2>
 800d71e:	9a05      	ldr	r2, [sp, #20]
 800d720:	464b      	mov	r3, r9
 800d722:	4442      	add	r2, r8
 800d724:	4631      	mov	r1, r6
 800d726:	4628      	mov	r0, r5
 800d728:	47b8      	blx	r7
 800d72a:	3001      	adds	r0, #1
 800d72c:	d1c1      	bne.n	800d6b2 <_printf_float+0x342>
 800d72e:	e680      	b.n	800d432 <_printf_float+0xc2>
 800d730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d732:	2a01      	cmp	r2, #1
 800d734:	dc01      	bgt.n	800d73a <_printf_float+0x3ca>
 800d736:	07db      	lsls	r3, r3, #31
 800d738:	d538      	bpl.n	800d7ac <_printf_float+0x43c>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4642      	mov	r2, r8
 800d73e:	4631      	mov	r1, r6
 800d740:	4628      	mov	r0, r5
 800d742:	47b8      	blx	r7
 800d744:	3001      	adds	r0, #1
 800d746:	f43f ae74 	beq.w	800d432 <_printf_float+0xc2>
 800d74a:	ee18 3a10 	vmov	r3, s16
 800d74e:	4652      	mov	r2, sl
 800d750:	4631      	mov	r1, r6
 800d752:	4628      	mov	r0, r5
 800d754:	47b8      	blx	r7
 800d756:	3001      	adds	r0, #1
 800d758:	f43f ae6b 	beq.w	800d432 <_printf_float+0xc2>
 800d75c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d760:	2200      	movs	r2, #0
 800d762:	2300      	movs	r3, #0
 800d764:	f7f3 f9c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800d768:	b9d8      	cbnz	r0, 800d7a2 <_printf_float+0x432>
 800d76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d76c:	f108 0201 	add.w	r2, r8, #1
 800d770:	3b01      	subs	r3, #1
 800d772:	4631      	mov	r1, r6
 800d774:	4628      	mov	r0, r5
 800d776:	47b8      	blx	r7
 800d778:	3001      	adds	r0, #1
 800d77a:	d10e      	bne.n	800d79a <_printf_float+0x42a>
 800d77c:	e659      	b.n	800d432 <_printf_float+0xc2>
 800d77e:	2301      	movs	r3, #1
 800d780:	4652      	mov	r2, sl
 800d782:	4631      	mov	r1, r6
 800d784:	4628      	mov	r0, r5
 800d786:	47b8      	blx	r7
 800d788:	3001      	adds	r0, #1
 800d78a:	f43f ae52 	beq.w	800d432 <_printf_float+0xc2>
 800d78e:	f108 0801 	add.w	r8, r8, #1
 800d792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d794:	3b01      	subs	r3, #1
 800d796:	4543      	cmp	r3, r8
 800d798:	dcf1      	bgt.n	800d77e <_printf_float+0x40e>
 800d79a:	464b      	mov	r3, r9
 800d79c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d7a0:	e6dc      	b.n	800d55c <_printf_float+0x1ec>
 800d7a2:	f04f 0800 	mov.w	r8, #0
 800d7a6:	f104 0a1a 	add.w	sl, r4, #26
 800d7aa:	e7f2      	b.n	800d792 <_printf_float+0x422>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	4642      	mov	r2, r8
 800d7b0:	e7df      	b.n	800d772 <_printf_float+0x402>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	464a      	mov	r2, r9
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	47b8      	blx	r7
 800d7bc:	3001      	adds	r0, #1
 800d7be:	f43f ae38 	beq.w	800d432 <_printf_float+0xc2>
 800d7c2:	f108 0801 	add.w	r8, r8, #1
 800d7c6:	68e3      	ldr	r3, [r4, #12]
 800d7c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7ca:	1a5b      	subs	r3, r3, r1
 800d7cc:	4543      	cmp	r3, r8
 800d7ce:	dcf0      	bgt.n	800d7b2 <_printf_float+0x442>
 800d7d0:	e6fa      	b.n	800d5c8 <_printf_float+0x258>
 800d7d2:	f04f 0800 	mov.w	r8, #0
 800d7d6:	f104 0919 	add.w	r9, r4, #25
 800d7da:	e7f4      	b.n	800d7c6 <_printf_float+0x456>

0800d7dc <_printf_common>:
 800d7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	4699      	mov	r9, r3
 800d7e4:	688a      	ldr	r2, [r1, #8]
 800d7e6:	690b      	ldr	r3, [r1, #16]
 800d7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	bfb8      	it	lt
 800d7f0:	4613      	movlt	r3, r2
 800d7f2:	6033      	str	r3, [r6, #0]
 800d7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7f8:	4607      	mov	r7, r0
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	b10a      	cbz	r2, 800d802 <_printf_common+0x26>
 800d7fe:	3301      	adds	r3, #1
 800d800:	6033      	str	r3, [r6, #0]
 800d802:	6823      	ldr	r3, [r4, #0]
 800d804:	0699      	lsls	r1, r3, #26
 800d806:	bf42      	ittt	mi
 800d808:	6833      	ldrmi	r3, [r6, #0]
 800d80a:	3302      	addmi	r3, #2
 800d80c:	6033      	strmi	r3, [r6, #0]
 800d80e:	6825      	ldr	r5, [r4, #0]
 800d810:	f015 0506 	ands.w	r5, r5, #6
 800d814:	d106      	bne.n	800d824 <_printf_common+0x48>
 800d816:	f104 0a19 	add.w	sl, r4, #25
 800d81a:	68e3      	ldr	r3, [r4, #12]
 800d81c:	6832      	ldr	r2, [r6, #0]
 800d81e:	1a9b      	subs	r3, r3, r2
 800d820:	42ab      	cmp	r3, r5
 800d822:	dc26      	bgt.n	800d872 <_printf_common+0x96>
 800d824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d828:	1e13      	subs	r3, r2, #0
 800d82a:	6822      	ldr	r2, [r4, #0]
 800d82c:	bf18      	it	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	0692      	lsls	r2, r2, #26
 800d832:	d42b      	bmi.n	800d88c <_printf_common+0xb0>
 800d834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d838:	4649      	mov	r1, r9
 800d83a:	4638      	mov	r0, r7
 800d83c:	47c0      	blx	r8
 800d83e:	3001      	adds	r0, #1
 800d840:	d01e      	beq.n	800d880 <_printf_common+0xa4>
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	68e5      	ldr	r5, [r4, #12]
 800d846:	6832      	ldr	r2, [r6, #0]
 800d848:	f003 0306 	and.w	r3, r3, #6
 800d84c:	2b04      	cmp	r3, #4
 800d84e:	bf08      	it	eq
 800d850:	1aad      	subeq	r5, r5, r2
 800d852:	68a3      	ldr	r3, [r4, #8]
 800d854:	6922      	ldr	r2, [r4, #16]
 800d856:	bf0c      	ite	eq
 800d858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d85c:	2500      	movne	r5, #0
 800d85e:	4293      	cmp	r3, r2
 800d860:	bfc4      	itt	gt
 800d862:	1a9b      	subgt	r3, r3, r2
 800d864:	18ed      	addgt	r5, r5, r3
 800d866:	2600      	movs	r6, #0
 800d868:	341a      	adds	r4, #26
 800d86a:	42b5      	cmp	r5, r6
 800d86c:	d11a      	bne.n	800d8a4 <_printf_common+0xc8>
 800d86e:	2000      	movs	r0, #0
 800d870:	e008      	b.n	800d884 <_printf_common+0xa8>
 800d872:	2301      	movs	r3, #1
 800d874:	4652      	mov	r2, sl
 800d876:	4649      	mov	r1, r9
 800d878:	4638      	mov	r0, r7
 800d87a:	47c0      	blx	r8
 800d87c:	3001      	adds	r0, #1
 800d87e:	d103      	bne.n	800d888 <_printf_common+0xac>
 800d880:	f04f 30ff 	mov.w	r0, #4294967295
 800d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d888:	3501      	adds	r5, #1
 800d88a:	e7c6      	b.n	800d81a <_printf_common+0x3e>
 800d88c:	18e1      	adds	r1, r4, r3
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	2030      	movs	r0, #48	; 0x30
 800d892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d896:	4422      	add	r2, r4
 800d898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8a0:	3302      	adds	r3, #2
 800d8a2:	e7c7      	b.n	800d834 <_printf_common+0x58>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	47c0      	blx	r8
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	d0e6      	beq.n	800d880 <_printf_common+0xa4>
 800d8b2:	3601      	adds	r6, #1
 800d8b4:	e7d9      	b.n	800d86a <_printf_common+0x8e>
	...

0800d8b8 <_printf_i>:
 800d8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8bc:	7e0f      	ldrb	r7, [r1, #24]
 800d8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8c0:	2f78      	cmp	r7, #120	; 0x78
 800d8c2:	4691      	mov	r9, r2
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	469a      	mov	sl, r3
 800d8ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8ce:	d807      	bhi.n	800d8e0 <_printf_i+0x28>
 800d8d0:	2f62      	cmp	r7, #98	; 0x62
 800d8d2:	d80a      	bhi.n	800d8ea <_printf_i+0x32>
 800d8d4:	2f00      	cmp	r7, #0
 800d8d6:	f000 80d8 	beq.w	800da8a <_printf_i+0x1d2>
 800d8da:	2f58      	cmp	r7, #88	; 0x58
 800d8dc:	f000 80a3 	beq.w	800da26 <_printf_i+0x16e>
 800d8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8e8:	e03a      	b.n	800d960 <_printf_i+0xa8>
 800d8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8ee:	2b15      	cmp	r3, #21
 800d8f0:	d8f6      	bhi.n	800d8e0 <_printf_i+0x28>
 800d8f2:	a101      	add	r1, pc, #4	; (adr r1, 800d8f8 <_printf_i+0x40>)
 800d8f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	0800d965 	.word	0x0800d965
 800d900:	0800d8e1 	.word	0x0800d8e1
 800d904:	0800d8e1 	.word	0x0800d8e1
 800d908:	0800d8e1 	.word	0x0800d8e1
 800d90c:	0800d8e1 	.word	0x0800d8e1
 800d910:	0800d965 	.word	0x0800d965
 800d914:	0800d8e1 	.word	0x0800d8e1
 800d918:	0800d8e1 	.word	0x0800d8e1
 800d91c:	0800d8e1 	.word	0x0800d8e1
 800d920:	0800d8e1 	.word	0x0800d8e1
 800d924:	0800da71 	.word	0x0800da71
 800d928:	0800d995 	.word	0x0800d995
 800d92c:	0800da53 	.word	0x0800da53
 800d930:	0800d8e1 	.word	0x0800d8e1
 800d934:	0800d8e1 	.word	0x0800d8e1
 800d938:	0800da93 	.word	0x0800da93
 800d93c:	0800d8e1 	.word	0x0800d8e1
 800d940:	0800d995 	.word	0x0800d995
 800d944:	0800d8e1 	.word	0x0800d8e1
 800d948:	0800d8e1 	.word	0x0800d8e1
 800d94c:	0800da5b 	.word	0x0800da5b
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	1d1a      	adds	r2, r3, #4
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	602a      	str	r2, [r5, #0]
 800d958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d960:	2301      	movs	r3, #1
 800d962:	e0a3      	b.n	800daac <_printf_i+0x1f4>
 800d964:	6820      	ldr	r0, [r4, #0]
 800d966:	6829      	ldr	r1, [r5, #0]
 800d968:	0606      	lsls	r6, r0, #24
 800d96a:	f101 0304 	add.w	r3, r1, #4
 800d96e:	d50a      	bpl.n	800d986 <_printf_i+0xce>
 800d970:	680e      	ldr	r6, [r1, #0]
 800d972:	602b      	str	r3, [r5, #0]
 800d974:	2e00      	cmp	r6, #0
 800d976:	da03      	bge.n	800d980 <_printf_i+0xc8>
 800d978:	232d      	movs	r3, #45	; 0x2d
 800d97a:	4276      	negs	r6, r6
 800d97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d980:	485e      	ldr	r0, [pc, #376]	; (800dafc <_printf_i+0x244>)
 800d982:	230a      	movs	r3, #10
 800d984:	e019      	b.n	800d9ba <_printf_i+0x102>
 800d986:	680e      	ldr	r6, [r1, #0]
 800d988:	602b      	str	r3, [r5, #0]
 800d98a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d98e:	bf18      	it	ne
 800d990:	b236      	sxthne	r6, r6
 800d992:	e7ef      	b.n	800d974 <_printf_i+0xbc>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	6820      	ldr	r0, [r4, #0]
 800d998:	1d19      	adds	r1, r3, #4
 800d99a:	6029      	str	r1, [r5, #0]
 800d99c:	0601      	lsls	r1, r0, #24
 800d99e:	d501      	bpl.n	800d9a4 <_printf_i+0xec>
 800d9a0:	681e      	ldr	r6, [r3, #0]
 800d9a2:	e002      	b.n	800d9aa <_printf_i+0xf2>
 800d9a4:	0646      	lsls	r6, r0, #25
 800d9a6:	d5fb      	bpl.n	800d9a0 <_printf_i+0xe8>
 800d9a8:	881e      	ldrh	r6, [r3, #0]
 800d9aa:	4854      	ldr	r0, [pc, #336]	; (800dafc <_printf_i+0x244>)
 800d9ac:	2f6f      	cmp	r7, #111	; 0x6f
 800d9ae:	bf0c      	ite	eq
 800d9b0:	2308      	moveq	r3, #8
 800d9b2:	230a      	movne	r3, #10
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9ba:	6865      	ldr	r5, [r4, #4]
 800d9bc:	60a5      	str	r5, [r4, #8]
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	bfa2      	ittt	ge
 800d9c2:	6821      	ldrge	r1, [r4, #0]
 800d9c4:	f021 0104 	bicge.w	r1, r1, #4
 800d9c8:	6021      	strge	r1, [r4, #0]
 800d9ca:	b90e      	cbnz	r6, 800d9d0 <_printf_i+0x118>
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	d04d      	beq.n	800da6c <_printf_i+0x1b4>
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9d6:	fb03 6711 	mls	r7, r3, r1, r6
 800d9da:	5dc7      	ldrb	r7, [r0, r7]
 800d9dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9e0:	4637      	mov	r7, r6
 800d9e2:	42bb      	cmp	r3, r7
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	d9f4      	bls.n	800d9d2 <_printf_i+0x11a>
 800d9e8:	2b08      	cmp	r3, #8
 800d9ea:	d10b      	bne.n	800da04 <_printf_i+0x14c>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	07de      	lsls	r6, r3, #31
 800d9f0:	d508      	bpl.n	800da04 <_printf_i+0x14c>
 800d9f2:	6923      	ldr	r3, [r4, #16]
 800d9f4:	6861      	ldr	r1, [r4, #4]
 800d9f6:	4299      	cmp	r1, r3
 800d9f8:	bfde      	ittt	le
 800d9fa:	2330      	movle	r3, #48	; 0x30
 800d9fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da04:	1b52      	subs	r2, r2, r5
 800da06:	6122      	str	r2, [r4, #16]
 800da08:	f8cd a000 	str.w	sl, [sp]
 800da0c:	464b      	mov	r3, r9
 800da0e:	aa03      	add	r2, sp, #12
 800da10:	4621      	mov	r1, r4
 800da12:	4640      	mov	r0, r8
 800da14:	f7ff fee2 	bl	800d7dc <_printf_common>
 800da18:	3001      	adds	r0, #1
 800da1a:	d14c      	bne.n	800dab6 <_printf_i+0x1fe>
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	b004      	add	sp, #16
 800da22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da26:	4835      	ldr	r0, [pc, #212]	; (800dafc <_printf_i+0x244>)
 800da28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da2c:	6829      	ldr	r1, [r5, #0]
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	f851 6b04 	ldr.w	r6, [r1], #4
 800da34:	6029      	str	r1, [r5, #0]
 800da36:	061d      	lsls	r5, r3, #24
 800da38:	d514      	bpl.n	800da64 <_printf_i+0x1ac>
 800da3a:	07df      	lsls	r7, r3, #31
 800da3c:	bf44      	itt	mi
 800da3e:	f043 0320 	orrmi.w	r3, r3, #32
 800da42:	6023      	strmi	r3, [r4, #0]
 800da44:	b91e      	cbnz	r6, 800da4e <_printf_i+0x196>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	f023 0320 	bic.w	r3, r3, #32
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	2310      	movs	r3, #16
 800da50:	e7b0      	b.n	800d9b4 <_printf_i+0xfc>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	f043 0320 	orr.w	r3, r3, #32
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	2378      	movs	r3, #120	; 0x78
 800da5c:	4828      	ldr	r0, [pc, #160]	; (800db00 <_printf_i+0x248>)
 800da5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da62:	e7e3      	b.n	800da2c <_printf_i+0x174>
 800da64:	0659      	lsls	r1, r3, #25
 800da66:	bf48      	it	mi
 800da68:	b2b6      	uxthmi	r6, r6
 800da6a:	e7e6      	b.n	800da3a <_printf_i+0x182>
 800da6c:	4615      	mov	r5, r2
 800da6e:	e7bb      	b.n	800d9e8 <_printf_i+0x130>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	6826      	ldr	r6, [r4, #0]
 800da74:	6961      	ldr	r1, [r4, #20]
 800da76:	1d18      	adds	r0, r3, #4
 800da78:	6028      	str	r0, [r5, #0]
 800da7a:	0635      	lsls	r5, r6, #24
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	d501      	bpl.n	800da84 <_printf_i+0x1cc>
 800da80:	6019      	str	r1, [r3, #0]
 800da82:	e002      	b.n	800da8a <_printf_i+0x1d2>
 800da84:	0670      	lsls	r0, r6, #25
 800da86:	d5fb      	bpl.n	800da80 <_printf_i+0x1c8>
 800da88:	8019      	strh	r1, [r3, #0]
 800da8a:	2300      	movs	r3, #0
 800da8c:	6123      	str	r3, [r4, #16]
 800da8e:	4615      	mov	r5, r2
 800da90:	e7ba      	b.n	800da08 <_printf_i+0x150>
 800da92:	682b      	ldr	r3, [r5, #0]
 800da94:	1d1a      	adds	r2, r3, #4
 800da96:	602a      	str	r2, [r5, #0]
 800da98:	681d      	ldr	r5, [r3, #0]
 800da9a:	6862      	ldr	r2, [r4, #4]
 800da9c:	2100      	movs	r1, #0
 800da9e:	4628      	mov	r0, r5
 800daa0:	f7f2 fbae 	bl	8000200 <memchr>
 800daa4:	b108      	cbz	r0, 800daaa <_printf_i+0x1f2>
 800daa6:	1b40      	subs	r0, r0, r5
 800daa8:	6060      	str	r0, [r4, #4]
 800daaa:	6863      	ldr	r3, [r4, #4]
 800daac:	6123      	str	r3, [r4, #16]
 800daae:	2300      	movs	r3, #0
 800dab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab4:	e7a8      	b.n	800da08 <_printf_i+0x150>
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	462a      	mov	r2, r5
 800daba:	4649      	mov	r1, r9
 800dabc:	4640      	mov	r0, r8
 800dabe:	47d0      	blx	sl
 800dac0:	3001      	adds	r0, #1
 800dac2:	d0ab      	beq.n	800da1c <_printf_i+0x164>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	079b      	lsls	r3, r3, #30
 800dac8:	d413      	bmi.n	800daf2 <_printf_i+0x23a>
 800daca:	68e0      	ldr	r0, [r4, #12]
 800dacc:	9b03      	ldr	r3, [sp, #12]
 800dace:	4298      	cmp	r0, r3
 800dad0:	bfb8      	it	lt
 800dad2:	4618      	movlt	r0, r3
 800dad4:	e7a4      	b.n	800da20 <_printf_i+0x168>
 800dad6:	2301      	movs	r3, #1
 800dad8:	4632      	mov	r2, r6
 800dada:	4649      	mov	r1, r9
 800dadc:	4640      	mov	r0, r8
 800dade:	47d0      	blx	sl
 800dae0:	3001      	adds	r0, #1
 800dae2:	d09b      	beq.n	800da1c <_printf_i+0x164>
 800dae4:	3501      	adds	r5, #1
 800dae6:	68e3      	ldr	r3, [r4, #12]
 800dae8:	9903      	ldr	r1, [sp, #12]
 800daea:	1a5b      	subs	r3, r3, r1
 800daec:	42ab      	cmp	r3, r5
 800daee:	dcf2      	bgt.n	800dad6 <_printf_i+0x21e>
 800daf0:	e7eb      	b.n	800daca <_printf_i+0x212>
 800daf2:	2500      	movs	r5, #0
 800daf4:	f104 0619 	add.w	r6, r4, #25
 800daf8:	e7f5      	b.n	800dae6 <_printf_i+0x22e>
 800dafa:	bf00      	nop
 800dafc:	080104c2 	.word	0x080104c2
 800db00:	080104d3 	.word	0x080104d3

0800db04 <cleanup_glue>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	460c      	mov	r4, r1
 800db08:	6809      	ldr	r1, [r1, #0]
 800db0a:	4605      	mov	r5, r0
 800db0c:	b109      	cbz	r1, 800db12 <cleanup_glue+0xe>
 800db0e:	f7ff fff9 	bl	800db04 <cleanup_glue>
 800db12:	4621      	mov	r1, r4
 800db14:	4628      	mov	r0, r5
 800db16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db1a:	f001 bcad 	b.w	800f478 <_free_r>
	...

0800db20 <_reclaim_reent>:
 800db20:	4b2c      	ldr	r3, [pc, #176]	; (800dbd4 <_reclaim_reent+0xb4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4283      	cmp	r3, r0
 800db26:	b570      	push	{r4, r5, r6, lr}
 800db28:	4604      	mov	r4, r0
 800db2a:	d051      	beq.n	800dbd0 <_reclaim_reent+0xb0>
 800db2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800db2e:	b143      	cbz	r3, 800db42 <_reclaim_reent+0x22>
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d14a      	bne.n	800dbcc <_reclaim_reent+0xac>
 800db36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db38:	6819      	ldr	r1, [r3, #0]
 800db3a:	b111      	cbz	r1, 800db42 <_reclaim_reent+0x22>
 800db3c:	4620      	mov	r0, r4
 800db3e:	f001 fc9b 	bl	800f478 <_free_r>
 800db42:	6961      	ldr	r1, [r4, #20]
 800db44:	b111      	cbz	r1, 800db4c <_reclaim_reent+0x2c>
 800db46:	4620      	mov	r0, r4
 800db48:	f001 fc96 	bl	800f478 <_free_r>
 800db4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800db4e:	b111      	cbz	r1, 800db56 <_reclaim_reent+0x36>
 800db50:	4620      	mov	r0, r4
 800db52:	f001 fc91 	bl	800f478 <_free_r>
 800db56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db58:	b111      	cbz	r1, 800db60 <_reclaim_reent+0x40>
 800db5a:	4620      	mov	r0, r4
 800db5c:	f001 fc8c 	bl	800f478 <_free_r>
 800db60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800db62:	b111      	cbz	r1, 800db6a <_reclaim_reent+0x4a>
 800db64:	4620      	mov	r0, r4
 800db66:	f001 fc87 	bl	800f478 <_free_r>
 800db6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db6c:	b111      	cbz	r1, 800db74 <_reclaim_reent+0x54>
 800db6e:	4620      	mov	r0, r4
 800db70:	f001 fc82 	bl	800f478 <_free_r>
 800db74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800db76:	b111      	cbz	r1, 800db7e <_reclaim_reent+0x5e>
 800db78:	4620      	mov	r0, r4
 800db7a:	f001 fc7d 	bl	800f478 <_free_r>
 800db7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800db80:	b111      	cbz	r1, 800db88 <_reclaim_reent+0x68>
 800db82:	4620      	mov	r0, r4
 800db84:	f001 fc78 	bl	800f478 <_free_r>
 800db88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db8a:	b111      	cbz	r1, 800db92 <_reclaim_reent+0x72>
 800db8c:	4620      	mov	r0, r4
 800db8e:	f001 fc73 	bl	800f478 <_free_r>
 800db92:	69a3      	ldr	r3, [r4, #24]
 800db94:	b1e3      	cbz	r3, 800dbd0 <_reclaim_reent+0xb0>
 800db96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db98:	4620      	mov	r0, r4
 800db9a:	4798      	blx	r3
 800db9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800db9e:	b1b9      	cbz	r1, 800dbd0 <_reclaim_reent+0xb0>
 800dba0:	4620      	mov	r0, r4
 800dba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dba6:	f7ff bfad 	b.w	800db04 <cleanup_glue>
 800dbaa:	5949      	ldr	r1, [r1, r5]
 800dbac:	b941      	cbnz	r1, 800dbc0 <_reclaim_reent+0xa0>
 800dbae:	3504      	adds	r5, #4
 800dbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbb2:	2d80      	cmp	r5, #128	; 0x80
 800dbb4:	68d9      	ldr	r1, [r3, #12]
 800dbb6:	d1f8      	bne.n	800dbaa <_reclaim_reent+0x8a>
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f001 fc5d 	bl	800f478 <_free_r>
 800dbbe:	e7ba      	b.n	800db36 <_reclaim_reent+0x16>
 800dbc0:	680e      	ldr	r6, [r1, #0]
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f001 fc58 	bl	800f478 <_free_r>
 800dbc8:	4631      	mov	r1, r6
 800dbca:	e7ef      	b.n	800dbac <_reclaim_reent+0x8c>
 800dbcc:	2500      	movs	r5, #0
 800dbce:	e7ef      	b.n	800dbb0 <_reclaim_reent+0x90>
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}
 800dbd2:	bf00      	nop
 800dbd4:	2000010c 	.word	0x2000010c

0800dbd8 <_sbrk_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4d06      	ldr	r5, [pc, #24]	; (800dbf4 <_sbrk_r+0x1c>)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	f7f4 f81a 	bl	8001c1c <_sbrk>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_sbrk_r+0x1a>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_sbrk_r+0x1a>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	2000afe0 	.word	0x2000afe0

0800dbf8 <siprintf>:
 800dbf8:	b40e      	push	{r1, r2, r3}
 800dbfa:	b500      	push	{lr}
 800dbfc:	b09c      	sub	sp, #112	; 0x70
 800dbfe:	ab1d      	add	r3, sp, #116	; 0x74
 800dc00:	9002      	str	r0, [sp, #8]
 800dc02:	9006      	str	r0, [sp, #24]
 800dc04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dc08:	4809      	ldr	r0, [pc, #36]	; (800dc30 <siprintf+0x38>)
 800dc0a:	9107      	str	r1, [sp, #28]
 800dc0c:	9104      	str	r1, [sp, #16]
 800dc0e:	4909      	ldr	r1, [pc, #36]	; (800dc34 <siprintf+0x3c>)
 800dc10:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc14:	9105      	str	r1, [sp, #20]
 800dc16:	6800      	ldr	r0, [r0, #0]
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	a902      	add	r1, sp, #8
 800dc1c:	f001 fcd4 	bl	800f5c8 <_svfiprintf_r>
 800dc20:	9b02      	ldr	r3, [sp, #8]
 800dc22:	2200      	movs	r2, #0
 800dc24:	701a      	strb	r2, [r3, #0]
 800dc26:	b01c      	add	sp, #112	; 0x70
 800dc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc2c:	b003      	add	sp, #12
 800dc2e:	4770      	bx	lr
 800dc30:	2000010c 	.word	0x2000010c
 800dc34:	ffff0208 	.word	0xffff0208

0800dc38 <__sread>:
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc40:	f001 fdc2 	bl	800f7c8 <_read_r>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	bfab      	itete	ge
 800dc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc4c:	181b      	addge	r3, r3, r0
 800dc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc52:	bfac      	ite	ge
 800dc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc56:	81a3      	strhlt	r3, [r4, #12]
 800dc58:	bd10      	pop	{r4, pc}

0800dc5a <__swrite>:
 800dc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5e:	461f      	mov	r7, r3
 800dc60:	898b      	ldrh	r3, [r1, #12]
 800dc62:	05db      	lsls	r3, r3, #23
 800dc64:	4605      	mov	r5, r0
 800dc66:	460c      	mov	r4, r1
 800dc68:	4616      	mov	r6, r2
 800dc6a:	d505      	bpl.n	800dc78 <__swrite+0x1e>
 800dc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc70:	2302      	movs	r3, #2
 800dc72:	2200      	movs	r2, #0
 800dc74:	f001 f840 	bl	800ecf8 <_lseek_r>
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc82:	81a3      	strh	r3, [r4, #12]
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	4628      	mov	r0, r5
 800dc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8e:	f000 b8d1 	b.w	800de34 <_write_r>

0800dc92 <__sseek>:
 800dc92:	b510      	push	{r4, lr}
 800dc94:	460c      	mov	r4, r1
 800dc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9a:	f001 f82d 	bl	800ecf8 <_lseek_r>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	bf15      	itete	ne
 800dca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcae:	81a3      	strheq	r3, [r4, #12]
 800dcb0:	bf18      	it	ne
 800dcb2:	81a3      	strhne	r3, [r4, #12]
 800dcb4:	bd10      	pop	{r4, pc}

0800dcb6 <__sclose>:
 800dcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcba:	f000 b8cd 	b.w	800de58 <_close_r>

0800dcbe <strcpy>:
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcc4:	f803 2b01 	strb.w	r2, [r3], #1
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	d1f9      	bne.n	800dcc0 <strcpy+0x2>
 800dccc:	4770      	bx	lr

0800dcce <strncmp>:
 800dcce:	b510      	push	{r4, lr}
 800dcd0:	b17a      	cbz	r2, 800dcf2 <strncmp+0x24>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	3901      	subs	r1, #1
 800dcd6:	1884      	adds	r4, r0, r2
 800dcd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dcdc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dce0:	4290      	cmp	r0, r2
 800dce2:	d101      	bne.n	800dce8 <strncmp+0x1a>
 800dce4:	42a3      	cmp	r3, r4
 800dce6:	d101      	bne.n	800dcec <strncmp+0x1e>
 800dce8:	1a80      	subs	r0, r0, r2
 800dcea:	bd10      	pop	{r4, pc}
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d1f3      	bne.n	800dcd8 <strncmp+0xa>
 800dcf0:	e7fa      	b.n	800dce8 <strncmp+0x1a>
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	e7f9      	b.n	800dcea <strncmp+0x1c>

0800dcf6 <strncpy>:
 800dcf6:	b510      	push	{r4, lr}
 800dcf8:	3901      	subs	r1, #1
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	b132      	cbz	r2, 800dd0c <strncpy+0x16>
 800dcfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dd02:	f803 4b01 	strb.w	r4, [r3], #1
 800dd06:	3a01      	subs	r2, #1
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	d1f7      	bne.n	800dcfc <strncpy+0x6>
 800dd0c:	441a      	add	r2, r3
 800dd0e:	2100      	movs	r1, #0
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d100      	bne.n	800dd16 <strncpy+0x20>
 800dd14:	bd10      	pop	{r4, pc}
 800dd16:	f803 1b01 	strb.w	r1, [r3], #1
 800dd1a:	e7f9      	b.n	800dd10 <strncpy+0x1a>

0800dd1c <_strtol_l.constprop.0>:
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd22:	d001      	beq.n	800dd28 <_strtol_l.constprop.0+0xc>
 800dd24:	2b24      	cmp	r3, #36	; 0x24
 800dd26:	d906      	bls.n	800dd36 <_strtol_l.constprop.0+0x1a>
 800dd28:	f7ff f8b4 	bl	800ce94 <__errno>
 800dd2c:	2316      	movs	r3, #22
 800dd2e:	6003      	str	r3, [r0, #0]
 800dd30:	2000      	movs	r0, #0
 800dd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de1c <_strtol_l.constprop.0+0x100>
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	462e      	mov	r6, r5
 800dd3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd42:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dd46:	f017 0708 	ands.w	r7, r7, #8
 800dd4a:	d1f7      	bne.n	800dd3c <_strtol_l.constprop.0+0x20>
 800dd4c:	2c2d      	cmp	r4, #45	; 0x2d
 800dd4e:	d132      	bne.n	800ddb6 <_strtol_l.constprop.0+0x9a>
 800dd50:	782c      	ldrb	r4, [r5, #0]
 800dd52:	2701      	movs	r7, #1
 800dd54:	1cb5      	adds	r5, r6, #2
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d05b      	beq.n	800de12 <_strtol_l.constprop.0+0xf6>
 800dd5a:	2b10      	cmp	r3, #16
 800dd5c:	d109      	bne.n	800dd72 <_strtol_l.constprop.0+0x56>
 800dd5e:	2c30      	cmp	r4, #48	; 0x30
 800dd60:	d107      	bne.n	800dd72 <_strtol_l.constprop.0+0x56>
 800dd62:	782c      	ldrb	r4, [r5, #0]
 800dd64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dd68:	2c58      	cmp	r4, #88	; 0x58
 800dd6a:	d14d      	bne.n	800de08 <_strtol_l.constprop.0+0xec>
 800dd6c:	786c      	ldrb	r4, [r5, #1]
 800dd6e:	2310      	movs	r3, #16
 800dd70:	3502      	adds	r5, #2
 800dd72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dd76:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd7a:	f04f 0c00 	mov.w	ip, #0
 800dd7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800dd82:	4666      	mov	r6, ip
 800dd84:	fb03 8a19 	mls	sl, r3, r9, r8
 800dd88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dd8c:	f1be 0f09 	cmp.w	lr, #9
 800dd90:	d816      	bhi.n	800ddc0 <_strtol_l.constprop.0+0xa4>
 800dd92:	4674      	mov	r4, lr
 800dd94:	42a3      	cmp	r3, r4
 800dd96:	dd24      	ble.n	800dde2 <_strtol_l.constprop.0+0xc6>
 800dd98:	f1bc 0f00 	cmp.w	ip, #0
 800dd9c:	db1e      	blt.n	800dddc <_strtol_l.constprop.0+0xc0>
 800dd9e:	45b1      	cmp	r9, r6
 800dda0:	d31c      	bcc.n	800dddc <_strtol_l.constprop.0+0xc0>
 800dda2:	d101      	bne.n	800dda8 <_strtol_l.constprop.0+0x8c>
 800dda4:	45a2      	cmp	sl, r4
 800dda6:	db19      	blt.n	800dddc <_strtol_l.constprop.0+0xc0>
 800dda8:	fb06 4603 	mla	r6, r6, r3, r4
 800ddac:	f04f 0c01 	mov.w	ip, #1
 800ddb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddb4:	e7e8      	b.n	800dd88 <_strtol_l.constprop.0+0x6c>
 800ddb6:	2c2b      	cmp	r4, #43	; 0x2b
 800ddb8:	bf04      	itt	eq
 800ddba:	782c      	ldrbeq	r4, [r5, #0]
 800ddbc:	1cb5      	addeq	r5, r6, #2
 800ddbe:	e7ca      	b.n	800dd56 <_strtol_l.constprop.0+0x3a>
 800ddc0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ddc4:	f1be 0f19 	cmp.w	lr, #25
 800ddc8:	d801      	bhi.n	800ddce <_strtol_l.constprop.0+0xb2>
 800ddca:	3c37      	subs	r4, #55	; 0x37
 800ddcc:	e7e2      	b.n	800dd94 <_strtol_l.constprop.0+0x78>
 800ddce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ddd2:	f1be 0f19 	cmp.w	lr, #25
 800ddd6:	d804      	bhi.n	800dde2 <_strtol_l.constprop.0+0xc6>
 800ddd8:	3c57      	subs	r4, #87	; 0x57
 800ddda:	e7db      	b.n	800dd94 <_strtol_l.constprop.0+0x78>
 800dddc:	f04f 3cff 	mov.w	ip, #4294967295
 800dde0:	e7e6      	b.n	800ddb0 <_strtol_l.constprop.0+0x94>
 800dde2:	f1bc 0f00 	cmp.w	ip, #0
 800dde6:	da05      	bge.n	800ddf4 <_strtol_l.constprop.0+0xd8>
 800dde8:	2322      	movs	r3, #34	; 0x22
 800ddea:	6003      	str	r3, [r0, #0]
 800ddec:	4646      	mov	r6, r8
 800ddee:	b942      	cbnz	r2, 800de02 <_strtol_l.constprop.0+0xe6>
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	e79e      	b.n	800dd32 <_strtol_l.constprop.0+0x16>
 800ddf4:	b107      	cbz	r7, 800ddf8 <_strtol_l.constprop.0+0xdc>
 800ddf6:	4276      	negs	r6, r6
 800ddf8:	2a00      	cmp	r2, #0
 800ddfa:	d0f9      	beq.n	800ddf0 <_strtol_l.constprop.0+0xd4>
 800ddfc:	f1bc 0f00 	cmp.w	ip, #0
 800de00:	d000      	beq.n	800de04 <_strtol_l.constprop.0+0xe8>
 800de02:	1e69      	subs	r1, r5, #1
 800de04:	6011      	str	r1, [r2, #0]
 800de06:	e7f3      	b.n	800ddf0 <_strtol_l.constprop.0+0xd4>
 800de08:	2430      	movs	r4, #48	; 0x30
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1b1      	bne.n	800dd72 <_strtol_l.constprop.0+0x56>
 800de0e:	2308      	movs	r3, #8
 800de10:	e7af      	b.n	800dd72 <_strtol_l.constprop.0+0x56>
 800de12:	2c30      	cmp	r4, #48	; 0x30
 800de14:	d0a5      	beq.n	800dd62 <_strtol_l.constprop.0+0x46>
 800de16:	230a      	movs	r3, #10
 800de18:	e7ab      	b.n	800dd72 <_strtol_l.constprop.0+0x56>
 800de1a:	bf00      	nop
 800de1c:	080104e5 	.word	0x080104e5

0800de20 <strtol>:
 800de20:	4613      	mov	r3, r2
 800de22:	460a      	mov	r2, r1
 800de24:	4601      	mov	r1, r0
 800de26:	4802      	ldr	r0, [pc, #8]	; (800de30 <strtol+0x10>)
 800de28:	6800      	ldr	r0, [r0, #0]
 800de2a:	f7ff bf77 	b.w	800dd1c <_strtol_l.constprop.0>
 800de2e:	bf00      	nop
 800de30:	2000010c 	.word	0x2000010c

0800de34 <_write_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4d07      	ldr	r5, [pc, #28]	; (800de54 <_write_r+0x20>)
 800de38:	4604      	mov	r4, r0
 800de3a:	4608      	mov	r0, r1
 800de3c:	4611      	mov	r1, r2
 800de3e:	2200      	movs	r2, #0
 800de40:	602a      	str	r2, [r5, #0]
 800de42:	461a      	mov	r2, r3
 800de44:	f7f3 fe99 	bl	8001b7a <_write>
 800de48:	1c43      	adds	r3, r0, #1
 800de4a:	d102      	bne.n	800de52 <_write_r+0x1e>
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	b103      	cbz	r3, 800de52 <_write_r+0x1e>
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	bd38      	pop	{r3, r4, r5, pc}
 800de54:	2000afe0 	.word	0x2000afe0

0800de58 <_close_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d06      	ldr	r5, [pc, #24]	; (800de74 <_close_r+0x1c>)
 800de5c:	2300      	movs	r3, #0
 800de5e:	4604      	mov	r4, r0
 800de60:	4608      	mov	r0, r1
 800de62:	602b      	str	r3, [r5, #0]
 800de64:	f7f3 fea5 	bl	8001bb2 <_close>
 800de68:	1c43      	adds	r3, r0, #1
 800de6a:	d102      	bne.n	800de72 <_close_r+0x1a>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	b103      	cbz	r3, 800de72 <_close_r+0x1a>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	2000afe0 	.word	0x2000afe0

0800de78 <quorem>:
 800de78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	6903      	ldr	r3, [r0, #16]
 800de7e:	690c      	ldr	r4, [r1, #16]
 800de80:	42a3      	cmp	r3, r4
 800de82:	4607      	mov	r7, r0
 800de84:	f2c0 8081 	blt.w	800df8a <quorem+0x112>
 800de88:	3c01      	subs	r4, #1
 800de8a:	f101 0814 	add.w	r8, r1, #20
 800de8e:	f100 0514 	add.w	r5, r0, #20
 800de92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dea0:	3301      	adds	r3, #1
 800dea2:	429a      	cmp	r2, r3
 800dea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800deac:	fbb2 f6f3 	udiv	r6, r2, r3
 800deb0:	d331      	bcc.n	800df16 <quorem+0x9e>
 800deb2:	f04f 0e00 	mov.w	lr, #0
 800deb6:	4640      	mov	r0, r8
 800deb8:	46ac      	mov	ip, r5
 800deba:	46f2      	mov	sl, lr
 800debc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dec0:	b293      	uxth	r3, r2
 800dec2:	fb06 e303 	mla	r3, r6, r3, lr
 800dec6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800deca:	b29b      	uxth	r3, r3
 800decc:	ebaa 0303 	sub.w	r3, sl, r3
 800ded0:	f8dc a000 	ldr.w	sl, [ip]
 800ded4:	0c12      	lsrs	r2, r2, #16
 800ded6:	fa13 f38a 	uxtah	r3, r3, sl
 800deda:	fb06 e202 	mla	r2, r6, r2, lr
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	9b00      	ldr	r3, [sp, #0]
 800dee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dee6:	b292      	uxth	r2, r2
 800dee8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800deec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800def0:	f8bd 3000 	ldrh.w	r3, [sp]
 800def4:	4581      	cmp	r9, r0
 800def6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800defa:	f84c 3b04 	str.w	r3, [ip], #4
 800defe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df02:	d2db      	bcs.n	800debc <quorem+0x44>
 800df04:	f855 300b 	ldr.w	r3, [r5, fp]
 800df08:	b92b      	cbnz	r3, 800df16 <quorem+0x9e>
 800df0a:	9b01      	ldr	r3, [sp, #4]
 800df0c:	3b04      	subs	r3, #4
 800df0e:	429d      	cmp	r5, r3
 800df10:	461a      	mov	r2, r3
 800df12:	d32e      	bcc.n	800df72 <quorem+0xfa>
 800df14:	613c      	str	r4, [r7, #16]
 800df16:	4638      	mov	r0, r7
 800df18:	f001 f996 	bl	800f248 <__mcmp>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	db24      	blt.n	800df6a <quorem+0xf2>
 800df20:	3601      	adds	r6, #1
 800df22:	4628      	mov	r0, r5
 800df24:	f04f 0c00 	mov.w	ip, #0
 800df28:	f858 2b04 	ldr.w	r2, [r8], #4
 800df2c:	f8d0 e000 	ldr.w	lr, [r0]
 800df30:	b293      	uxth	r3, r2
 800df32:	ebac 0303 	sub.w	r3, ip, r3
 800df36:	0c12      	lsrs	r2, r2, #16
 800df38:	fa13 f38e 	uxtah	r3, r3, lr
 800df3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800df40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df44:	b29b      	uxth	r3, r3
 800df46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df4a:	45c1      	cmp	r9, r8
 800df4c:	f840 3b04 	str.w	r3, [r0], #4
 800df50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800df54:	d2e8      	bcs.n	800df28 <quorem+0xb0>
 800df56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df5e:	b922      	cbnz	r2, 800df6a <quorem+0xf2>
 800df60:	3b04      	subs	r3, #4
 800df62:	429d      	cmp	r5, r3
 800df64:	461a      	mov	r2, r3
 800df66:	d30a      	bcc.n	800df7e <quorem+0x106>
 800df68:	613c      	str	r4, [r7, #16]
 800df6a:	4630      	mov	r0, r6
 800df6c:	b003      	add	sp, #12
 800df6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df72:	6812      	ldr	r2, [r2, #0]
 800df74:	3b04      	subs	r3, #4
 800df76:	2a00      	cmp	r2, #0
 800df78:	d1cc      	bne.n	800df14 <quorem+0x9c>
 800df7a:	3c01      	subs	r4, #1
 800df7c:	e7c7      	b.n	800df0e <quorem+0x96>
 800df7e:	6812      	ldr	r2, [r2, #0]
 800df80:	3b04      	subs	r3, #4
 800df82:	2a00      	cmp	r2, #0
 800df84:	d1f0      	bne.n	800df68 <quorem+0xf0>
 800df86:	3c01      	subs	r4, #1
 800df88:	e7eb      	b.n	800df62 <quorem+0xea>
 800df8a:	2000      	movs	r0, #0
 800df8c:	e7ee      	b.n	800df6c <quorem+0xf4>
	...

0800df90 <_dtoa_r>:
 800df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	ed2d 8b04 	vpush	{d8-d9}
 800df98:	ec57 6b10 	vmov	r6, r7, d0
 800df9c:	b093      	sub	sp, #76	; 0x4c
 800df9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dfa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dfa4:	9106      	str	r1, [sp, #24]
 800dfa6:	ee10 aa10 	vmov	sl, s0
 800dfaa:	4604      	mov	r4, r0
 800dfac:	9209      	str	r2, [sp, #36]	; 0x24
 800dfae:	930c      	str	r3, [sp, #48]	; 0x30
 800dfb0:	46bb      	mov	fp, r7
 800dfb2:	b975      	cbnz	r5, 800dfd2 <_dtoa_r+0x42>
 800dfb4:	2010      	movs	r0, #16
 800dfb6:	f000 feb1 	bl	800ed1c <malloc>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	6260      	str	r0, [r4, #36]	; 0x24
 800dfbe:	b920      	cbnz	r0, 800dfca <_dtoa_r+0x3a>
 800dfc0:	4ba7      	ldr	r3, [pc, #668]	; (800e260 <_dtoa_r+0x2d0>)
 800dfc2:	21ea      	movs	r1, #234	; 0xea
 800dfc4:	48a7      	ldr	r0, [pc, #668]	; (800e264 <_dtoa_r+0x2d4>)
 800dfc6:	f001 fc11 	bl	800f7ec <__assert_func>
 800dfca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfce:	6005      	str	r5, [r0, #0]
 800dfd0:	60c5      	str	r5, [r0, #12]
 800dfd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfd4:	6819      	ldr	r1, [r3, #0]
 800dfd6:	b151      	cbz	r1, 800dfee <_dtoa_r+0x5e>
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	604a      	str	r2, [r1, #4]
 800dfdc:	2301      	movs	r3, #1
 800dfde:	4093      	lsls	r3, r2
 800dfe0:	608b      	str	r3, [r1, #8]
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 feee 	bl	800edc4 <_Bfree>
 800dfe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfea:	2200      	movs	r2, #0
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	1e3b      	subs	r3, r7, #0
 800dff0:	bfaa      	itet	ge
 800dff2:	2300      	movge	r3, #0
 800dff4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dff8:	f8c8 3000 	strge.w	r3, [r8]
 800dffc:	4b9a      	ldr	r3, [pc, #616]	; (800e268 <_dtoa_r+0x2d8>)
 800dffe:	bfbc      	itt	lt
 800e000:	2201      	movlt	r2, #1
 800e002:	f8c8 2000 	strlt.w	r2, [r8]
 800e006:	ea33 030b 	bics.w	r3, r3, fp
 800e00a:	d11b      	bne.n	800e044 <_dtoa_r+0xb4>
 800e00c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e00e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e018:	4333      	orrs	r3, r6
 800e01a:	f000 8592 	beq.w	800eb42 <_dtoa_r+0xbb2>
 800e01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e020:	b963      	cbnz	r3, 800e03c <_dtoa_r+0xac>
 800e022:	4b92      	ldr	r3, [pc, #584]	; (800e26c <_dtoa_r+0x2dc>)
 800e024:	e022      	b.n	800e06c <_dtoa_r+0xdc>
 800e026:	4b92      	ldr	r3, [pc, #584]	; (800e270 <_dtoa_r+0x2e0>)
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	3308      	adds	r3, #8
 800e02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	9801      	ldr	r0, [sp, #4]
 800e032:	b013      	add	sp, #76	; 0x4c
 800e034:	ecbd 8b04 	vpop	{d8-d9}
 800e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	4b8b      	ldr	r3, [pc, #556]	; (800e26c <_dtoa_r+0x2dc>)
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	3303      	adds	r3, #3
 800e042:	e7f3      	b.n	800e02c <_dtoa_r+0x9c>
 800e044:	2200      	movs	r2, #0
 800e046:	2300      	movs	r3, #0
 800e048:	4650      	mov	r0, sl
 800e04a:	4659      	mov	r1, fp
 800e04c:	f7f2 fd4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e050:	ec4b ab19 	vmov	d9, sl, fp
 800e054:	4680      	mov	r8, r0
 800e056:	b158      	cbz	r0, 800e070 <_dtoa_r+0xe0>
 800e058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e05a:	2301      	movs	r3, #1
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e060:	2b00      	cmp	r3, #0
 800e062:	f000 856b 	beq.w	800eb3c <_dtoa_r+0xbac>
 800e066:	4883      	ldr	r0, [pc, #524]	; (800e274 <_dtoa_r+0x2e4>)
 800e068:	6018      	str	r0, [r3, #0]
 800e06a:	1e43      	subs	r3, r0, #1
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	e7df      	b.n	800e030 <_dtoa_r+0xa0>
 800e070:	ec4b ab10 	vmov	d0, sl, fp
 800e074:	aa10      	add	r2, sp, #64	; 0x40
 800e076:	a911      	add	r1, sp, #68	; 0x44
 800e078:	4620      	mov	r0, r4
 800e07a:	f001 f98b 	bl	800f394 <__d2b>
 800e07e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e082:	ee08 0a10 	vmov	s16, r0
 800e086:	2d00      	cmp	r5, #0
 800e088:	f000 8084 	beq.w	800e194 <_dtoa_r+0x204>
 800e08c:	ee19 3a90 	vmov	r3, s19
 800e090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e094:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e098:	4656      	mov	r6, sl
 800e09a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e09e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e0a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e0a6:	4b74      	ldr	r3, [pc, #464]	; (800e278 <_dtoa_r+0x2e8>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	f7f2 f8fb 	bl	80002a8 <__aeabi_dsub>
 800e0b2:	a365      	add	r3, pc, #404	; (adr r3, 800e248 <_dtoa_r+0x2b8>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 faae 	bl	8000618 <__aeabi_dmul>
 800e0bc:	a364      	add	r3, pc, #400	; (adr r3, 800e250 <_dtoa_r+0x2c0>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f7f2 f8f3 	bl	80002ac <__adddf3>
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	460f      	mov	r7, r1
 800e0cc:	f7f2 fa3a 	bl	8000544 <__aeabi_i2d>
 800e0d0:	a361      	add	r3, pc, #388	; (adr r3, 800e258 <_dtoa_r+0x2c8>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	f7f2 fa9f 	bl	8000618 <__aeabi_dmul>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4630      	mov	r0, r6
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	f7f2 f8e3 	bl	80002ac <__adddf3>
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	f7f2 fd45 	bl	8000b78 <__aeabi_d2iz>
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	9000      	str	r0, [sp, #0]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 fd00 	bl	8000afc <__aeabi_dcmplt>
 800e0fc:	b150      	cbz	r0, 800e114 <_dtoa_r+0x184>
 800e0fe:	9800      	ldr	r0, [sp, #0]
 800e100:	f7f2 fa20 	bl	8000544 <__aeabi_i2d>
 800e104:	4632      	mov	r2, r6
 800e106:	463b      	mov	r3, r7
 800e108:	f7f2 fcee 	bl	8000ae8 <__aeabi_dcmpeq>
 800e10c:	b910      	cbnz	r0, 800e114 <_dtoa_r+0x184>
 800e10e:	9b00      	ldr	r3, [sp, #0]
 800e110:	3b01      	subs	r3, #1
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	9b00      	ldr	r3, [sp, #0]
 800e116:	2b16      	cmp	r3, #22
 800e118:	d85a      	bhi.n	800e1d0 <_dtoa_r+0x240>
 800e11a:	9a00      	ldr	r2, [sp, #0]
 800e11c:	4b57      	ldr	r3, [pc, #348]	; (800e27c <_dtoa_r+0x2ec>)
 800e11e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	ec51 0b19 	vmov	r0, r1, d9
 800e12a:	f7f2 fce7 	bl	8000afc <__aeabi_dcmplt>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d050      	beq.n	800e1d4 <_dtoa_r+0x244>
 800e132:	9b00      	ldr	r3, [sp, #0]
 800e134:	3b01      	subs	r3, #1
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	2300      	movs	r3, #0
 800e13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e13e:	1b5d      	subs	r5, r3, r5
 800e140:	1e6b      	subs	r3, r5, #1
 800e142:	9305      	str	r3, [sp, #20]
 800e144:	bf45      	ittet	mi
 800e146:	f1c5 0301 	rsbmi	r3, r5, #1
 800e14a:	9304      	strmi	r3, [sp, #16]
 800e14c:	2300      	movpl	r3, #0
 800e14e:	2300      	movmi	r3, #0
 800e150:	bf4c      	ite	mi
 800e152:	9305      	strmi	r3, [sp, #20]
 800e154:	9304      	strpl	r3, [sp, #16]
 800e156:	9b00      	ldr	r3, [sp, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	db3d      	blt.n	800e1d8 <_dtoa_r+0x248>
 800e15c:	9b05      	ldr	r3, [sp, #20]
 800e15e:	9a00      	ldr	r2, [sp, #0]
 800e160:	920a      	str	r2, [sp, #40]	; 0x28
 800e162:	4413      	add	r3, r2
 800e164:	9305      	str	r3, [sp, #20]
 800e166:	2300      	movs	r3, #0
 800e168:	9307      	str	r3, [sp, #28]
 800e16a:	9b06      	ldr	r3, [sp, #24]
 800e16c:	2b09      	cmp	r3, #9
 800e16e:	f200 8089 	bhi.w	800e284 <_dtoa_r+0x2f4>
 800e172:	2b05      	cmp	r3, #5
 800e174:	bfc4      	itt	gt
 800e176:	3b04      	subgt	r3, #4
 800e178:	9306      	strgt	r3, [sp, #24]
 800e17a:	9b06      	ldr	r3, [sp, #24]
 800e17c:	f1a3 0302 	sub.w	r3, r3, #2
 800e180:	bfcc      	ite	gt
 800e182:	2500      	movgt	r5, #0
 800e184:	2501      	movle	r5, #1
 800e186:	2b03      	cmp	r3, #3
 800e188:	f200 8087 	bhi.w	800e29a <_dtoa_r+0x30a>
 800e18c:	e8df f003 	tbb	[pc, r3]
 800e190:	59383a2d 	.word	0x59383a2d
 800e194:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e198:	441d      	add	r5, r3
 800e19a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e19e:	2b20      	cmp	r3, #32
 800e1a0:	bfc1      	itttt	gt
 800e1a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e1a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e1aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800e1ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e1b2:	bfda      	itte	le
 800e1b4:	f1c3 0320 	rsble	r3, r3, #32
 800e1b8:	fa06 f003 	lslle.w	r0, r6, r3
 800e1bc:	4318      	orrgt	r0, r3
 800e1be:	f7f2 f9b1 	bl	8000524 <__aeabi_ui2d>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e1ca:	3d01      	subs	r5, #1
 800e1cc:	930e      	str	r3, [sp, #56]	; 0x38
 800e1ce:	e76a      	b.n	800e0a6 <_dtoa_r+0x116>
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e7b2      	b.n	800e13a <_dtoa_r+0x1aa>
 800e1d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e1d6:	e7b1      	b.n	800e13c <_dtoa_r+0x1ac>
 800e1d8:	9b04      	ldr	r3, [sp, #16]
 800e1da:	9a00      	ldr	r2, [sp, #0]
 800e1dc:	1a9b      	subs	r3, r3, r2
 800e1de:	9304      	str	r3, [sp, #16]
 800e1e0:	4253      	negs	r3, r2
 800e1e2:	9307      	str	r3, [sp, #28]
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e1e8:	e7bf      	b.n	800e16a <_dtoa_r+0x1da>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	9308      	str	r3, [sp, #32]
 800e1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dc55      	bgt.n	800e2a0 <_dtoa_r+0x310>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e1fe:	e00c      	b.n	800e21a <_dtoa_r+0x28a>
 800e200:	2301      	movs	r3, #1
 800e202:	e7f3      	b.n	800e1ec <_dtoa_r+0x25c>
 800e204:	2300      	movs	r3, #0
 800e206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e208:	9308      	str	r3, [sp, #32]
 800e20a:	9b00      	ldr	r3, [sp, #0]
 800e20c:	4413      	add	r3, r2
 800e20e:	9302      	str	r3, [sp, #8]
 800e210:	3301      	adds	r3, #1
 800e212:	2b01      	cmp	r3, #1
 800e214:	9303      	str	r3, [sp, #12]
 800e216:	bfb8      	it	lt
 800e218:	2301      	movlt	r3, #1
 800e21a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e21c:	2200      	movs	r2, #0
 800e21e:	6042      	str	r2, [r0, #4]
 800e220:	2204      	movs	r2, #4
 800e222:	f102 0614 	add.w	r6, r2, #20
 800e226:	429e      	cmp	r6, r3
 800e228:	6841      	ldr	r1, [r0, #4]
 800e22a:	d93d      	bls.n	800e2a8 <_dtoa_r+0x318>
 800e22c:	4620      	mov	r0, r4
 800e22e:	f000 fd89 	bl	800ed44 <_Balloc>
 800e232:	9001      	str	r0, [sp, #4]
 800e234:	2800      	cmp	r0, #0
 800e236:	d13b      	bne.n	800e2b0 <_dtoa_r+0x320>
 800e238:	4b11      	ldr	r3, [pc, #68]	; (800e280 <_dtoa_r+0x2f0>)
 800e23a:	4602      	mov	r2, r0
 800e23c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e240:	e6c0      	b.n	800dfc4 <_dtoa_r+0x34>
 800e242:	2301      	movs	r3, #1
 800e244:	e7df      	b.n	800e206 <_dtoa_r+0x276>
 800e246:	bf00      	nop
 800e248:	636f4361 	.word	0x636f4361
 800e24c:	3fd287a7 	.word	0x3fd287a7
 800e250:	8b60c8b3 	.word	0x8b60c8b3
 800e254:	3fc68a28 	.word	0x3fc68a28
 800e258:	509f79fb 	.word	0x509f79fb
 800e25c:	3fd34413 	.word	0x3fd34413
 800e260:	080105f2 	.word	0x080105f2
 800e264:	08010609 	.word	0x08010609
 800e268:	7ff00000 	.word	0x7ff00000
 800e26c:	080105ee 	.word	0x080105ee
 800e270:	080105e5 	.word	0x080105e5
 800e274:	080104c1 	.word	0x080104c1
 800e278:	3ff80000 	.word	0x3ff80000
 800e27c:	08010700 	.word	0x08010700
 800e280:	08010664 	.word	0x08010664
 800e284:	2501      	movs	r5, #1
 800e286:	2300      	movs	r3, #0
 800e288:	9306      	str	r3, [sp, #24]
 800e28a:	9508      	str	r5, [sp, #32]
 800e28c:	f04f 33ff 	mov.w	r3, #4294967295
 800e290:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e294:	2200      	movs	r2, #0
 800e296:	2312      	movs	r3, #18
 800e298:	e7b0      	b.n	800e1fc <_dtoa_r+0x26c>
 800e29a:	2301      	movs	r3, #1
 800e29c:	9308      	str	r3, [sp, #32]
 800e29e:	e7f5      	b.n	800e28c <_dtoa_r+0x2fc>
 800e2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e2a6:	e7b8      	b.n	800e21a <_dtoa_r+0x28a>
 800e2a8:	3101      	adds	r1, #1
 800e2aa:	6041      	str	r1, [r0, #4]
 800e2ac:	0052      	lsls	r2, r2, #1
 800e2ae:	e7b8      	b.n	800e222 <_dtoa_r+0x292>
 800e2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2b2:	9a01      	ldr	r2, [sp, #4]
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	9b03      	ldr	r3, [sp, #12]
 800e2b8:	2b0e      	cmp	r3, #14
 800e2ba:	f200 809d 	bhi.w	800e3f8 <_dtoa_r+0x468>
 800e2be:	2d00      	cmp	r5, #0
 800e2c0:	f000 809a 	beq.w	800e3f8 <_dtoa_r+0x468>
 800e2c4:	9b00      	ldr	r3, [sp, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	dd32      	ble.n	800e330 <_dtoa_r+0x3a0>
 800e2ca:	4ab7      	ldr	r2, [pc, #732]	; (800e5a8 <_dtoa_r+0x618>)
 800e2cc:	f003 030f 	and.w	r3, r3, #15
 800e2d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2d8:	9b00      	ldr	r3, [sp, #0]
 800e2da:	05d8      	lsls	r0, r3, #23
 800e2dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e2e0:	d516      	bpl.n	800e310 <_dtoa_r+0x380>
 800e2e2:	4bb2      	ldr	r3, [pc, #712]	; (800e5ac <_dtoa_r+0x61c>)
 800e2e4:	ec51 0b19 	vmov	r0, r1, d9
 800e2e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2ec:	f7f2 fabe 	bl	800086c <__aeabi_ddiv>
 800e2f0:	f007 070f 	and.w	r7, r7, #15
 800e2f4:	4682      	mov	sl, r0
 800e2f6:	468b      	mov	fp, r1
 800e2f8:	2503      	movs	r5, #3
 800e2fa:	4eac      	ldr	r6, [pc, #688]	; (800e5ac <_dtoa_r+0x61c>)
 800e2fc:	b957      	cbnz	r7, 800e314 <_dtoa_r+0x384>
 800e2fe:	4642      	mov	r2, r8
 800e300:	464b      	mov	r3, r9
 800e302:	4650      	mov	r0, sl
 800e304:	4659      	mov	r1, fp
 800e306:	f7f2 fab1 	bl	800086c <__aeabi_ddiv>
 800e30a:	4682      	mov	sl, r0
 800e30c:	468b      	mov	fp, r1
 800e30e:	e028      	b.n	800e362 <_dtoa_r+0x3d2>
 800e310:	2502      	movs	r5, #2
 800e312:	e7f2      	b.n	800e2fa <_dtoa_r+0x36a>
 800e314:	07f9      	lsls	r1, r7, #31
 800e316:	d508      	bpl.n	800e32a <_dtoa_r+0x39a>
 800e318:	4640      	mov	r0, r8
 800e31a:	4649      	mov	r1, r9
 800e31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e320:	f7f2 f97a 	bl	8000618 <__aeabi_dmul>
 800e324:	3501      	adds	r5, #1
 800e326:	4680      	mov	r8, r0
 800e328:	4689      	mov	r9, r1
 800e32a:	107f      	asrs	r7, r7, #1
 800e32c:	3608      	adds	r6, #8
 800e32e:	e7e5      	b.n	800e2fc <_dtoa_r+0x36c>
 800e330:	f000 809b 	beq.w	800e46a <_dtoa_r+0x4da>
 800e334:	9b00      	ldr	r3, [sp, #0]
 800e336:	4f9d      	ldr	r7, [pc, #628]	; (800e5ac <_dtoa_r+0x61c>)
 800e338:	425e      	negs	r6, r3
 800e33a:	4b9b      	ldr	r3, [pc, #620]	; (800e5a8 <_dtoa_r+0x618>)
 800e33c:	f006 020f 	and.w	r2, r6, #15
 800e340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	ec51 0b19 	vmov	r0, r1, d9
 800e34c:	f7f2 f964 	bl	8000618 <__aeabi_dmul>
 800e350:	1136      	asrs	r6, r6, #4
 800e352:	4682      	mov	sl, r0
 800e354:	468b      	mov	fp, r1
 800e356:	2300      	movs	r3, #0
 800e358:	2502      	movs	r5, #2
 800e35a:	2e00      	cmp	r6, #0
 800e35c:	d17a      	bne.n	800e454 <_dtoa_r+0x4c4>
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1d3      	bne.n	800e30a <_dtoa_r+0x37a>
 800e362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 8082 	beq.w	800e46e <_dtoa_r+0x4de>
 800e36a:	4b91      	ldr	r3, [pc, #580]	; (800e5b0 <_dtoa_r+0x620>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	4650      	mov	r0, sl
 800e370:	4659      	mov	r1, fp
 800e372:	f7f2 fbc3 	bl	8000afc <__aeabi_dcmplt>
 800e376:	2800      	cmp	r0, #0
 800e378:	d079      	beq.n	800e46e <_dtoa_r+0x4de>
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d076      	beq.n	800e46e <_dtoa_r+0x4de>
 800e380:	9b02      	ldr	r3, [sp, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	dd36      	ble.n	800e3f4 <_dtoa_r+0x464>
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	4650      	mov	r0, sl
 800e38a:	4659      	mov	r1, fp
 800e38c:	1e5f      	subs	r7, r3, #1
 800e38e:	2200      	movs	r2, #0
 800e390:	4b88      	ldr	r3, [pc, #544]	; (800e5b4 <_dtoa_r+0x624>)
 800e392:	f7f2 f941 	bl	8000618 <__aeabi_dmul>
 800e396:	9e02      	ldr	r6, [sp, #8]
 800e398:	4682      	mov	sl, r0
 800e39a:	468b      	mov	fp, r1
 800e39c:	3501      	adds	r5, #1
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f7f2 f8d0 	bl	8000544 <__aeabi_i2d>
 800e3a4:	4652      	mov	r2, sl
 800e3a6:	465b      	mov	r3, fp
 800e3a8:	f7f2 f936 	bl	8000618 <__aeabi_dmul>
 800e3ac:	4b82      	ldr	r3, [pc, #520]	; (800e5b8 <_dtoa_r+0x628>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f7f1 ff7c 	bl	80002ac <__adddf3>
 800e3b4:	46d0      	mov	r8, sl
 800e3b6:	46d9      	mov	r9, fp
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e3be:	2e00      	cmp	r6, #0
 800e3c0:	d158      	bne.n	800e474 <_dtoa_r+0x4e4>
 800e3c2:	4b7e      	ldr	r3, [pc, #504]	; (800e5bc <_dtoa_r+0x62c>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f7f1 ff6d 	bl	80002a8 <__aeabi_dsub>
 800e3ce:	4652      	mov	r2, sl
 800e3d0:	465b      	mov	r3, fp
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4689      	mov	r9, r1
 800e3d6:	f7f2 fbaf 	bl	8000b38 <__aeabi_dcmpgt>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	f040 8295 	bne.w	800e90a <_dtoa_r+0x97a>
 800e3e0:	4652      	mov	r2, sl
 800e3e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	4649      	mov	r1, r9
 800e3ea:	f7f2 fb87 	bl	8000afc <__aeabi_dcmplt>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f040 8289 	bne.w	800e906 <_dtoa_r+0x976>
 800e3f4:	ec5b ab19 	vmov	sl, fp, d9
 800e3f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f2c0 8148 	blt.w	800e690 <_dtoa_r+0x700>
 800e400:	9a00      	ldr	r2, [sp, #0]
 800e402:	2a0e      	cmp	r2, #14
 800e404:	f300 8144 	bgt.w	800e690 <_dtoa_r+0x700>
 800e408:	4b67      	ldr	r3, [pc, #412]	; (800e5a8 <_dtoa_r+0x618>)
 800e40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e40e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e414:	2b00      	cmp	r3, #0
 800e416:	f280 80d5 	bge.w	800e5c4 <_dtoa_r+0x634>
 800e41a:	9b03      	ldr	r3, [sp, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f300 80d1 	bgt.w	800e5c4 <_dtoa_r+0x634>
 800e422:	f040 826f 	bne.w	800e904 <_dtoa_r+0x974>
 800e426:	4b65      	ldr	r3, [pc, #404]	; (800e5bc <_dtoa_r+0x62c>)
 800e428:	2200      	movs	r2, #0
 800e42a:	4640      	mov	r0, r8
 800e42c:	4649      	mov	r1, r9
 800e42e:	f7f2 f8f3 	bl	8000618 <__aeabi_dmul>
 800e432:	4652      	mov	r2, sl
 800e434:	465b      	mov	r3, fp
 800e436:	f7f2 fb75 	bl	8000b24 <__aeabi_dcmpge>
 800e43a:	9e03      	ldr	r6, [sp, #12]
 800e43c:	4637      	mov	r7, r6
 800e43e:	2800      	cmp	r0, #0
 800e440:	f040 8245 	bne.w	800e8ce <_dtoa_r+0x93e>
 800e444:	9d01      	ldr	r5, [sp, #4]
 800e446:	2331      	movs	r3, #49	; 0x31
 800e448:	f805 3b01 	strb.w	r3, [r5], #1
 800e44c:	9b00      	ldr	r3, [sp, #0]
 800e44e:	3301      	adds	r3, #1
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	e240      	b.n	800e8d6 <_dtoa_r+0x946>
 800e454:	07f2      	lsls	r2, r6, #31
 800e456:	d505      	bpl.n	800e464 <_dtoa_r+0x4d4>
 800e458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e45c:	f7f2 f8dc 	bl	8000618 <__aeabi_dmul>
 800e460:	3501      	adds	r5, #1
 800e462:	2301      	movs	r3, #1
 800e464:	1076      	asrs	r6, r6, #1
 800e466:	3708      	adds	r7, #8
 800e468:	e777      	b.n	800e35a <_dtoa_r+0x3ca>
 800e46a:	2502      	movs	r5, #2
 800e46c:	e779      	b.n	800e362 <_dtoa_r+0x3d2>
 800e46e:	9f00      	ldr	r7, [sp, #0]
 800e470:	9e03      	ldr	r6, [sp, #12]
 800e472:	e794      	b.n	800e39e <_dtoa_r+0x40e>
 800e474:	9901      	ldr	r1, [sp, #4]
 800e476:	4b4c      	ldr	r3, [pc, #304]	; (800e5a8 <_dtoa_r+0x618>)
 800e478:	4431      	add	r1, r6
 800e47a:	910d      	str	r1, [sp, #52]	; 0x34
 800e47c:	9908      	ldr	r1, [sp, #32]
 800e47e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e482:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e486:	2900      	cmp	r1, #0
 800e488:	d043      	beq.n	800e512 <_dtoa_r+0x582>
 800e48a:	494d      	ldr	r1, [pc, #308]	; (800e5c0 <_dtoa_r+0x630>)
 800e48c:	2000      	movs	r0, #0
 800e48e:	f7f2 f9ed 	bl	800086c <__aeabi_ddiv>
 800e492:	4652      	mov	r2, sl
 800e494:	465b      	mov	r3, fp
 800e496:	f7f1 ff07 	bl	80002a8 <__aeabi_dsub>
 800e49a:	9d01      	ldr	r5, [sp, #4]
 800e49c:	4682      	mov	sl, r0
 800e49e:	468b      	mov	fp, r1
 800e4a0:	4649      	mov	r1, r9
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	f7f2 fb68 	bl	8000b78 <__aeabi_d2iz>
 800e4a8:	4606      	mov	r6, r0
 800e4aa:	f7f2 f84b 	bl	8000544 <__aeabi_i2d>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	4640      	mov	r0, r8
 800e4b4:	4649      	mov	r1, r9
 800e4b6:	f7f1 fef7 	bl	80002a8 <__aeabi_dsub>
 800e4ba:	3630      	adds	r6, #48	; 0x30
 800e4bc:	f805 6b01 	strb.w	r6, [r5], #1
 800e4c0:	4652      	mov	r2, sl
 800e4c2:	465b      	mov	r3, fp
 800e4c4:	4680      	mov	r8, r0
 800e4c6:	4689      	mov	r9, r1
 800e4c8:	f7f2 fb18 	bl	8000afc <__aeabi_dcmplt>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d163      	bne.n	800e598 <_dtoa_r+0x608>
 800e4d0:	4642      	mov	r2, r8
 800e4d2:	464b      	mov	r3, r9
 800e4d4:	4936      	ldr	r1, [pc, #216]	; (800e5b0 <_dtoa_r+0x620>)
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	f7f1 fee6 	bl	80002a8 <__aeabi_dsub>
 800e4dc:	4652      	mov	r2, sl
 800e4de:	465b      	mov	r3, fp
 800e4e0:	f7f2 fb0c 	bl	8000afc <__aeabi_dcmplt>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	f040 80b5 	bne.w	800e654 <_dtoa_r+0x6c4>
 800e4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4ec:	429d      	cmp	r5, r3
 800e4ee:	d081      	beq.n	800e3f4 <_dtoa_r+0x464>
 800e4f0:	4b30      	ldr	r3, [pc, #192]	; (800e5b4 <_dtoa_r+0x624>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	4650      	mov	r0, sl
 800e4f6:	4659      	mov	r1, fp
 800e4f8:	f7f2 f88e 	bl	8000618 <__aeabi_dmul>
 800e4fc:	4b2d      	ldr	r3, [pc, #180]	; (800e5b4 <_dtoa_r+0x624>)
 800e4fe:	4682      	mov	sl, r0
 800e500:	468b      	mov	fp, r1
 800e502:	4640      	mov	r0, r8
 800e504:	4649      	mov	r1, r9
 800e506:	2200      	movs	r2, #0
 800e508:	f7f2 f886 	bl	8000618 <__aeabi_dmul>
 800e50c:	4680      	mov	r8, r0
 800e50e:	4689      	mov	r9, r1
 800e510:	e7c6      	b.n	800e4a0 <_dtoa_r+0x510>
 800e512:	4650      	mov	r0, sl
 800e514:	4659      	mov	r1, fp
 800e516:	f7f2 f87f 	bl	8000618 <__aeabi_dmul>
 800e51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e51c:	9d01      	ldr	r5, [sp, #4]
 800e51e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e520:	4682      	mov	sl, r0
 800e522:	468b      	mov	fp, r1
 800e524:	4649      	mov	r1, r9
 800e526:	4640      	mov	r0, r8
 800e528:	f7f2 fb26 	bl	8000b78 <__aeabi_d2iz>
 800e52c:	4606      	mov	r6, r0
 800e52e:	f7f2 f809 	bl	8000544 <__aeabi_i2d>
 800e532:	3630      	adds	r6, #48	; 0x30
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	4640      	mov	r0, r8
 800e53a:	4649      	mov	r1, r9
 800e53c:	f7f1 feb4 	bl	80002a8 <__aeabi_dsub>
 800e540:	f805 6b01 	strb.w	r6, [r5], #1
 800e544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e546:	429d      	cmp	r5, r3
 800e548:	4680      	mov	r8, r0
 800e54a:	4689      	mov	r9, r1
 800e54c:	f04f 0200 	mov.w	r2, #0
 800e550:	d124      	bne.n	800e59c <_dtoa_r+0x60c>
 800e552:	4b1b      	ldr	r3, [pc, #108]	; (800e5c0 <_dtoa_r+0x630>)
 800e554:	4650      	mov	r0, sl
 800e556:	4659      	mov	r1, fp
 800e558:	f7f1 fea8 	bl	80002ac <__adddf3>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	4640      	mov	r0, r8
 800e562:	4649      	mov	r1, r9
 800e564:	f7f2 fae8 	bl	8000b38 <__aeabi_dcmpgt>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d173      	bne.n	800e654 <_dtoa_r+0x6c4>
 800e56c:	4652      	mov	r2, sl
 800e56e:	465b      	mov	r3, fp
 800e570:	4913      	ldr	r1, [pc, #76]	; (800e5c0 <_dtoa_r+0x630>)
 800e572:	2000      	movs	r0, #0
 800e574:	f7f1 fe98 	bl	80002a8 <__aeabi_dsub>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	4640      	mov	r0, r8
 800e57e:	4649      	mov	r1, r9
 800e580:	f7f2 fabc 	bl	8000afc <__aeabi_dcmplt>
 800e584:	2800      	cmp	r0, #0
 800e586:	f43f af35 	beq.w	800e3f4 <_dtoa_r+0x464>
 800e58a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e58c:	1e6b      	subs	r3, r5, #1
 800e58e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e590:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e594:	2b30      	cmp	r3, #48	; 0x30
 800e596:	d0f8      	beq.n	800e58a <_dtoa_r+0x5fa>
 800e598:	9700      	str	r7, [sp, #0]
 800e59a:	e049      	b.n	800e630 <_dtoa_r+0x6a0>
 800e59c:	4b05      	ldr	r3, [pc, #20]	; (800e5b4 <_dtoa_r+0x624>)
 800e59e:	f7f2 f83b 	bl	8000618 <__aeabi_dmul>
 800e5a2:	4680      	mov	r8, r0
 800e5a4:	4689      	mov	r9, r1
 800e5a6:	e7bd      	b.n	800e524 <_dtoa_r+0x594>
 800e5a8:	08010700 	.word	0x08010700
 800e5ac:	080106d8 	.word	0x080106d8
 800e5b0:	3ff00000 	.word	0x3ff00000
 800e5b4:	40240000 	.word	0x40240000
 800e5b8:	401c0000 	.word	0x401c0000
 800e5bc:	40140000 	.word	0x40140000
 800e5c0:	3fe00000 	.word	0x3fe00000
 800e5c4:	9d01      	ldr	r5, [sp, #4]
 800e5c6:	4656      	mov	r6, sl
 800e5c8:	465f      	mov	r7, fp
 800e5ca:	4642      	mov	r2, r8
 800e5cc:	464b      	mov	r3, r9
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	4639      	mov	r1, r7
 800e5d2:	f7f2 f94b 	bl	800086c <__aeabi_ddiv>
 800e5d6:	f7f2 facf 	bl	8000b78 <__aeabi_d2iz>
 800e5da:	4682      	mov	sl, r0
 800e5dc:	f7f1 ffb2 	bl	8000544 <__aeabi_i2d>
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	464b      	mov	r3, r9
 800e5e4:	f7f2 f818 	bl	8000618 <__aeabi_dmul>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e5f4:	f7f1 fe58 	bl	80002a8 <__aeabi_dsub>
 800e5f8:	f805 6b01 	strb.w	r6, [r5], #1
 800e5fc:	9e01      	ldr	r6, [sp, #4]
 800e5fe:	9f03      	ldr	r7, [sp, #12]
 800e600:	1bae      	subs	r6, r5, r6
 800e602:	42b7      	cmp	r7, r6
 800e604:	4602      	mov	r2, r0
 800e606:	460b      	mov	r3, r1
 800e608:	d135      	bne.n	800e676 <_dtoa_r+0x6e6>
 800e60a:	f7f1 fe4f 	bl	80002ac <__adddf3>
 800e60e:	4642      	mov	r2, r8
 800e610:	464b      	mov	r3, r9
 800e612:	4606      	mov	r6, r0
 800e614:	460f      	mov	r7, r1
 800e616:	f7f2 fa8f 	bl	8000b38 <__aeabi_dcmpgt>
 800e61a:	b9d0      	cbnz	r0, 800e652 <_dtoa_r+0x6c2>
 800e61c:	4642      	mov	r2, r8
 800e61e:	464b      	mov	r3, r9
 800e620:	4630      	mov	r0, r6
 800e622:	4639      	mov	r1, r7
 800e624:	f7f2 fa60 	bl	8000ae8 <__aeabi_dcmpeq>
 800e628:	b110      	cbz	r0, 800e630 <_dtoa_r+0x6a0>
 800e62a:	f01a 0f01 	tst.w	sl, #1
 800e62e:	d110      	bne.n	800e652 <_dtoa_r+0x6c2>
 800e630:	4620      	mov	r0, r4
 800e632:	ee18 1a10 	vmov	r1, s16
 800e636:	f000 fbc5 	bl	800edc4 <_Bfree>
 800e63a:	2300      	movs	r3, #0
 800e63c:	9800      	ldr	r0, [sp, #0]
 800e63e:	702b      	strb	r3, [r5, #0]
 800e640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e642:	3001      	adds	r0, #1
 800e644:	6018      	str	r0, [r3, #0]
 800e646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f43f acf1 	beq.w	800e030 <_dtoa_r+0xa0>
 800e64e:	601d      	str	r5, [r3, #0]
 800e650:	e4ee      	b.n	800e030 <_dtoa_r+0xa0>
 800e652:	9f00      	ldr	r7, [sp, #0]
 800e654:	462b      	mov	r3, r5
 800e656:	461d      	mov	r5, r3
 800e658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e65c:	2a39      	cmp	r2, #57	; 0x39
 800e65e:	d106      	bne.n	800e66e <_dtoa_r+0x6de>
 800e660:	9a01      	ldr	r2, [sp, #4]
 800e662:	429a      	cmp	r2, r3
 800e664:	d1f7      	bne.n	800e656 <_dtoa_r+0x6c6>
 800e666:	9901      	ldr	r1, [sp, #4]
 800e668:	2230      	movs	r2, #48	; 0x30
 800e66a:	3701      	adds	r7, #1
 800e66c:	700a      	strb	r2, [r1, #0]
 800e66e:	781a      	ldrb	r2, [r3, #0]
 800e670:	3201      	adds	r2, #1
 800e672:	701a      	strb	r2, [r3, #0]
 800e674:	e790      	b.n	800e598 <_dtoa_r+0x608>
 800e676:	4ba6      	ldr	r3, [pc, #664]	; (800e910 <_dtoa_r+0x980>)
 800e678:	2200      	movs	r2, #0
 800e67a:	f7f1 ffcd 	bl	8000618 <__aeabi_dmul>
 800e67e:	2200      	movs	r2, #0
 800e680:	2300      	movs	r3, #0
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	f7f2 fa2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d09d      	beq.n	800e5ca <_dtoa_r+0x63a>
 800e68e:	e7cf      	b.n	800e630 <_dtoa_r+0x6a0>
 800e690:	9a08      	ldr	r2, [sp, #32]
 800e692:	2a00      	cmp	r2, #0
 800e694:	f000 80d7 	beq.w	800e846 <_dtoa_r+0x8b6>
 800e698:	9a06      	ldr	r2, [sp, #24]
 800e69a:	2a01      	cmp	r2, #1
 800e69c:	f300 80ba 	bgt.w	800e814 <_dtoa_r+0x884>
 800e6a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6a2:	2a00      	cmp	r2, #0
 800e6a4:	f000 80b2 	beq.w	800e80c <_dtoa_r+0x87c>
 800e6a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e6ac:	9e07      	ldr	r6, [sp, #28]
 800e6ae:	9d04      	ldr	r5, [sp, #16]
 800e6b0:	9a04      	ldr	r2, [sp, #16]
 800e6b2:	441a      	add	r2, r3
 800e6b4:	9204      	str	r2, [sp, #16]
 800e6b6:	9a05      	ldr	r2, [sp, #20]
 800e6b8:	2101      	movs	r1, #1
 800e6ba:	441a      	add	r2, r3
 800e6bc:	4620      	mov	r0, r4
 800e6be:	9205      	str	r2, [sp, #20]
 800e6c0:	f000 fc38 	bl	800ef34 <__i2b>
 800e6c4:	4607      	mov	r7, r0
 800e6c6:	2d00      	cmp	r5, #0
 800e6c8:	dd0c      	ble.n	800e6e4 <_dtoa_r+0x754>
 800e6ca:	9b05      	ldr	r3, [sp, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dd09      	ble.n	800e6e4 <_dtoa_r+0x754>
 800e6d0:	42ab      	cmp	r3, r5
 800e6d2:	9a04      	ldr	r2, [sp, #16]
 800e6d4:	bfa8      	it	ge
 800e6d6:	462b      	movge	r3, r5
 800e6d8:	1ad2      	subs	r2, r2, r3
 800e6da:	9204      	str	r2, [sp, #16]
 800e6dc:	9a05      	ldr	r2, [sp, #20]
 800e6de:	1aed      	subs	r5, r5, r3
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	9305      	str	r3, [sp, #20]
 800e6e4:	9b07      	ldr	r3, [sp, #28]
 800e6e6:	b31b      	cbz	r3, 800e730 <_dtoa_r+0x7a0>
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f000 80af 	beq.w	800e84e <_dtoa_r+0x8be>
 800e6f0:	2e00      	cmp	r6, #0
 800e6f2:	dd13      	ble.n	800e71c <_dtoa_r+0x78c>
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	4632      	mov	r2, r6
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f000 fcdb 	bl	800f0b4 <__pow5mult>
 800e6fe:	ee18 2a10 	vmov	r2, s16
 800e702:	4601      	mov	r1, r0
 800e704:	4607      	mov	r7, r0
 800e706:	4620      	mov	r0, r4
 800e708:	f000 fc2a 	bl	800ef60 <__multiply>
 800e70c:	ee18 1a10 	vmov	r1, s16
 800e710:	4680      	mov	r8, r0
 800e712:	4620      	mov	r0, r4
 800e714:	f000 fb56 	bl	800edc4 <_Bfree>
 800e718:	ee08 8a10 	vmov	s16, r8
 800e71c:	9b07      	ldr	r3, [sp, #28]
 800e71e:	1b9a      	subs	r2, r3, r6
 800e720:	d006      	beq.n	800e730 <_dtoa_r+0x7a0>
 800e722:	ee18 1a10 	vmov	r1, s16
 800e726:	4620      	mov	r0, r4
 800e728:	f000 fcc4 	bl	800f0b4 <__pow5mult>
 800e72c:	ee08 0a10 	vmov	s16, r0
 800e730:	2101      	movs	r1, #1
 800e732:	4620      	mov	r0, r4
 800e734:	f000 fbfe 	bl	800ef34 <__i2b>
 800e738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	4606      	mov	r6, r0
 800e73e:	f340 8088 	ble.w	800e852 <_dtoa_r+0x8c2>
 800e742:	461a      	mov	r2, r3
 800e744:	4601      	mov	r1, r0
 800e746:	4620      	mov	r0, r4
 800e748:	f000 fcb4 	bl	800f0b4 <__pow5mult>
 800e74c:	9b06      	ldr	r3, [sp, #24]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	4606      	mov	r6, r0
 800e752:	f340 8081 	ble.w	800e858 <_dtoa_r+0x8c8>
 800e756:	f04f 0800 	mov.w	r8, #0
 800e75a:	6933      	ldr	r3, [r6, #16]
 800e75c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e760:	6918      	ldr	r0, [r3, #16]
 800e762:	f000 fb97 	bl	800ee94 <__hi0bits>
 800e766:	f1c0 0020 	rsb	r0, r0, #32
 800e76a:	9b05      	ldr	r3, [sp, #20]
 800e76c:	4418      	add	r0, r3
 800e76e:	f010 001f 	ands.w	r0, r0, #31
 800e772:	f000 8092 	beq.w	800e89a <_dtoa_r+0x90a>
 800e776:	f1c0 0320 	rsb	r3, r0, #32
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	f340 808a 	ble.w	800e894 <_dtoa_r+0x904>
 800e780:	f1c0 001c 	rsb	r0, r0, #28
 800e784:	9b04      	ldr	r3, [sp, #16]
 800e786:	4403      	add	r3, r0
 800e788:	9304      	str	r3, [sp, #16]
 800e78a:	9b05      	ldr	r3, [sp, #20]
 800e78c:	4403      	add	r3, r0
 800e78e:	4405      	add	r5, r0
 800e790:	9305      	str	r3, [sp, #20]
 800e792:	9b04      	ldr	r3, [sp, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	dd07      	ble.n	800e7a8 <_dtoa_r+0x818>
 800e798:	ee18 1a10 	vmov	r1, s16
 800e79c:	461a      	mov	r2, r3
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f000 fce2 	bl	800f168 <__lshift>
 800e7a4:	ee08 0a10 	vmov	s16, r0
 800e7a8:	9b05      	ldr	r3, [sp, #20]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	dd05      	ble.n	800e7ba <_dtoa_r+0x82a>
 800e7ae:	4631      	mov	r1, r6
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fcd8 	bl	800f168 <__lshift>
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d06e      	beq.n	800e89e <_dtoa_r+0x90e>
 800e7c0:	ee18 0a10 	vmov	r0, s16
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	f000 fd3f 	bl	800f248 <__mcmp>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	da67      	bge.n	800e89e <_dtoa_r+0x90e>
 800e7ce:	9b00      	ldr	r3, [sp, #0]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	ee18 1a10 	vmov	r1, s16
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	220a      	movs	r2, #10
 800e7da:	2300      	movs	r3, #0
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f000 fb13 	bl	800ee08 <__multadd>
 800e7e2:	9b08      	ldr	r3, [sp, #32]
 800e7e4:	ee08 0a10 	vmov	s16, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 81b1 	beq.w	800eb50 <_dtoa_r+0xbc0>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	220a      	movs	r2, #10
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f000 fb07 	bl	800ee08 <__multadd>
 800e7fa:	9b02      	ldr	r3, [sp, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	4607      	mov	r7, r0
 800e800:	f300 808e 	bgt.w	800e920 <_dtoa_r+0x990>
 800e804:	9b06      	ldr	r3, [sp, #24]
 800e806:	2b02      	cmp	r3, #2
 800e808:	dc51      	bgt.n	800e8ae <_dtoa_r+0x91e>
 800e80a:	e089      	b.n	800e920 <_dtoa_r+0x990>
 800e80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e80e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e812:	e74b      	b.n	800e6ac <_dtoa_r+0x71c>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	1e5e      	subs	r6, r3, #1
 800e818:	9b07      	ldr	r3, [sp, #28]
 800e81a:	42b3      	cmp	r3, r6
 800e81c:	bfbf      	itttt	lt
 800e81e:	9b07      	ldrlt	r3, [sp, #28]
 800e820:	9607      	strlt	r6, [sp, #28]
 800e822:	1af2      	sublt	r2, r6, r3
 800e824:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e826:	bfb6      	itet	lt
 800e828:	189b      	addlt	r3, r3, r2
 800e82a:	1b9e      	subge	r6, r3, r6
 800e82c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e82e:	9b03      	ldr	r3, [sp, #12]
 800e830:	bfb8      	it	lt
 800e832:	2600      	movlt	r6, #0
 800e834:	2b00      	cmp	r3, #0
 800e836:	bfb7      	itett	lt
 800e838:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e83c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e840:	1a9d      	sublt	r5, r3, r2
 800e842:	2300      	movlt	r3, #0
 800e844:	e734      	b.n	800e6b0 <_dtoa_r+0x720>
 800e846:	9e07      	ldr	r6, [sp, #28]
 800e848:	9d04      	ldr	r5, [sp, #16]
 800e84a:	9f08      	ldr	r7, [sp, #32]
 800e84c:	e73b      	b.n	800e6c6 <_dtoa_r+0x736>
 800e84e:	9a07      	ldr	r2, [sp, #28]
 800e850:	e767      	b.n	800e722 <_dtoa_r+0x792>
 800e852:	9b06      	ldr	r3, [sp, #24]
 800e854:	2b01      	cmp	r3, #1
 800e856:	dc18      	bgt.n	800e88a <_dtoa_r+0x8fa>
 800e858:	f1ba 0f00 	cmp.w	sl, #0
 800e85c:	d115      	bne.n	800e88a <_dtoa_r+0x8fa>
 800e85e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e862:	b993      	cbnz	r3, 800e88a <_dtoa_r+0x8fa>
 800e864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e868:	0d1b      	lsrs	r3, r3, #20
 800e86a:	051b      	lsls	r3, r3, #20
 800e86c:	b183      	cbz	r3, 800e890 <_dtoa_r+0x900>
 800e86e:	9b04      	ldr	r3, [sp, #16]
 800e870:	3301      	adds	r3, #1
 800e872:	9304      	str	r3, [sp, #16]
 800e874:	9b05      	ldr	r3, [sp, #20]
 800e876:	3301      	adds	r3, #1
 800e878:	9305      	str	r3, [sp, #20]
 800e87a:	f04f 0801 	mov.w	r8, #1
 800e87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e880:	2b00      	cmp	r3, #0
 800e882:	f47f af6a 	bne.w	800e75a <_dtoa_r+0x7ca>
 800e886:	2001      	movs	r0, #1
 800e888:	e76f      	b.n	800e76a <_dtoa_r+0x7da>
 800e88a:	f04f 0800 	mov.w	r8, #0
 800e88e:	e7f6      	b.n	800e87e <_dtoa_r+0x8ee>
 800e890:	4698      	mov	r8, r3
 800e892:	e7f4      	b.n	800e87e <_dtoa_r+0x8ee>
 800e894:	f43f af7d 	beq.w	800e792 <_dtoa_r+0x802>
 800e898:	4618      	mov	r0, r3
 800e89a:	301c      	adds	r0, #28
 800e89c:	e772      	b.n	800e784 <_dtoa_r+0x7f4>
 800e89e:	9b03      	ldr	r3, [sp, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	dc37      	bgt.n	800e914 <_dtoa_r+0x984>
 800e8a4:	9b06      	ldr	r3, [sp, #24]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	dd34      	ble.n	800e914 <_dtoa_r+0x984>
 800e8aa:	9b03      	ldr	r3, [sp, #12]
 800e8ac:	9302      	str	r3, [sp, #8]
 800e8ae:	9b02      	ldr	r3, [sp, #8]
 800e8b0:	b96b      	cbnz	r3, 800e8ce <_dtoa_r+0x93e>
 800e8b2:	4631      	mov	r1, r6
 800e8b4:	2205      	movs	r2, #5
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 faa6 	bl	800ee08 <__multadd>
 800e8bc:	4601      	mov	r1, r0
 800e8be:	4606      	mov	r6, r0
 800e8c0:	ee18 0a10 	vmov	r0, s16
 800e8c4:	f000 fcc0 	bl	800f248 <__mcmp>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	f73f adbb 	bgt.w	800e444 <_dtoa_r+0x4b4>
 800e8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d0:	9d01      	ldr	r5, [sp, #4]
 800e8d2:	43db      	mvns	r3, r3
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	4631      	mov	r1, r6
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f000 fa71 	bl	800edc4 <_Bfree>
 800e8e2:	2f00      	cmp	r7, #0
 800e8e4:	f43f aea4 	beq.w	800e630 <_dtoa_r+0x6a0>
 800e8e8:	f1b8 0f00 	cmp.w	r8, #0
 800e8ec:	d005      	beq.n	800e8fa <_dtoa_r+0x96a>
 800e8ee:	45b8      	cmp	r8, r7
 800e8f0:	d003      	beq.n	800e8fa <_dtoa_r+0x96a>
 800e8f2:	4641      	mov	r1, r8
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f000 fa65 	bl	800edc4 <_Bfree>
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 fa61 	bl	800edc4 <_Bfree>
 800e902:	e695      	b.n	800e630 <_dtoa_r+0x6a0>
 800e904:	2600      	movs	r6, #0
 800e906:	4637      	mov	r7, r6
 800e908:	e7e1      	b.n	800e8ce <_dtoa_r+0x93e>
 800e90a:	9700      	str	r7, [sp, #0]
 800e90c:	4637      	mov	r7, r6
 800e90e:	e599      	b.n	800e444 <_dtoa_r+0x4b4>
 800e910:	40240000 	.word	0x40240000
 800e914:	9b08      	ldr	r3, [sp, #32]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 80ca 	beq.w	800eab0 <_dtoa_r+0xb20>
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	9302      	str	r3, [sp, #8]
 800e920:	2d00      	cmp	r5, #0
 800e922:	dd05      	ble.n	800e930 <_dtoa_r+0x9a0>
 800e924:	4639      	mov	r1, r7
 800e926:	462a      	mov	r2, r5
 800e928:	4620      	mov	r0, r4
 800e92a:	f000 fc1d 	bl	800f168 <__lshift>
 800e92e:	4607      	mov	r7, r0
 800e930:	f1b8 0f00 	cmp.w	r8, #0
 800e934:	d05b      	beq.n	800e9ee <_dtoa_r+0xa5e>
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	4620      	mov	r0, r4
 800e93a:	f000 fa03 	bl	800ed44 <_Balloc>
 800e93e:	4605      	mov	r5, r0
 800e940:	b928      	cbnz	r0, 800e94e <_dtoa_r+0x9be>
 800e942:	4b87      	ldr	r3, [pc, #540]	; (800eb60 <_dtoa_r+0xbd0>)
 800e944:	4602      	mov	r2, r0
 800e946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e94a:	f7ff bb3b 	b.w	800dfc4 <_dtoa_r+0x34>
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	3202      	adds	r2, #2
 800e952:	0092      	lsls	r2, r2, #2
 800e954:	f107 010c 	add.w	r1, r7, #12
 800e958:	300c      	adds	r0, #12
 800e95a:	f7fe fbbe 	bl	800d0da <memcpy>
 800e95e:	2201      	movs	r2, #1
 800e960:	4629      	mov	r1, r5
 800e962:	4620      	mov	r0, r4
 800e964:	f000 fc00 	bl	800f168 <__lshift>
 800e968:	9b01      	ldr	r3, [sp, #4]
 800e96a:	f103 0901 	add.w	r9, r3, #1
 800e96e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e972:	4413      	add	r3, r2
 800e974:	9305      	str	r3, [sp, #20]
 800e976:	f00a 0301 	and.w	r3, sl, #1
 800e97a:	46b8      	mov	r8, r7
 800e97c:	9304      	str	r3, [sp, #16]
 800e97e:	4607      	mov	r7, r0
 800e980:	4631      	mov	r1, r6
 800e982:	ee18 0a10 	vmov	r0, s16
 800e986:	f7ff fa77 	bl	800de78 <quorem>
 800e98a:	4641      	mov	r1, r8
 800e98c:	9002      	str	r0, [sp, #8]
 800e98e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e992:	ee18 0a10 	vmov	r0, s16
 800e996:	f000 fc57 	bl	800f248 <__mcmp>
 800e99a:	463a      	mov	r2, r7
 800e99c:	9003      	str	r0, [sp, #12]
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f000 fc6d 	bl	800f280 <__mdiff>
 800e9a6:	68c2      	ldr	r2, [r0, #12]
 800e9a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	bb02      	cbnz	r2, 800e9f2 <_dtoa_r+0xa62>
 800e9b0:	4601      	mov	r1, r0
 800e9b2:	ee18 0a10 	vmov	r0, s16
 800e9b6:	f000 fc47 	bl	800f248 <__mcmp>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	4629      	mov	r1, r5
 800e9be:	4620      	mov	r0, r4
 800e9c0:	9207      	str	r2, [sp, #28]
 800e9c2:	f000 f9ff 	bl	800edc4 <_Bfree>
 800e9c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e9ca:	ea43 0102 	orr.w	r1, r3, r2
 800e9ce:	9b04      	ldr	r3, [sp, #16]
 800e9d0:	430b      	orrs	r3, r1
 800e9d2:	464d      	mov	r5, r9
 800e9d4:	d10f      	bne.n	800e9f6 <_dtoa_r+0xa66>
 800e9d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e9da:	d02a      	beq.n	800ea32 <_dtoa_r+0xaa2>
 800e9dc:	9b03      	ldr	r3, [sp, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	dd02      	ble.n	800e9e8 <_dtoa_r+0xa58>
 800e9e2:	9b02      	ldr	r3, [sp, #8]
 800e9e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e9e8:	f88b a000 	strb.w	sl, [fp]
 800e9ec:	e775      	b.n	800e8da <_dtoa_r+0x94a>
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	e7ba      	b.n	800e968 <_dtoa_r+0x9d8>
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	e7e2      	b.n	800e9bc <_dtoa_r+0xa2c>
 800e9f6:	9b03      	ldr	r3, [sp, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	db04      	blt.n	800ea06 <_dtoa_r+0xa76>
 800e9fc:	9906      	ldr	r1, [sp, #24]
 800e9fe:	430b      	orrs	r3, r1
 800ea00:	9904      	ldr	r1, [sp, #16]
 800ea02:	430b      	orrs	r3, r1
 800ea04:	d122      	bne.n	800ea4c <_dtoa_r+0xabc>
 800ea06:	2a00      	cmp	r2, #0
 800ea08:	ddee      	ble.n	800e9e8 <_dtoa_r+0xa58>
 800ea0a:	ee18 1a10 	vmov	r1, s16
 800ea0e:	2201      	movs	r2, #1
 800ea10:	4620      	mov	r0, r4
 800ea12:	f000 fba9 	bl	800f168 <__lshift>
 800ea16:	4631      	mov	r1, r6
 800ea18:	ee08 0a10 	vmov	s16, r0
 800ea1c:	f000 fc14 	bl	800f248 <__mcmp>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	dc03      	bgt.n	800ea2c <_dtoa_r+0xa9c>
 800ea24:	d1e0      	bne.n	800e9e8 <_dtoa_r+0xa58>
 800ea26:	f01a 0f01 	tst.w	sl, #1
 800ea2a:	d0dd      	beq.n	800e9e8 <_dtoa_r+0xa58>
 800ea2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea30:	d1d7      	bne.n	800e9e2 <_dtoa_r+0xa52>
 800ea32:	2339      	movs	r3, #57	; 0x39
 800ea34:	f88b 3000 	strb.w	r3, [fp]
 800ea38:	462b      	mov	r3, r5
 800ea3a:	461d      	mov	r5, r3
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ea42:	2a39      	cmp	r2, #57	; 0x39
 800ea44:	d071      	beq.n	800eb2a <_dtoa_r+0xb9a>
 800ea46:	3201      	adds	r2, #1
 800ea48:	701a      	strb	r2, [r3, #0]
 800ea4a:	e746      	b.n	800e8da <_dtoa_r+0x94a>
 800ea4c:	2a00      	cmp	r2, #0
 800ea4e:	dd07      	ble.n	800ea60 <_dtoa_r+0xad0>
 800ea50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea54:	d0ed      	beq.n	800ea32 <_dtoa_r+0xaa2>
 800ea56:	f10a 0301 	add.w	r3, sl, #1
 800ea5a:	f88b 3000 	strb.w	r3, [fp]
 800ea5e:	e73c      	b.n	800e8da <_dtoa_r+0x94a>
 800ea60:	9b05      	ldr	r3, [sp, #20]
 800ea62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ea66:	4599      	cmp	r9, r3
 800ea68:	d047      	beq.n	800eafa <_dtoa_r+0xb6a>
 800ea6a:	ee18 1a10 	vmov	r1, s16
 800ea6e:	2300      	movs	r3, #0
 800ea70:	220a      	movs	r2, #10
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 f9c8 	bl	800ee08 <__multadd>
 800ea78:	45b8      	cmp	r8, r7
 800ea7a:	ee08 0a10 	vmov	s16, r0
 800ea7e:	f04f 0300 	mov.w	r3, #0
 800ea82:	f04f 020a 	mov.w	r2, #10
 800ea86:	4641      	mov	r1, r8
 800ea88:	4620      	mov	r0, r4
 800ea8a:	d106      	bne.n	800ea9a <_dtoa_r+0xb0a>
 800ea8c:	f000 f9bc 	bl	800ee08 <__multadd>
 800ea90:	4680      	mov	r8, r0
 800ea92:	4607      	mov	r7, r0
 800ea94:	f109 0901 	add.w	r9, r9, #1
 800ea98:	e772      	b.n	800e980 <_dtoa_r+0x9f0>
 800ea9a:	f000 f9b5 	bl	800ee08 <__multadd>
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	4680      	mov	r8, r0
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	220a      	movs	r2, #10
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f000 f9ae 	bl	800ee08 <__multadd>
 800eaac:	4607      	mov	r7, r0
 800eaae:	e7f1      	b.n	800ea94 <_dtoa_r+0xb04>
 800eab0:	9b03      	ldr	r3, [sp, #12]
 800eab2:	9302      	str	r3, [sp, #8]
 800eab4:	9d01      	ldr	r5, [sp, #4]
 800eab6:	ee18 0a10 	vmov	r0, s16
 800eaba:	4631      	mov	r1, r6
 800eabc:	f7ff f9dc 	bl	800de78 <quorem>
 800eac0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eac4:	9b01      	ldr	r3, [sp, #4]
 800eac6:	f805 ab01 	strb.w	sl, [r5], #1
 800eaca:	1aea      	subs	r2, r5, r3
 800eacc:	9b02      	ldr	r3, [sp, #8]
 800eace:	4293      	cmp	r3, r2
 800ead0:	dd09      	ble.n	800eae6 <_dtoa_r+0xb56>
 800ead2:	ee18 1a10 	vmov	r1, s16
 800ead6:	2300      	movs	r3, #0
 800ead8:	220a      	movs	r2, #10
 800eada:	4620      	mov	r0, r4
 800eadc:	f000 f994 	bl	800ee08 <__multadd>
 800eae0:	ee08 0a10 	vmov	s16, r0
 800eae4:	e7e7      	b.n	800eab6 <_dtoa_r+0xb26>
 800eae6:	9b02      	ldr	r3, [sp, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	bfc8      	it	gt
 800eaec:	461d      	movgt	r5, r3
 800eaee:	9b01      	ldr	r3, [sp, #4]
 800eaf0:	bfd8      	it	le
 800eaf2:	2501      	movle	r5, #1
 800eaf4:	441d      	add	r5, r3
 800eaf6:	f04f 0800 	mov.w	r8, #0
 800eafa:	ee18 1a10 	vmov	r1, s16
 800eafe:	2201      	movs	r2, #1
 800eb00:	4620      	mov	r0, r4
 800eb02:	f000 fb31 	bl	800f168 <__lshift>
 800eb06:	4631      	mov	r1, r6
 800eb08:	ee08 0a10 	vmov	s16, r0
 800eb0c:	f000 fb9c 	bl	800f248 <__mcmp>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	dc91      	bgt.n	800ea38 <_dtoa_r+0xaa8>
 800eb14:	d102      	bne.n	800eb1c <_dtoa_r+0xb8c>
 800eb16:	f01a 0f01 	tst.w	sl, #1
 800eb1a:	d18d      	bne.n	800ea38 <_dtoa_r+0xaa8>
 800eb1c:	462b      	mov	r3, r5
 800eb1e:	461d      	mov	r5, r3
 800eb20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb24:	2a30      	cmp	r2, #48	; 0x30
 800eb26:	d0fa      	beq.n	800eb1e <_dtoa_r+0xb8e>
 800eb28:	e6d7      	b.n	800e8da <_dtoa_r+0x94a>
 800eb2a:	9a01      	ldr	r2, [sp, #4]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d184      	bne.n	800ea3a <_dtoa_r+0xaaa>
 800eb30:	9b00      	ldr	r3, [sp, #0]
 800eb32:	3301      	adds	r3, #1
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	2331      	movs	r3, #49	; 0x31
 800eb38:	7013      	strb	r3, [r2, #0]
 800eb3a:	e6ce      	b.n	800e8da <_dtoa_r+0x94a>
 800eb3c:	4b09      	ldr	r3, [pc, #36]	; (800eb64 <_dtoa_r+0xbd4>)
 800eb3e:	f7ff ba95 	b.w	800e06c <_dtoa_r+0xdc>
 800eb42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f47f aa6e 	bne.w	800e026 <_dtoa_r+0x96>
 800eb4a:	4b07      	ldr	r3, [pc, #28]	; (800eb68 <_dtoa_r+0xbd8>)
 800eb4c:	f7ff ba8e 	b.w	800e06c <_dtoa_r+0xdc>
 800eb50:	9b02      	ldr	r3, [sp, #8]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	dcae      	bgt.n	800eab4 <_dtoa_r+0xb24>
 800eb56:	9b06      	ldr	r3, [sp, #24]
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	f73f aea8 	bgt.w	800e8ae <_dtoa_r+0x91e>
 800eb5e:	e7a9      	b.n	800eab4 <_dtoa_r+0xb24>
 800eb60:	08010664 	.word	0x08010664
 800eb64:	080104c0 	.word	0x080104c0
 800eb68:	080105e5 	.word	0x080105e5

0800eb6c <__sflush_r>:
 800eb6c:	898a      	ldrh	r2, [r1, #12]
 800eb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb72:	4605      	mov	r5, r0
 800eb74:	0710      	lsls	r0, r2, #28
 800eb76:	460c      	mov	r4, r1
 800eb78:	d458      	bmi.n	800ec2c <__sflush_r+0xc0>
 800eb7a:	684b      	ldr	r3, [r1, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	dc05      	bgt.n	800eb8c <__sflush_r+0x20>
 800eb80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	dc02      	bgt.n	800eb8c <__sflush_r+0x20>
 800eb86:	2000      	movs	r0, #0
 800eb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb8e:	2e00      	cmp	r6, #0
 800eb90:	d0f9      	beq.n	800eb86 <__sflush_r+0x1a>
 800eb92:	2300      	movs	r3, #0
 800eb94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb98:	682f      	ldr	r7, [r5, #0]
 800eb9a:	602b      	str	r3, [r5, #0]
 800eb9c:	d032      	beq.n	800ec04 <__sflush_r+0x98>
 800eb9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eba0:	89a3      	ldrh	r3, [r4, #12]
 800eba2:	075a      	lsls	r2, r3, #29
 800eba4:	d505      	bpl.n	800ebb2 <__sflush_r+0x46>
 800eba6:	6863      	ldr	r3, [r4, #4]
 800eba8:	1ac0      	subs	r0, r0, r3
 800ebaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebac:	b10b      	cbz	r3, 800ebb2 <__sflush_r+0x46>
 800ebae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebb0:	1ac0      	subs	r0, r0, r3
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebb8:	6a21      	ldr	r1, [r4, #32]
 800ebba:	4628      	mov	r0, r5
 800ebbc:	47b0      	blx	r6
 800ebbe:	1c43      	adds	r3, r0, #1
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	d106      	bne.n	800ebd2 <__sflush_r+0x66>
 800ebc4:	6829      	ldr	r1, [r5, #0]
 800ebc6:	291d      	cmp	r1, #29
 800ebc8:	d82c      	bhi.n	800ec24 <__sflush_r+0xb8>
 800ebca:	4a2a      	ldr	r2, [pc, #168]	; (800ec74 <__sflush_r+0x108>)
 800ebcc:	40ca      	lsrs	r2, r1
 800ebce:	07d6      	lsls	r6, r2, #31
 800ebd0:	d528      	bpl.n	800ec24 <__sflush_r+0xb8>
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	6062      	str	r2, [r4, #4]
 800ebd6:	04d9      	lsls	r1, r3, #19
 800ebd8:	6922      	ldr	r2, [r4, #16]
 800ebda:	6022      	str	r2, [r4, #0]
 800ebdc:	d504      	bpl.n	800ebe8 <__sflush_r+0x7c>
 800ebde:	1c42      	adds	r2, r0, #1
 800ebe0:	d101      	bne.n	800ebe6 <__sflush_r+0x7a>
 800ebe2:	682b      	ldr	r3, [r5, #0]
 800ebe4:	b903      	cbnz	r3, 800ebe8 <__sflush_r+0x7c>
 800ebe6:	6560      	str	r0, [r4, #84]	; 0x54
 800ebe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebea:	602f      	str	r7, [r5, #0]
 800ebec:	2900      	cmp	r1, #0
 800ebee:	d0ca      	beq.n	800eb86 <__sflush_r+0x1a>
 800ebf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebf4:	4299      	cmp	r1, r3
 800ebf6:	d002      	beq.n	800ebfe <__sflush_r+0x92>
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f000 fc3d 	bl	800f478 <_free_r>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	6360      	str	r0, [r4, #52]	; 0x34
 800ec02:	e7c1      	b.n	800eb88 <__sflush_r+0x1c>
 800ec04:	6a21      	ldr	r1, [r4, #32]
 800ec06:	2301      	movs	r3, #1
 800ec08:	4628      	mov	r0, r5
 800ec0a:	47b0      	blx	r6
 800ec0c:	1c41      	adds	r1, r0, #1
 800ec0e:	d1c7      	bne.n	800eba0 <__sflush_r+0x34>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d0c4      	beq.n	800eba0 <__sflush_r+0x34>
 800ec16:	2b1d      	cmp	r3, #29
 800ec18:	d001      	beq.n	800ec1e <__sflush_r+0xb2>
 800ec1a:	2b16      	cmp	r3, #22
 800ec1c:	d101      	bne.n	800ec22 <__sflush_r+0xb6>
 800ec1e:	602f      	str	r7, [r5, #0]
 800ec20:	e7b1      	b.n	800eb86 <__sflush_r+0x1a>
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec28:	81a3      	strh	r3, [r4, #12]
 800ec2a:	e7ad      	b.n	800eb88 <__sflush_r+0x1c>
 800ec2c:	690f      	ldr	r7, [r1, #16]
 800ec2e:	2f00      	cmp	r7, #0
 800ec30:	d0a9      	beq.n	800eb86 <__sflush_r+0x1a>
 800ec32:	0793      	lsls	r3, r2, #30
 800ec34:	680e      	ldr	r6, [r1, #0]
 800ec36:	bf08      	it	eq
 800ec38:	694b      	ldreq	r3, [r1, #20]
 800ec3a:	600f      	str	r7, [r1, #0]
 800ec3c:	bf18      	it	ne
 800ec3e:	2300      	movne	r3, #0
 800ec40:	eba6 0807 	sub.w	r8, r6, r7
 800ec44:	608b      	str	r3, [r1, #8]
 800ec46:	f1b8 0f00 	cmp.w	r8, #0
 800ec4a:	dd9c      	ble.n	800eb86 <__sflush_r+0x1a>
 800ec4c:	6a21      	ldr	r1, [r4, #32]
 800ec4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec50:	4643      	mov	r3, r8
 800ec52:	463a      	mov	r2, r7
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b0      	blx	r6
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	dc06      	bgt.n	800ec6a <__sflush_r+0xfe>
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	f04f 30ff 	mov.w	r0, #4294967295
 800ec68:	e78e      	b.n	800eb88 <__sflush_r+0x1c>
 800ec6a:	4407      	add	r7, r0
 800ec6c:	eba8 0800 	sub.w	r8, r8, r0
 800ec70:	e7e9      	b.n	800ec46 <__sflush_r+0xda>
 800ec72:	bf00      	nop
 800ec74:	20400001 	.word	0x20400001

0800ec78 <_fflush_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	690b      	ldr	r3, [r1, #16]
 800ec7c:	4605      	mov	r5, r0
 800ec7e:	460c      	mov	r4, r1
 800ec80:	b913      	cbnz	r3, 800ec88 <_fflush_r+0x10>
 800ec82:	2500      	movs	r5, #0
 800ec84:	4628      	mov	r0, r5
 800ec86:	bd38      	pop	{r3, r4, r5, pc}
 800ec88:	b118      	cbz	r0, 800ec92 <_fflush_r+0x1a>
 800ec8a:	6983      	ldr	r3, [r0, #24]
 800ec8c:	b90b      	cbnz	r3, 800ec92 <_fflush_r+0x1a>
 800ec8e:	f7fe f95f 	bl	800cf50 <__sinit>
 800ec92:	4b14      	ldr	r3, [pc, #80]	; (800ece4 <_fflush_r+0x6c>)
 800ec94:	429c      	cmp	r4, r3
 800ec96:	d11b      	bne.n	800ecd0 <_fflush_r+0x58>
 800ec98:	686c      	ldr	r4, [r5, #4]
 800ec9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0ef      	beq.n	800ec82 <_fflush_r+0xa>
 800eca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eca4:	07d0      	lsls	r0, r2, #31
 800eca6:	d404      	bmi.n	800ecb2 <_fflush_r+0x3a>
 800eca8:	0599      	lsls	r1, r3, #22
 800ecaa:	d402      	bmi.n	800ecb2 <_fflush_r+0x3a>
 800ecac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecae:	f7fe fa12 	bl	800d0d6 <__retarget_lock_acquire_recursive>
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f7ff ff59 	bl	800eb6c <__sflush_r>
 800ecba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecbc:	07da      	lsls	r2, r3, #31
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	d4e0      	bmi.n	800ec84 <_fflush_r+0xc>
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	059b      	lsls	r3, r3, #22
 800ecc6:	d4dd      	bmi.n	800ec84 <_fflush_r+0xc>
 800ecc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecca:	f7fe fa05 	bl	800d0d8 <__retarget_lock_release_recursive>
 800ecce:	e7d9      	b.n	800ec84 <_fflush_r+0xc>
 800ecd0:	4b05      	ldr	r3, [pc, #20]	; (800ece8 <_fflush_r+0x70>)
 800ecd2:	429c      	cmp	r4, r3
 800ecd4:	d101      	bne.n	800ecda <_fflush_r+0x62>
 800ecd6:	68ac      	ldr	r4, [r5, #8]
 800ecd8:	e7df      	b.n	800ec9a <_fflush_r+0x22>
 800ecda:	4b04      	ldr	r3, [pc, #16]	; (800ecec <_fflush_r+0x74>)
 800ecdc:	429c      	cmp	r4, r3
 800ecde:	bf08      	it	eq
 800ece0:	68ec      	ldreq	r4, [r5, #12]
 800ece2:	e7da      	b.n	800ec9a <_fflush_r+0x22>
 800ece4:	0801046c 	.word	0x0801046c
 800ece8:	0801048c 	.word	0x0801048c
 800ecec:	0801044c 	.word	0x0801044c

0800ecf0 <_localeconv_r>:
 800ecf0:	4800      	ldr	r0, [pc, #0]	; (800ecf4 <_localeconv_r+0x4>)
 800ecf2:	4770      	bx	lr
 800ecf4:	20000260 	.word	0x20000260

0800ecf8 <_lseek_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	4d07      	ldr	r5, [pc, #28]	; (800ed18 <_lseek_r+0x20>)
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	4608      	mov	r0, r1
 800ed00:	4611      	mov	r1, r2
 800ed02:	2200      	movs	r2, #0
 800ed04:	602a      	str	r2, [r5, #0]
 800ed06:	461a      	mov	r2, r3
 800ed08:	f7f2 ff7a 	bl	8001c00 <_lseek>
 800ed0c:	1c43      	adds	r3, r0, #1
 800ed0e:	d102      	bne.n	800ed16 <_lseek_r+0x1e>
 800ed10:	682b      	ldr	r3, [r5, #0]
 800ed12:	b103      	cbz	r3, 800ed16 <_lseek_r+0x1e>
 800ed14:	6023      	str	r3, [r4, #0]
 800ed16:	bd38      	pop	{r3, r4, r5, pc}
 800ed18:	2000afe0 	.word	0x2000afe0

0800ed1c <malloc>:
 800ed1c:	4b02      	ldr	r3, [pc, #8]	; (800ed28 <malloc+0xc>)
 800ed1e:	4601      	mov	r1, r0
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	f7fe ba11 	b.w	800d148 <_malloc_r>
 800ed26:	bf00      	nop
 800ed28:	2000010c 	.word	0x2000010c

0800ed2c <__malloc_lock>:
 800ed2c:	4801      	ldr	r0, [pc, #4]	; (800ed34 <__malloc_lock+0x8>)
 800ed2e:	f7fe b9d2 	b.w	800d0d6 <__retarget_lock_acquire_recursive>
 800ed32:	bf00      	nop
 800ed34:	2000afd4 	.word	0x2000afd4

0800ed38 <__malloc_unlock>:
 800ed38:	4801      	ldr	r0, [pc, #4]	; (800ed40 <__malloc_unlock+0x8>)
 800ed3a:	f7fe b9cd 	b.w	800d0d8 <__retarget_lock_release_recursive>
 800ed3e:	bf00      	nop
 800ed40:	2000afd4 	.word	0x2000afd4

0800ed44 <_Balloc>:
 800ed44:	b570      	push	{r4, r5, r6, lr}
 800ed46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed48:	4604      	mov	r4, r0
 800ed4a:	460d      	mov	r5, r1
 800ed4c:	b976      	cbnz	r6, 800ed6c <_Balloc+0x28>
 800ed4e:	2010      	movs	r0, #16
 800ed50:	f7ff ffe4 	bl	800ed1c <malloc>
 800ed54:	4602      	mov	r2, r0
 800ed56:	6260      	str	r0, [r4, #36]	; 0x24
 800ed58:	b920      	cbnz	r0, 800ed64 <_Balloc+0x20>
 800ed5a:	4b18      	ldr	r3, [pc, #96]	; (800edbc <_Balloc+0x78>)
 800ed5c:	4818      	ldr	r0, [pc, #96]	; (800edc0 <_Balloc+0x7c>)
 800ed5e:	2166      	movs	r1, #102	; 0x66
 800ed60:	f000 fd44 	bl	800f7ec <__assert_func>
 800ed64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed68:	6006      	str	r6, [r0, #0]
 800ed6a:	60c6      	str	r6, [r0, #12]
 800ed6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed6e:	68f3      	ldr	r3, [r6, #12]
 800ed70:	b183      	cbz	r3, 800ed94 <_Balloc+0x50>
 800ed72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed7a:	b9b8      	cbnz	r0, 800edac <_Balloc+0x68>
 800ed7c:	2101      	movs	r1, #1
 800ed7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ed82:	1d72      	adds	r2, r6, #5
 800ed84:	0092      	lsls	r2, r2, #2
 800ed86:	4620      	mov	r0, r4
 800ed88:	f000 fb60 	bl	800f44c <_calloc_r>
 800ed8c:	b160      	cbz	r0, 800eda8 <_Balloc+0x64>
 800ed8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed92:	e00e      	b.n	800edb2 <_Balloc+0x6e>
 800ed94:	2221      	movs	r2, #33	; 0x21
 800ed96:	2104      	movs	r1, #4
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f000 fb57 	bl	800f44c <_calloc_r>
 800ed9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eda0:	60f0      	str	r0, [r6, #12]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1e4      	bne.n	800ed72 <_Balloc+0x2e>
 800eda8:	2000      	movs	r0, #0
 800edaa:	bd70      	pop	{r4, r5, r6, pc}
 800edac:	6802      	ldr	r2, [r0, #0]
 800edae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edb2:	2300      	movs	r3, #0
 800edb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edb8:	e7f7      	b.n	800edaa <_Balloc+0x66>
 800edba:	bf00      	nop
 800edbc:	080105f2 	.word	0x080105f2
 800edc0:	08010675 	.word	0x08010675

0800edc4 <_Bfree>:
 800edc4:	b570      	push	{r4, r5, r6, lr}
 800edc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edc8:	4605      	mov	r5, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	b976      	cbnz	r6, 800edec <_Bfree+0x28>
 800edce:	2010      	movs	r0, #16
 800edd0:	f7ff ffa4 	bl	800ed1c <malloc>
 800edd4:	4602      	mov	r2, r0
 800edd6:	6268      	str	r0, [r5, #36]	; 0x24
 800edd8:	b920      	cbnz	r0, 800ede4 <_Bfree+0x20>
 800edda:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <_Bfree+0x3c>)
 800eddc:	4809      	ldr	r0, [pc, #36]	; (800ee04 <_Bfree+0x40>)
 800edde:	218a      	movs	r1, #138	; 0x8a
 800ede0:	f000 fd04 	bl	800f7ec <__assert_func>
 800ede4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ede8:	6006      	str	r6, [r0, #0]
 800edea:	60c6      	str	r6, [r0, #12]
 800edec:	b13c      	cbz	r4, 800edfe <_Bfree+0x3a>
 800edee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800edf0:	6862      	ldr	r2, [r4, #4]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800edf8:	6021      	str	r1, [r4, #0]
 800edfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	080105f2 	.word	0x080105f2
 800ee04:	08010675 	.word	0x08010675

0800ee08 <__multadd>:
 800ee08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0c:	690d      	ldr	r5, [r1, #16]
 800ee0e:	4607      	mov	r7, r0
 800ee10:	460c      	mov	r4, r1
 800ee12:	461e      	mov	r6, r3
 800ee14:	f101 0c14 	add.w	ip, r1, #20
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ee1e:	b299      	uxth	r1, r3
 800ee20:	fb02 6101 	mla	r1, r2, r1, r6
 800ee24:	0c1e      	lsrs	r6, r3, #16
 800ee26:	0c0b      	lsrs	r3, r1, #16
 800ee28:	fb02 3306 	mla	r3, r2, r6, r3
 800ee2c:	b289      	uxth	r1, r1
 800ee2e:	3001      	adds	r0, #1
 800ee30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee34:	4285      	cmp	r5, r0
 800ee36:	f84c 1b04 	str.w	r1, [ip], #4
 800ee3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee3e:	dcec      	bgt.n	800ee1a <__multadd+0x12>
 800ee40:	b30e      	cbz	r6, 800ee86 <__multadd+0x7e>
 800ee42:	68a3      	ldr	r3, [r4, #8]
 800ee44:	42ab      	cmp	r3, r5
 800ee46:	dc19      	bgt.n	800ee7c <__multadd+0x74>
 800ee48:	6861      	ldr	r1, [r4, #4]
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	3101      	adds	r1, #1
 800ee4e:	f7ff ff79 	bl	800ed44 <_Balloc>
 800ee52:	4680      	mov	r8, r0
 800ee54:	b928      	cbnz	r0, 800ee62 <__multadd+0x5a>
 800ee56:	4602      	mov	r2, r0
 800ee58:	4b0c      	ldr	r3, [pc, #48]	; (800ee8c <__multadd+0x84>)
 800ee5a:	480d      	ldr	r0, [pc, #52]	; (800ee90 <__multadd+0x88>)
 800ee5c:	21b5      	movs	r1, #181	; 0xb5
 800ee5e:	f000 fcc5 	bl	800f7ec <__assert_func>
 800ee62:	6922      	ldr	r2, [r4, #16]
 800ee64:	3202      	adds	r2, #2
 800ee66:	f104 010c 	add.w	r1, r4, #12
 800ee6a:	0092      	lsls	r2, r2, #2
 800ee6c:	300c      	adds	r0, #12
 800ee6e:	f7fe f934 	bl	800d0da <memcpy>
 800ee72:	4621      	mov	r1, r4
 800ee74:	4638      	mov	r0, r7
 800ee76:	f7ff ffa5 	bl	800edc4 <_Bfree>
 800ee7a:	4644      	mov	r4, r8
 800ee7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee80:	3501      	adds	r5, #1
 800ee82:	615e      	str	r6, [r3, #20]
 800ee84:	6125      	str	r5, [r4, #16]
 800ee86:	4620      	mov	r0, r4
 800ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee8c:	08010664 	.word	0x08010664
 800ee90:	08010675 	.word	0x08010675

0800ee94 <__hi0bits>:
 800ee94:	0c03      	lsrs	r3, r0, #16
 800ee96:	041b      	lsls	r3, r3, #16
 800ee98:	b9d3      	cbnz	r3, 800eed0 <__hi0bits+0x3c>
 800ee9a:	0400      	lsls	r0, r0, #16
 800ee9c:	2310      	movs	r3, #16
 800ee9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eea2:	bf04      	itt	eq
 800eea4:	0200      	lsleq	r0, r0, #8
 800eea6:	3308      	addeq	r3, #8
 800eea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eeac:	bf04      	itt	eq
 800eeae:	0100      	lsleq	r0, r0, #4
 800eeb0:	3304      	addeq	r3, #4
 800eeb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eeb6:	bf04      	itt	eq
 800eeb8:	0080      	lsleq	r0, r0, #2
 800eeba:	3302      	addeq	r3, #2
 800eebc:	2800      	cmp	r0, #0
 800eebe:	db05      	blt.n	800eecc <__hi0bits+0x38>
 800eec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eec4:	f103 0301 	add.w	r3, r3, #1
 800eec8:	bf08      	it	eq
 800eeca:	2320      	moveq	r3, #32
 800eecc:	4618      	mov	r0, r3
 800eece:	4770      	bx	lr
 800eed0:	2300      	movs	r3, #0
 800eed2:	e7e4      	b.n	800ee9e <__hi0bits+0xa>

0800eed4 <__lo0bits>:
 800eed4:	6803      	ldr	r3, [r0, #0]
 800eed6:	f013 0207 	ands.w	r2, r3, #7
 800eeda:	4601      	mov	r1, r0
 800eedc:	d00b      	beq.n	800eef6 <__lo0bits+0x22>
 800eede:	07da      	lsls	r2, r3, #31
 800eee0:	d423      	bmi.n	800ef2a <__lo0bits+0x56>
 800eee2:	0798      	lsls	r0, r3, #30
 800eee4:	bf49      	itett	mi
 800eee6:	085b      	lsrmi	r3, r3, #1
 800eee8:	089b      	lsrpl	r3, r3, #2
 800eeea:	2001      	movmi	r0, #1
 800eeec:	600b      	strmi	r3, [r1, #0]
 800eeee:	bf5c      	itt	pl
 800eef0:	600b      	strpl	r3, [r1, #0]
 800eef2:	2002      	movpl	r0, #2
 800eef4:	4770      	bx	lr
 800eef6:	b298      	uxth	r0, r3
 800eef8:	b9a8      	cbnz	r0, 800ef26 <__lo0bits+0x52>
 800eefa:	0c1b      	lsrs	r3, r3, #16
 800eefc:	2010      	movs	r0, #16
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	b90a      	cbnz	r2, 800ef06 <__lo0bits+0x32>
 800ef02:	3008      	adds	r0, #8
 800ef04:	0a1b      	lsrs	r3, r3, #8
 800ef06:	071a      	lsls	r2, r3, #28
 800ef08:	bf04      	itt	eq
 800ef0a:	091b      	lsreq	r3, r3, #4
 800ef0c:	3004      	addeq	r0, #4
 800ef0e:	079a      	lsls	r2, r3, #30
 800ef10:	bf04      	itt	eq
 800ef12:	089b      	lsreq	r3, r3, #2
 800ef14:	3002      	addeq	r0, #2
 800ef16:	07da      	lsls	r2, r3, #31
 800ef18:	d403      	bmi.n	800ef22 <__lo0bits+0x4e>
 800ef1a:	085b      	lsrs	r3, r3, #1
 800ef1c:	f100 0001 	add.w	r0, r0, #1
 800ef20:	d005      	beq.n	800ef2e <__lo0bits+0x5a>
 800ef22:	600b      	str	r3, [r1, #0]
 800ef24:	4770      	bx	lr
 800ef26:	4610      	mov	r0, r2
 800ef28:	e7e9      	b.n	800eefe <__lo0bits+0x2a>
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	4770      	bx	lr
 800ef2e:	2020      	movs	r0, #32
 800ef30:	4770      	bx	lr
	...

0800ef34 <__i2b>:
 800ef34:	b510      	push	{r4, lr}
 800ef36:	460c      	mov	r4, r1
 800ef38:	2101      	movs	r1, #1
 800ef3a:	f7ff ff03 	bl	800ed44 <_Balloc>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	b928      	cbnz	r0, 800ef4e <__i2b+0x1a>
 800ef42:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <__i2b+0x24>)
 800ef44:	4805      	ldr	r0, [pc, #20]	; (800ef5c <__i2b+0x28>)
 800ef46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ef4a:	f000 fc4f 	bl	800f7ec <__assert_func>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	6144      	str	r4, [r0, #20]
 800ef52:	6103      	str	r3, [r0, #16]
 800ef54:	bd10      	pop	{r4, pc}
 800ef56:	bf00      	nop
 800ef58:	08010664 	.word	0x08010664
 800ef5c:	08010675 	.word	0x08010675

0800ef60 <__multiply>:
 800ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef64:	4691      	mov	r9, r2
 800ef66:	690a      	ldr	r2, [r1, #16]
 800ef68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	bfb8      	it	lt
 800ef70:	460b      	movlt	r3, r1
 800ef72:	460c      	mov	r4, r1
 800ef74:	bfbc      	itt	lt
 800ef76:	464c      	movlt	r4, r9
 800ef78:	4699      	movlt	r9, r3
 800ef7a:	6927      	ldr	r7, [r4, #16]
 800ef7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ef80:	68a3      	ldr	r3, [r4, #8]
 800ef82:	6861      	ldr	r1, [r4, #4]
 800ef84:	eb07 060a 	add.w	r6, r7, sl
 800ef88:	42b3      	cmp	r3, r6
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	bfb8      	it	lt
 800ef8e:	3101      	addlt	r1, #1
 800ef90:	f7ff fed8 	bl	800ed44 <_Balloc>
 800ef94:	b930      	cbnz	r0, 800efa4 <__multiply+0x44>
 800ef96:	4602      	mov	r2, r0
 800ef98:	4b44      	ldr	r3, [pc, #272]	; (800f0ac <__multiply+0x14c>)
 800ef9a:	4845      	ldr	r0, [pc, #276]	; (800f0b0 <__multiply+0x150>)
 800ef9c:	f240 115d 	movw	r1, #349	; 0x15d
 800efa0:	f000 fc24 	bl	800f7ec <__assert_func>
 800efa4:	f100 0514 	add.w	r5, r0, #20
 800efa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800efac:	462b      	mov	r3, r5
 800efae:	2200      	movs	r2, #0
 800efb0:	4543      	cmp	r3, r8
 800efb2:	d321      	bcc.n	800eff8 <__multiply+0x98>
 800efb4:	f104 0314 	add.w	r3, r4, #20
 800efb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800efbc:	f109 0314 	add.w	r3, r9, #20
 800efc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800efc4:	9202      	str	r2, [sp, #8]
 800efc6:	1b3a      	subs	r2, r7, r4
 800efc8:	3a15      	subs	r2, #21
 800efca:	f022 0203 	bic.w	r2, r2, #3
 800efce:	3204      	adds	r2, #4
 800efd0:	f104 0115 	add.w	r1, r4, #21
 800efd4:	428f      	cmp	r7, r1
 800efd6:	bf38      	it	cc
 800efd8:	2204      	movcc	r2, #4
 800efda:	9201      	str	r2, [sp, #4]
 800efdc:	9a02      	ldr	r2, [sp, #8]
 800efde:	9303      	str	r3, [sp, #12]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d80c      	bhi.n	800effe <__multiply+0x9e>
 800efe4:	2e00      	cmp	r6, #0
 800efe6:	dd03      	ble.n	800eff0 <__multiply+0x90>
 800efe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800efec:	2b00      	cmp	r3, #0
 800efee:	d05a      	beq.n	800f0a6 <__multiply+0x146>
 800eff0:	6106      	str	r6, [r0, #16]
 800eff2:	b005      	add	sp, #20
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff8:	f843 2b04 	str.w	r2, [r3], #4
 800effc:	e7d8      	b.n	800efb0 <__multiply+0x50>
 800effe:	f8b3 a000 	ldrh.w	sl, [r3]
 800f002:	f1ba 0f00 	cmp.w	sl, #0
 800f006:	d024      	beq.n	800f052 <__multiply+0xf2>
 800f008:	f104 0e14 	add.w	lr, r4, #20
 800f00c:	46a9      	mov	r9, r5
 800f00e:	f04f 0c00 	mov.w	ip, #0
 800f012:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f016:	f8d9 1000 	ldr.w	r1, [r9]
 800f01a:	fa1f fb82 	uxth.w	fp, r2
 800f01e:	b289      	uxth	r1, r1
 800f020:	fb0a 110b 	mla	r1, sl, fp, r1
 800f024:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f028:	f8d9 2000 	ldr.w	r2, [r9]
 800f02c:	4461      	add	r1, ip
 800f02e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f032:	fb0a c20b 	mla	r2, sl, fp, ip
 800f036:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f03a:	b289      	uxth	r1, r1
 800f03c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f040:	4577      	cmp	r7, lr
 800f042:	f849 1b04 	str.w	r1, [r9], #4
 800f046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f04a:	d8e2      	bhi.n	800f012 <__multiply+0xb2>
 800f04c:	9a01      	ldr	r2, [sp, #4]
 800f04e:	f845 c002 	str.w	ip, [r5, r2]
 800f052:	9a03      	ldr	r2, [sp, #12]
 800f054:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f058:	3304      	adds	r3, #4
 800f05a:	f1b9 0f00 	cmp.w	r9, #0
 800f05e:	d020      	beq.n	800f0a2 <__multiply+0x142>
 800f060:	6829      	ldr	r1, [r5, #0]
 800f062:	f104 0c14 	add.w	ip, r4, #20
 800f066:	46ae      	mov	lr, r5
 800f068:	f04f 0a00 	mov.w	sl, #0
 800f06c:	f8bc b000 	ldrh.w	fp, [ip]
 800f070:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f074:	fb09 220b 	mla	r2, r9, fp, r2
 800f078:	4492      	add	sl, r2
 800f07a:	b289      	uxth	r1, r1
 800f07c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f080:	f84e 1b04 	str.w	r1, [lr], #4
 800f084:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f088:	f8be 1000 	ldrh.w	r1, [lr]
 800f08c:	0c12      	lsrs	r2, r2, #16
 800f08e:	fb09 1102 	mla	r1, r9, r2, r1
 800f092:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f096:	4567      	cmp	r7, ip
 800f098:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f09c:	d8e6      	bhi.n	800f06c <__multiply+0x10c>
 800f09e:	9a01      	ldr	r2, [sp, #4]
 800f0a0:	50a9      	str	r1, [r5, r2]
 800f0a2:	3504      	adds	r5, #4
 800f0a4:	e79a      	b.n	800efdc <__multiply+0x7c>
 800f0a6:	3e01      	subs	r6, #1
 800f0a8:	e79c      	b.n	800efe4 <__multiply+0x84>
 800f0aa:	bf00      	nop
 800f0ac:	08010664 	.word	0x08010664
 800f0b0:	08010675 	.word	0x08010675

0800f0b4 <__pow5mult>:
 800f0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b8:	4615      	mov	r5, r2
 800f0ba:	f012 0203 	ands.w	r2, r2, #3
 800f0be:	4606      	mov	r6, r0
 800f0c0:	460f      	mov	r7, r1
 800f0c2:	d007      	beq.n	800f0d4 <__pow5mult+0x20>
 800f0c4:	4c25      	ldr	r4, [pc, #148]	; (800f15c <__pow5mult+0xa8>)
 800f0c6:	3a01      	subs	r2, #1
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0ce:	f7ff fe9b 	bl	800ee08 <__multadd>
 800f0d2:	4607      	mov	r7, r0
 800f0d4:	10ad      	asrs	r5, r5, #2
 800f0d6:	d03d      	beq.n	800f154 <__pow5mult+0xa0>
 800f0d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f0da:	b97c      	cbnz	r4, 800f0fc <__pow5mult+0x48>
 800f0dc:	2010      	movs	r0, #16
 800f0de:	f7ff fe1d 	bl	800ed1c <malloc>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	6270      	str	r0, [r6, #36]	; 0x24
 800f0e6:	b928      	cbnz	r0, 800f0f4 <__pow5mult+0x40>
 800f0e8:	4b1d      	ldr	r3, [pc, #116]	; (800f160 <__pow5mult+0xac>)
 800f0ea:	481e      	ldr	r0, [pc, #120]	; (800f164 <__pow5mult+0xb0>)
 800f0ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f0f0:	f000 fb7c 	bl	800f7ec <__assert_func>
 800f0f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f0f8:	6004      	str	r4, [r0, #0]
 800f0fa:	60c4      	str	r4, [r0, #12]
 800f0fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f104:	b94c      	cbnz	r4, 800f11a <__pow5mult+0x66>
 800f106:	f240 2171 	movw	r1, #625	; 0x271
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7ff ff12 	bl	800ef34 <__i2b>
 800f110:	2300      	movs	r3, #0
 800f112:	f8c8 0008 	str.w	r0, [r8, #8]
 800f116:	4604      	mov	r4, r0
 800f118:	6003      	str	r3, [r0, #0]
 800f11a:	f04f 0900 	mov.w	r9, #0
 800f11e:	07eb      	lsls	r3, r5, #31
 800f120:	d50a      	bpl.n	800f138 <__pow5mult+0x84>
 800f122:	4639      	mov	r1, r7
 800f124:	4622      	mov	r2, r4
 800f126:	4630      	mov	r0, r6
 800f128:	f7ff ff1a 	bl	800ef60 <__multiply>
 800f12c:	4639      	mov	r1, r7
 800f12e:	4680      	mov	r8, r0
 800f130:	4630      	mov	r0, r6
 800f132:	f7ff fe47 	bl	800edc4 <_Bfree>
 800f136:	4647      	mov	r7, r8
 800f138:	106d      	asrs	r5, r5, #1
 800f13a:	d00b      	beq.n	800f154 <__pow5mult+0xa0>
 800f13c:	6820      	ldr	r0, [r4, #0]
 800f13e:	b938      	cbnz	r0, 800f150 <__pow5mult+0x9c>
 800f140:	4622      	mov	r2, r4
 800f142:	4621      	mov	r1, r4
 800f144:	4630      	mov	r0, r6
 800f146:	f7ff ff0b 	bl	800ef60 <__multiply>
 800f14a:	6020      	str	r0, [r4, #0]
 800f14c:	f8c0 9000 	str.w	r9, [r0]
 800f150:	4604      	mov	r4, r0
 800f152:	e7e4      	b.n	800f11e <__pow5mult+0x6a>
 800f154:	4638      	mov	r0, r7
 800f156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f15a:	bf00      	nop
 800f15c:	080107c8 	.word	0x080107c8
 800f160:	080105f2 	.word	0x080105f2
 800f164:	08010675 	.word	0x08010675

0800f168 <__lshift>:
 800f168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f16c:	460c      	mov	r4, r1
 800f16e:	6849      	ldr	r1, [r1, #4]
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f176:	68a3      	ldr	r3, [r4, #8]
 800f178:	4607      	mov	r7, r0
 800f17a:	4691      	mov	r9, r2
 800f17c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f180:	f108 0601 	add.w	r6, r8, #1
 800f184:	42b3      	cmp	r3, r6
 800f186:	db0b      	blt.n	800f1a0 <__lshift+0x38>
 800f188:	4638      	mov	r0, r7
 800f18a:	f7ff fddb 	bl	800ed44 <_Balloc>
 800f18e:	4605      	mov	r5, r0
 800f190:	b948      	cbnz	r0, 800f1a6 <__lshift+0x3e>
 800f192:	4602      	mov	r2, r0
 800f194:	4b2a      	ldr	r3, [pc, #168]	; (800f240 <__lshift+0xd8>)
 800f196:	482b      	ldr	r0, [pc, #172]	; (800f244 <__lshift+0xdc>)
 800f198:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f19c:	f000 fb26 	bl	800f7ec <__assert_func>
 800f1a0:	3101      	adds	r1, #1
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	e7ee      	b.n	800f184 <__lshift+0x1c>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f100 0114 	add.w	r1, r0, #20
 800f1ac:	f100 0210 	add.w	r2, r0, #16
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	4553      	cmp	r3, sl
 800f1b4:	db37      	blt.n	800f226 <__lshift+0xbe>
 800f1b6:	6920      	ldr	r0, [r4, #16]
 800f1b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1bc:	f104 0314 	add.w	r3, r4, #20
 800f1c0:	f019 091f 	ands.w	r9, r9, #31
 800f1c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f1cc:	d02f      	beq.n	800f22e <__lshift+0xc6>
 800f1ce:	f1c9 0e20 	rsb	lr, r9, #32
 800f1d2:	468a      	mov	sl, r1
 800f1d4:	f04f 0c00 	mov.w	ip, #0
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	fa02 f209 	lsl.w	r2, r2, r9
 800f1de:	ea42 020c 	orr.w	r2, r2, ip
 800f1e2:	f84a 2b04 	str.w	r2, [sl], #4
 800f1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ea:	4298      	cmp	r0, r3
 800f1ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f1f0:	d8f2      	bhi.n	800f1d8 <__lshift+0x70>
 800f1f2:	1b03      	subs	r3, r0, r4
 800f1f4:	3b15      	subs	r3, #21
 800f1f6:	f023 0303 	bic.w	r3, r3, #3
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	f104 0215 	add.w	r2, r4, #21
 800f200:	4290      	cmp	r0, r2
 800f202:	bf38      	it	cc
 800f204:	2304      	movcc	r3, #4
 800f206:	f841 c003 	str.w	ip, [r1, r3]
 800f20a:	f1bc 0f00 	cmp.w	ip, #0
 800f20e:	d001      	beq.n	800f214 <__lshift+0xac>
 800f210:	f108 0602 	add.w	r6, r8, #2
 800f214:	3e01      	subs	r6, #1
 800f216:	4638      	mov	r0, r7
 800f218:	612e      	str	r6, [r5, #16]
 800f21a:	4621      	mov	r1, r4
 800f21c:	f7ff fdd2 	bl	800edc4 <_Bfree>
 800f220:	4628      	mov	r0, r5
 800f222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f226:	f842 0f04 	str.w	r0, [r2, #4]!
 800f22a:	3301      	adds	r3, #1
 800f22c:	e7c1      	b.n	800f1b2 <__lshift+0x4a>
 800f22e:	3904      	subs	r1, #4
 800f230:	f853 2b04 	ldr.w	r2, [r3], #4
 800f234:	f841 2f04 	str.w	r2, [r1, #4]!
 800f238:	4298      	cmp	r0, r3
 800f23a:	d8f9      	bhi.n	800f230 <__lshift+0xc8>
 800f23c:	e7ea      	b.n	800f214 <__lshift+0xac>
 800f23e:	bf00      	nop
 800f240:	08010664 	.word	0x08010664
 800f244:	08010675 	.word	0x08010675

0800f248 <__mcmp>:
 800f248:	b530      	push	{r4, r5, lr}
 800f24a:	6902      	ldr	r2, [r0, #16]
 800f24c:	690c      	ldr	r4, [r1, #16]
 800f24e:	1b12      	subs	r2, r2, r4
 800f250:	d10e      	bne.n	800f270 <__mcmp+0x28>
 800f252:	f100 0314 	add.w	r3, r0, #20
 800f256:	3114      	adds	r1, #20
 800f258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f25c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f268:	42a5      	cmp	r5, r4
 800f26a:	d003      	beq.n	800f274 <__mcmp+0x2c>
 800f26c:	d305      	bcc.n	800f27a <__mcmp+0x32>
 800f26e:	2201      	movs	r2, #1
 800f270:	4610      	mov	r0, r2
 800f272:	bd30      	pop	{r4, r5, pc}
 800f274:	4283      	cmp	r3, r0
 800f276:	d3f3      	bcc.n	800f260 <__mcmp+0x18>
 800f278:	e7fa      	b.n	800f270 <__mcmp+0x28>
 800f27a:	f04f 32ff 	mov.w	r2, #4294967295
 800f27e:	e7f7      	b.n	800f270 <__mcmp+0x28>

0800f280 <__mdiff>:
 800f280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	460c      	mov	r4, r1
 800f286:	4606      	mov	r6, r0
 800f288:	4611      	mov	r1, r2
 800f28a:	4620      	mov	r0, r4
 800f28c:	4690      	mov	r8, r2
 800f28e:	f7ff ffdb 	bl	800f248 <__mcmp>
 800f292:	1e05      	subs	r5, r0, #0
 800f294:	d110      	bne.n	800f2b8 <__mdiff+0x38>
 800f296:	4629      	mov	r1, r5
 800f298:	4630      	mov	r0, r6
 800f29a:	f7ff fd53 	bl	800ed44 <_Balloc>
 800f29e:	b930      	cbnz	r0, 800f2ae <__mdiff+0x2e>
 800f2a0:	4b3a      	ldr	r3, [pc, #232]	; (800f38c <__mdiff+0x10c>)
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	f240 2132 	movw	r1, #562	; 0x232
 800f2a8:	4839      	ldr	r0, [pc, #228]	; (800f390 <__mdiff+0x110>)
 800f2aa:	f000 fa9f 	bl	800f7ec <__assert_func>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b8:	bfa4      	itt	ge
 800f2ba:	4643      	movge	r3, r8
 800f2bc:	46a0      	movge	r8, r4
 800f2be:	4630      	mov	r0, r6
 800f2c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f2c4:	bfa6      	itte	ge
 800f2c6:	461c      	movge	r4, r3
 800f2c8:	2500      	movge	r5, #0
 800f2ca:	2501      	movlt	r5, #1
 800f2cc:	f7ff fd3a 	bl	800ed44 <_Balloc>
 800f2d0:	b920      	cbnz	r0, 800f2dc <__mdiff+0x5c>
 800f2d2:	4b2e      	ldr	r3, [pc, #184]	; (800f38c <__mdiff+0x10c>)
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f2da:	e7e5      	b.n	800f2a8 <__mdiff+0x28>
 800f2dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f2e0:	6926      	ldr	r6, [r4, #16]
 800f2e2:	60c5      	str	r5, [r0, #12]
 800f2e4:	f104 0914 	add.w	r9, r4, #20
 800f2e8:	f108 0514 	add.w	r5, r8, #20
 800f2ec:	f100 0e14 	add.w	lr, r0, #20
 800f2f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f2f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f2f8:	f108 0210 	add.w	r2, r8, #16
 800f2fc:	46f2      	mov	sl, lr
 800f2fe:	2100      	movs	r1, #0
 800f300:	f859 3b04 	ldr.w	r3, [r9], #4
 800f304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f308:	fa1f f883 	uxth.w	r8, r3
 800f30c:	fa11 f18b 	uxtah	r1, r1, fp
 800f310:	0c1b      	lsrs	r3, r3, #16
 800f312:	eba1 0808 	sub.w	r8, r1, r8
 800f316:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f31a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f31e:	fa1f f888 	uxth.w	r8, r8
 800f322:	1419      	asrs	r1, r3, #16
 800f324:	454e      	cmp	r6, r9
 800f326:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f32a:	f84a 3b04 	str.w	r3, [sl], #4
 800f32e:	d8e7      	bhi.n	800f300 <__mdiff+0x80>
 800f330:	1b33      	subs	r3, r6, r4
 800f332:	3b15      	subs	r3, #21
 800f334:	f023 0303 	bic.w	r3, r3, #3
 800f338:	3304      	adds	r3, #4
 800f33a:	3415      	adds	r4, #21
 800f33c:	42a6      	cmp	r6, r4
 800f33e:	bf38      	it	cc
 800f340:	2304      	movcc	r3, #4
 800f342:	441d      	add	r5, r3
 800f344:	4473      	add	r3, lr
 800f346:	469e      	mov	lr, r3
 800f348:	462e      	mov	r6, r5
 800f34a:	4566      	cmp	r6, ip
 800f34c:	d30e      	bcc.n	800f36c <__mdiff+0xec>
 800f34e:	f10c 0203 	add.w	r2, ip, #3
 800f352:	1b52      	subs	r2, r2, r5
 800f354:	f022 0203 	bic.w	r2, r2, #3
 800f358:	3d03      	subs	r5, #3
 800f35a:	45ac      	cmp	ip, r5
 800f35c:	bf38      	it	cc
 800f35e:	2200      	movcc	r2, #0
 800f360:	441a      	add	r2, r3
 800f362:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f366:	b17b      	cbz	r3, 800f388 <__mdiff+0x108>
 800f368:	6107      	str	r7, [r0, #16]
 800f36a:	e7a3      	b.n	800f2b4 <__mdiff+0x34>
 800f36c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f370:	fa11 f288 	uxtah	r2, r1, r8
 800f374:	1414      	asrs	r4, r2, #16
 800f376:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f37a:	b292      	uxth	r2, r2
 800f37c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f380:	f84e 2b04 	str.w	r2, [lr], #4
 800f384:	1421      	asrs	r1, r4, #16
 800f386:	e7e0      	b.n	800f34a <__mdiff+0xca>
 800f388:	3f01      	subs	r7, #1
 800f38a:	e7ea      	b.n	800f362 <__mdiff+0xe2>
 800f38c:	08010664 	.word	0x08010664
 800f390:	08010675 	.word	0x08010675

0800f394 <__d2b>:
 800f394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f398:	4689      	mov	r9, r1
 800f39a:	2101      	movs	r1, #1
 800f39c:	ec57 6b10 	vmov	r6, r7, d0
 800f3a0:	4690      	mov	r8, r2
 800f3a2:	f7ff fccf 	bl	800ed44 <_Balloc>
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	b930      	cbnz	r0, 800f3b8 <__d2b+0x24>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	4b25      	ldr	r3, [pc, #148]	; (800f444 <__d2b+0xb0>)
 800f3ae:	4826      	ldr	r0, [pc, #152]	; (800f448 <__d2b+0xb4>)
 800f3b0:	f240 310a 	movw	r1, #778	; 0x30a
 800f3b4:	f000 fa1a 	bl	800f7ec <__assert_func>
 800f3b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f3bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3c0:	bb35      	cbnz	r5, 800f410 <__d2b+0x7c>
 800f3c2:	2e00      	cmp	r6, #0
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	d028      	beq.n	800f41a <__d2b+0x86>
 800f3c8:	4668      	mov	r0, sp
 800f3ca:	9600      	str	r6, [sp, #0]
 800f3cc:	f7ff fd82 	bl	800eed4 <__lo0bits>
 800f3d0:	9900      	ldr	r1, [sp, #0]
 800f3d2:	b300      	cbz	r0, 800f416 <__d2b+0x82>
 800f3d4:	9a01      	ldr	r2, [sp, #4]
 800f3d6:	f1c0 0320 	rsb	r3, r0, #32
 800f3da:	fa02 f303 	lsl.w	r3, r2, r3
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	40c2      	lsrs	r2, r0
 800f3e2:	6163      	str	r3, [r4, #20]
 800f3e4:	9201      	str	r2, [sp, #4]
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	61a3      	str	r3, [r4, #24]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	bf14      	ite	ne
 800f3ee:	2202      	movne	r2, #2
 800f3f0:	2201      	moveq	r2, #1
 800f3f2:	6122      	str	r2, [r4, #16]
 800f3f4:	b1d5      	cbz	r5, 800f42c <__d2b+0x98>
 800f3f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f3fa:	4405      	add	r5, r0
 800f3fc:	f8c9 5000 	str.w	r5, [r9]
 800f400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f404:	f8c8 0000 	str.w	r0, [r8]
 800f408:	4620      	mov	r0, r4
 800f40a:	b003      	add	sp, #12
 800f40c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f414:	e7d5      	b.n	800f3c2 <__d2b+0x2e>
 800f416:	6161      	str	r1, [r4, #20]
 800f418:	e7e5      	b.n	800f3e6 <__d2b+0x52>
 800f41a:	a801      	add	r0, sp, #4
 800f41c:	f7ff fd5a 	bl	800eed4 <__lo0bits>
 800f420:	9b01      	ldr	r3, [sp, #4]
 800f422:	6163      	str	r3, [r4, #20]
 800f424:	2201      	movs	r2, #1
 800f426:	6122      	str	r2, [r4, #16]
 800f428:	3020      	adds	r0, #32
 800f42a:	e7e3      	b.n	800f3f4 <__d2b+0x60>
 800f42c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f430:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f434:	f8c9 0000 	str.w	r0, [r9]
 800f438:	6918      	ldr	r0, [r3, #16]
 800f43a:	f7ff fd2b 	bl	800ee94 <__hi0bits>
 800f43e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f442:	e7df      	b.n	800f404 <__d2b+0x70>
 800f444:	08010664 	.word	0x08010664
 800f448:	08010675 	.word	0x08010675

0800f44c <_calloc_r>:
 800f44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f44e:	fba1 2402 	umull	r2, r4, r1, r2
 800f452:	b94c      	cbnz	r4, 800f468 <_calloc_r+0x1c>
 800f454:	4611      	mov	r1, r2
 800f456:	9201      	str	r2, [sp, #4]
 800f458:	f7fd fe76 	bl	800d148 <_malloc_r>
 800f45c:	9a01      	ldr	r2, [sp, #4]
 800f45e:	4605      	mov	r5, r0
 800f460:	b930      	cbnz	r0, 800f470 <_calloc_r+0x24>
 800f462:	4628      	mov	r0, r5
 800f464:	b003      	add	sp, #12
 800f466:	bd30      	pop	{r4, r5, pc}
 800f468:	220c      	movs	r2, #12
 800f46a:	6002      	str	r2, [r0, #0]
 800f46c:	2500      	movs	r5, #0
 800f46e:	e7f8      	b.n	800f462 <_calloc_r+0x16>
 800f470:	4621      	mov	r1, r4
 800f472:	f7fd fe40 	bl	800d0f6 <memset>
 800f476:	e7f4      	b.n	800f462 <_calloc_r+0x16>

0800f478 <_free_r>:
 800f478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f47a:	2900      	cmp	r1, #0
 800f47c:	d044      	beq.n	800f508 <_free_r+0x90>
 800f47e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f482:	9001      	str	r0, [sp, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	f1a1 0404 	sub.w	r4, r1, #4
 800f48a:	bfb8      	it	lt
 800f48c:	18e4      	addlt	r4, r4, r3
 800f48e:	f7ff fc4d 	bl	800ed2c <__malloc_lock>
 800f492:	4a1e      	ldr	r2, [pc, #120]	; (800f50c <_free_r+0x94>)
 800f494:	9801      	ldr	r0, [sp, #4]
 800f496:	6813      	ldr	r3, [r2, #0]
 800f498:	b933      	cbnz	r3, 800f4a8 <_free_r+0x30>
 800f49a:	6063      	str	r3, [r4, #4]
 800f49c:	6014      	str	r4, [r2, #0]
 800f49e:	b003      	add	sp, #12
 800f4a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4a4:	f7ff bc48 	b.w	800ed38 <__malloc_unlock>
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	d908      	bls.n	800f4be <_free_r+0x46>
 800f4ac:	6825      	ldr	r5, [r4, #0]
 800f4ae:	1961      	adds	r1, r4, r5
 800f4b0:	428b      	cmp	r3, r1
 800f4b2:	bf01      	itttt	eq
 800f4b4:	6819      	ldreq	r1, [r3, #0]
 800f4b6:	685b      	ldreq	r3, [r3, #4]
 800f4b8:	1949      	addeq	r1, r1, r5
 800f4ba:	6021      	streq	r1, [r4, #0]
 800f4bc:	e7ed      	b.n	800f49a <_free_r+0x22>
 800f4be:	461a      	mov	r2, r3
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	b10b      	cbz	r3, 800f4c8 <_free_r+0x50>
 800f4c4:	42a3      	cmp	r3, r4
 800f4c6:	d9fa      	bls.n	800f4be <_free_r+0x46>
 800f4c8:	6811      	ldr	r1, [r2, #0]
 800f4ca:	1855      	adds	r5, r2, r1
 800f4cc:	42a5      	cmp	r5, r4
 800f4ce:	d10b      	bne.n	800f4e8 <_free_r+0x70>
 800f4d0:	6824      	ldr	r4, [r4, #0]
 800f4d2:	4421      	add	r1, r4
 800f4d4:	1854      	adds	r4, r2, r1
 800f4d6:	42a3      	cmp	r3, r4
 800f4d8:	6011      	str	r1, [r2, #0]
 800f4da:	d1e0      	bne.n	800f49e <_free_r+0x26>
 800f4dc:	681c      	ldr	r4, [r3, #0]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	6053      	str	r3, [r2, #4]
 800f4e2:	4421      	add	r1, r4
 800f4e4:	6011      	str	r1, [r2, #0]
 800f4e6:	e7da      	b.n	800f49e <_free_r+0x26>
 800f4e8:	d902      	bls.n	800f4f0 <_free_r+0x78>
 800f4ea:	230c      	movs	r3, #12
 800f4ec:	6003      	str	r3, [r0, #0]
 800f4ee:	e7d6      	b.n	800f49e <_free_r+0x26>
 800f4f0:	6825      	ldr	r5, [r4, #0]
 800f4f2:	1961      	adds	r1, r4, r5
 800f4f4:	428b      	cmp	r3, r1
 800f4f6:	bf04      	itt	eq
 800f4f8:	6819      	ldreq	r1, [r3, #0]
 800f4fa:	685b      	ldreq	r3, [r3, #4]
 800f4fc:	6063      	str	r3, [r4, #4]
 800f4fe:	bf04      	itt	eq
 800f500:	1949      	addeq	r1, r1, r5
 800f502:	6021      	streq	r1, [r4, #0]
 800f504:	6054      	str	r4, [r2, #4]
 800f506:	e7ca      	b.n	800f49e <_free_r+0x26>
 800f508:	b003      	add	sp, #12
 800f50a:	bd30      	pop	{r4, r5, pc}
 800f50c:	2000afd8 	.word	0x2000afd8

0800f510 <__ssputs_r>:
 800f510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f514:	688e      	ldr	r6, [r1, #8]
 800f516:	429e      	cmp	r6, r3
 800f518:	4682      	mov	sl, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	4690      	mov	r8, r2
 800f51e:	461f      	mov	r7, r3
 800f520:	d838      	bhi.n	800f594 <__ssputs_r+0x84>
 800f522:	898a      	ldrh	r2, [r1, #12]
 800f524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f528:	d032      	beq.n	800f590 <__ssputs_r+0x80>
 800f52a:	6825      	ldr	r5, [r4, #0]
 800f52c:	6909      	ldr	r1, [r1, #16]
 800f52e:	eba5 0901 	sub.w	r9, r5, r1
 800f532:	6965      	ldr	r5, [r4, #20]
 800f534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f53c:	3301      	adds	r3, #1
 800f53e:	444b      	add	r3, r9
 800f540:	106d      	asrs	r5, r5, #1
 800f542:	429d      	cmp	r5, r3
 800f544:	bf38      	it	cc
 800f546:	461d      	movcc	r5, r3
 800f548:	0553      	lsls	r3, r2, #21
 800f54a:	d531      	bpl.n	800f5b0 <__ssputs_r+0xa0>
 800f54c:	4629      	mov	r1, r5
 800f54e:	f7fd fdfb 	bl	800d148 <_malloc_r>
 800f552:	4606      	mov	r6, r0
 800f554:	b950      	cbnz	r0, 800f56c <__ssputs_r+0x5c>
 800f556:	230c      	movs	r3, #12
 800f558:	f8ca 3000 	str.w	r3, [sl]
 800f55c:	89a3      	ldrh	r3, [r4, #12]
 800f55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f562:	81a3      	strh	r3, [r4, #12]
 800f564:	f04f 30ff 	mov.w	r0, #4294967295
 800f568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f56c:	6921      	ldr	r1, [r4, #16]
 800f56e:	464a      	mov	r2, r9
 800f570:	f7fd fdb3 	bl	800d0da <memcpy>
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f57e:	81a3      	strh	r3, [r4, #12]
 800f580:	6126      	str	r6, [r4, #16]
 800f582:	6165      	str	r5, [r4, #20]
 800f584:	444e      	add	r6, r9
 800f586:	eba5 0509 	sub.w	r5, r5, r9
 800f58a:	6026      	str	r6, [r4, #0]
 800f58c:	60a5      	str	r5, [r4, #8]
 800f58e:	463e      	mov	r6, r7
 800f590:	42be      	cmp	r6, r7
 800f592:	d900      	bls.n	800f596 <__ssputs_r+0x86>
 800f594:	463e      	mov	r6, r7
 800f596:	6820      	ldr	r0, [r4, #0]
 800f598:	4632      	mov	r2, r6
 800f59a:	4641      	mov	r1, r8
 800f59c:	f000 f968 	bl	800f870 <memmove>
 800f5a0:	68a3      	ldr	r3, [r4, #8]
 800f5a2:	1b9b      	subs	r3, r3, r6
 800f5a4:	60a3      	str	r3, [r4, #8]
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	4433      	add	r3, r6
 800f5aa:	6023      	str	r3, [r4, #0]
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	e7db      	b.n	800f568 <__ssputs_r+0x58>
 800f5b0:	462a      	mov	r2, r5
 800f5b2:	f000 f977 	bl	800f8a4 <_realloc_r>
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d1e1      	bne.n	800f580 <__ssputs_r+0x70>
 800f5bc:	6921      	ldr	r1, [r4, #16]
 800f5be:	4650      	mov	r0, sl
 800f5c0:	f7ff ff5a 	bl	800f478 <_free_r>
 800f5c4:	e7c7      	b.n	800f556 <__ssputs_r+0x46>
	...

0800f5c8 <_svfiprintf_r>:
 800f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5cc:	4698      	mov	r8, r3
 800f5ce:	898b      	ldrh	r3, [r1, #12]
 800f5d0:	061b      	lsls	r3, r3, #24
 800f5d2:	b09d      	sub	sp, #116	; 0x74
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	460d      	mov	r5, r1
 800f5d8:	4614      	mov	r4, r2
 800f5da:	d50e      	bpl.n	800f5fa <_svfiprintf_r+0x32>
 800f5dc:	690b      	ldr	r3, [r1, #16]
 800f5de:	b963      	cbnz	r3, 800f5fa <_svfiprintf_r+0x32>
 800f5e0:	2140      	movs	r1, #64	; 0x40
 800f5e2:	f7fd fdb1 	bl	800d148 <_malloc_r>
 800f5e6:	6028      	str	r0, [r5, #0]
 800f5e8:	6128      	str	r0, [r5, #16]
 800f5ea:	b920      	cbnz	r0, 800f5f6 <_svfiprintf_r+0x2e>
 800f5ec:	230c      	movs	r3, #12
 800f5ee:	603b      	str	r3, [r7, #0]
 800f5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f4:	e0d1      	b.n	800f79a <_svfiprintf_r+0x1d2>
 800f5f6:	2340      	movs	r3, #64	; 0x40
 800f5f8:	616b      	str	r3, [r5, #20]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5fe:	2320      	movs	r3, #32
 800f600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f604:	f8cd 800c 	str.w	r8, [sp, #12]
 800f608:	2330      	movs	r3, #48	; 0x30
 800f60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f7b4 <_svfiprintf_r+0x1ec>
 800f60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f612:	f04f 0901 	mov.w	r9, #1
 800f616:	4623      	mov	r3, r4
 800f618:	469a      	mov	sl, r3
 800f61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f61e:	b10a      	cbz	r2, 800f624 <_svfiprintf_r+0x5c>
 800f620:	2a25      	cmp	r2, #37	; 0x25
 800f622:	d1f9      	bne.n	800f618 <_svfiprintf_r+0x50>
 800f624:	ebba 0b04 	subs.w	fp, sl, r4
 800f628:	d00b      	beq.n	800f642 <_svfiprintf_r+0x7a>
 800f62a:	465b      	mov	r3, fp
 800f62c:	4622      	mov	r2, r4
 800f62e:	4629      	mov	r1, r5
 800f630:	4638      	mov	r0, r7
 800f632:	f7ff ff6d 	bl	800f510 <__ssputs_r>
 800f636:	3001      	adds	r0, #1
 800f638:	f000 80aa 	beq.w	800f790 <_svfiprintf_r+0x1c8>
 800f63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f63e:	445a      	add	r2, fp
 800f640:	9209      	str	r2, [sp, #36]	; 0x24
 800f642:	f89a 3000 	ldrb.w	r3, [sl]
 800f646:	2b00      	cmp	r3, #0
 800f648:	f000 80a2 	beq.w	800f790 <_svfiprintf_r+0x1c8>
 800f64c:	2300      	movs	r3, #0
 800f64e:	f04f 32ff 	mov.w	r2, #4294967295
 800f652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f656:	f10a 0a01 	add.w	sl, sl, #1
 800f65a:	9304      	str	r3, [sp, #16]
 800f65c:	9307      	str	r3, [sp, #28]
 800f65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f662:	931a      	str	r3, [sp, #104]	; 0x68
 800f664:	4654      	mov	r4, sl
 800f666:	2205      	movs	r2, #5
 800f668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f66c:	4851      	ldr	r0, [pc, #324]	; (800f7b4 <_svfiprintf_r+0x1ec>)
 800f66e:	f7f0 fdc7 	bl	8000200 <memchr>
 800f672:	9a04      	ldr	r2, [sp, #16]
 800f674:	b9d8      	cbnz	r0, 800f6ae <_svfiprintf_r+0xe6>
 800f676:	06d0      	lsls	r0, r2, #27
 800f678:	bf44      	itt	mi
 800f67a:	2320      	movmi	r3, #32
 800f67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f680:	0711      	lsls	r1, r2, #28
 800f682:	bf44      	itt	mi
 800f684:	232b      	movmi	r3, #43	; 0x2b
 800f686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f68a:	f89a 3000 	ldrb.w	r3, [sl]
 800f68e:	2b2a      	cmp	r3, #42	; 0x2a
 800f690:	d015      	beq.n	800f6be <_svfiprintf_r+0xf6>
 800f692:	9a07      	ldr	r2, [sp, #28]
 800f694:	4654      	mov	r4, sl
 800f696:	2000      	movs	r0, #0
 800f698:	f04f 0c0a 	mov.w	ip, #10
 800f69c:	4621      	mov	r1, r4
 800f69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6a2:	3b30      	subs	r3, #48	; 0x30
 800f6a4:	2b09      	cmp	r3, #9
 800f6a6:	d94e      	bls.n	800f746 <_svfiprintf_r+0x17e>
 800f6a8:	b1b0      	cbz	r0, 800f6d8 <_svfiprintf_r+0x110>
 800f6aa:	9207      	str	r2, [sp, #28]
 800f6ac:	e014      	b.n	800f6d8 <_svfiprintf_r+0x110>
 800f6ae:	eba0 0308 	sub.w	r3, r0, r8
 800f6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	9304      	str	r3, [sp, #16]
 800f6ba:	46a2      	mov	sl, r4
 800f6bc:	e7d2      	b.n	800f664 <_svfiprintf_r+0x9c>
 800f6be:	9b03      	ldr	r3, [sp, #12]
 800f6c0:	1d19      	adds	r1, r3, #4
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	9103      	str	r1, [sp, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	bfbb      	ittet	lt
 800f6ca:	425b      	neglt	r3, r3
 800f6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f6d0:	9307      	strge	r3, [sp, #28]
 800f6d2:	9307      	strlt	r3, [sp, #28]
 800f6d4:	bfb8      	it	lt
 800f6d6:	9204      	strlt	r2, [sp, #16]
 800f6d8:	7823      	ldrb	r3, [r4, #0]
 800f6da:	2b2e      	cmp	r3, #46	; 0x2e
 800f6dc:	d10c      	bne.n	800f6f8 <_svfiprintf_r+0x130>
 800f6de:	7863      	ldrb	r3, [r4, #1]
 800f6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f6e2:	d135      	bne.n	800f750 <_svfiprintf_r+0x188>
 800f6e4:	9b03      	ldr	r3, [sp, #12]
 800f6e6:	1d1a      	adds	r2, r3, #4
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	9203      	str	r2, [sp, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	bfb8      	it	lt
 800f6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6f4:	3402      	adds	r4, #2
 800f6f6:	9305      	str	r3, [sp, #20]
 800f6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f7c4 <_svfiprintf_r+0x1fc>
 800f6fc:	7821      	ldrb	r1, [r4, #0]
 800f6fe:	2203      	movs	r2, #3
 800f700:	4650      	mov	r0, sl
 800f702:	f7f0 fd7d 	bl	8000200 <memchr>
 800f706:	b140      	cbz	r0, 800f71a <_svfiprintf_r+0x152>
 800f708:	2340      	movs	r3, #64	; 0x40
 800f70a:	eba0 000a 	sub.w	r0, r0, sl
 800f70e:	fa03 f000 	lsl.w	r0, r3, r0
 800f712:	9b04      	ldr	r3, [sp, #16]
 800f714:	4303      	orrs	r3, r0
 800f716:	3401      	adds	r4, #1
 800f718:	9304      	str	r3, [sp, #16]
 800f71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f71e:	4826      	ldr	r0, [pc, #152]	; (800f7b8 <_svfiprintf_r+0x1f0>)
 800f720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f724:	2206      	movs	r2, #6
 800f726:	f7f0 fd6b 	bl	8000200 <memchr>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d038      	beq.n	800f7a0 <_svfiprintf_r+0x1d8>
 800f72e:	4b23      	ldr	r3, [pc, #140]	; (800f7bc <_svfiprintf_r+0x1f4>)
 800f730:	bb1b      	cbnz	r3, 800f77a <_svfiprintf_r+0x1b2>
 800f732:	9b03      	ldr	r3, [sp, #12]
 800f734:	3307      	adds	r3, #7
 800f736:	f023 0307 	bic.w	r3, r3, #7
 800f73a:	3308      	adds	r3, #8
 800f73c:	9303      	str	r3, [sp, #12]
 800f73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f740:	4433      	add	r3, r6
 800f742:	9309      	str	r3, [sp, #36]	; 0x24
 800f744:	e767      	b.n	800f616 <_svfiprintf_r+0x4e>
 800f746:	fb0c 3202 	mla	r2, ip, r2, r3
 800f74a:	460c      	mov	r4, r1
 800f74c:	2001      	movs	r0, #1
 800f74e:	e7a5      	b.n	800f69c <_svfiprintf_r+0xd4>
 800f750:	2300      	movs	r3, #0
 800f752:	3401      	adds	r4, #1
 800f754:	9305      	str	r3, [sp, #20]
 800f756:	4619      	mov	r1, r3
 800f758:	f04f 0c0a 	mov.w	ip, #10
 800f75c:	4620      	mov	r0, r4
 800f75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f762:	3a30      	subs	r2, #48	; 0x30
 800f764:	2a09      	cmp	r2, #9
 800f766:	d903      	bls.n	800f770 <_svfiprintf_r+0x1a8>
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0c5      	beq.n	800f6f8 <_svfiprintf_r+0x130>
 800f76c:	9105      	str	r1, [sp, #20]
 800f76e:	e7c3      	b.n	800f6f8 <_svfiprintf_r+0x130>
 800f770:	fb0c 2101 	mla	r1, ip, r1, r2
 800f774:	4604      	mov	r4, r0
 800f776:	2301      	movs	r3, #1
 800f778:	e7f0      	b.n	800f75c <_svfiprintf_r+0x194>
 800f77a:	ab03      	add	r3, sp, #12
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	462a      	mov	r2, r5
 800f780:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <_svfiprintf_r+0x1f8>)
 800f782:	a904      	add	r1, sp, #16
 800f784:	4638      	mov	r0, r7
 800f786:	f7fd fdf3 	bl	800d370 <_printf_float>
 800f78a:	1c42      	adds	r2, r0, #1
 800f78c:	4606      	mov	r6, r0
 800f78e:	d1d6      	bne.n	800f73e <_svfiprintf_r+0x176>
 800f790:	89ab      	ldrh	r3, [r5, #12]
 800f792:	065b      	lsls	r3, r3, #25
 800f794:	f53f af2c 	bmi.w	800f5f0 <_svfiprintf_r+0x28>
 800f798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f79a:	b01d      	add	sp, #116	; 0x74
 800f79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a0:	ab03      	add	r3, sp, #12
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	462a      	mov	r2, r5
 800f7a6:	4b06      	ldr	r3, [pc, #24]	; (800f7c0 <_svfiprintf_r+0x1f8>)
 800f7a8:	a904      	add	r1, sp, #16
 800f7aa:	4638      	mov	r0, r7
 800f7ac:	f7fe f884 	bl	800d8b8 <_printf_i>
 800f7b0:	e7eb      	b.n	800f78a <_svfiprintf_r+0x1c2>
 800f7b2:	bf00      	nop
 800f7b4:	080107d4 	.word	0x080107d4
 800f7b8:	080107de 	.word	0x080107de
 800f7bc:	0800d371 	.word	0x0800d371
 800f7c0:	0800f511 	.word	0x0800f511
 800f7c4:	080107da 	.word	0x080107da

0800f7c8 <_read_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4d07      	ldr	r5, [pc, #28]	; (800f7e8 <_read_r+0x20>)
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	4608      	mov	r0, r1
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	602a      	str	r2, [r5, #0]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	f7f2 f9b2 	bl	8001b40 <_read>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_read_r+0x1e>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_read_r+0x1e>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	2000afe0 	.word	0x2000afe0

0800f7ec <__assert_func>:
 800f7ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7ee:	4614      	mov	r4, r2
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4b09      	ldr	r3, [pc, #36]	; (800f818 <__assert_func+0x2c>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4605      	mov	r5, r0
 800f7f8:	68d8      	ldr	r0, [r3, #12]
 800f7fa:	b14c      	cbz	r4, 800f810 <__assert_func+0x24>
 800f7fc:	4b07      	ldr	r3, [pc, #28]	; (800f81c <__assert_func+0x30>)
 800f7fe:	9100      	str	r1, [sp, #0]
 800f800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f804:	4906      	ldr	r1, [pc, #24]	; (800f820 <__assert_func+0x34>)
 800f806:	462b      	mov	r3, r5
 800f808:	f000 f80e 	bl	800f828 <fiprintf>
 800f80c:	f000 faa0 	bl	800fd50 <abort>
 800f810:	4b04      	ldr	r3, [pc, #16]	; (800f824 <__assert_func+0x38>)
 800f812:	461c      	mov	r4, r3
 800f814:	e7f3      	b.n	800f7fe <__assert_func+0x12>
 800f816:	bf00      	nop
 800f818:	2000010c 	.word	0x2000010c
 800f81c:	080107e5 	.word	0x080107e5
 800f820:	080107f2 	.word	0x080107f2
 800f824:	08010820 	.word	0x08010820

0800f828 <fiprintf>:
 800f828:	b40e      	push	{r1, r2, r3}
 800f82a:	b503      	push	{r0, r1, lr}
 800f82c:	4601      	mov	r1, r0
 800f82e:	ab03      	add	r3, sp, #12
 800f830:	4805      	ldr	r0, [pc, #20]	; (800f848 <fiprintf+0x20>)
 800f832:	f853 2b04 	ldr.w	r2, [r3], #4
 800f836:	6800      	ldr	r0, [r0, #0]
 800f838:	9301      	str	r3, [sp, #4]
 800f83a:	f000 f88b 	bl	800f954 <_vfiprintf_r>
 800f83e:	b002      	add	sp, #8
 800f840:	f85d eb04 	ldr.w	lr, [sp], #4
 800f844:	b003      	add	sp, #12
 800f846:	4770      	bx	lr
 800f848:	2000010c 	.word	0x2000010c

0800f84c <__ascii_mbtowc>:
 800f84c:	b082      	sub	sp, #8
 800f84e:	b901      	cbnz	r1, 800f852 <__ascii_mbtowc+0x6>
 800f850:	a901      	add	r1, sp, #4
 800f852:	b142      	cbz	r2, 800f866 <__ascii_mbtowc+0x1a>
 800f854:	b14b      	cbz	r3, 800f86a <__ascii_mbtowc+0x1e>
 800f856:	7813      	ldrb	r3, [r2, #0]
 800f858:	600b      	str	r3, [r1, #0]
 800f85a:	7812      	ldrb	r2, [r2, #0]
 800f85c:	1e10      	subs	r0, r2, #0
 800f85e:	bf18      	it	ne
 800f860:	2001      	movne	r0, #1
 800f862:	b002      	add	sp, #8
 800f864:	4770      	bx	lr
 800f866:	4610      	mov	r0, r2
 800f868:	e7fb      	b.n	800f862 <__ascii_mbtowc+0x16>
 800f86a:	f06f 0001 	mvn.w	r0, #1
 800f86e:	e7f8      	b.n	800f862 <__ascii_mbtowc+0x16>

0800f870 <memmove>:
 800f870:	4288      	cmp	r0, r1
 800f872:	b510      	push	{r4, lr}
 800f874:	eb01 0402 	add.w	r4, r1, r2
 800f878:	d902      	bls.n	800f880 <memmove+0x10>
 800f87a:	4284      	cmp	r4, r0
 800f87c:	4623      	mov	r3, r4
 800f87e:	d807      	bhi.n	800f890 <memmove+0x20>
 800f880:	1e43      	subs	r3, r0, #1
 800f882:	42a1      	cmp	r1, r4
 800f884:	d008      	beq.n	800f898 <memmove+0x28>
 800f886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f88a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f88e:	e7f8      	b.n	800f882 <memmove+0x12>
 800f890:	4402      	add	r2, r0
 800f892:	4601      	mov	r1, r0
 800f894:	428a      	cmp	r2, r1
 800f896:	d100      	bne.n	800f89a <memmove+0x2a>
 800f898:	bd10      	pop	{r4, pc}
 800f89a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f89e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8a2:	e7f7      	b.n	800f894 <memmove+0x24>

0800f8a4 <_realloc_r>:
 800f8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	4614      	mov	r4, r2
 800f8ac:	460e      	mov	r6, r1
 800f8ae:	b921      	cbnz	r1, 800f8ba <_realloc_r+0x16>
 800f8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b4:	4611      	mov	r1, r2
 800f8b6:	f7fd bc47 	b.w	800d148 <_malloc_r>
 800f8ba:	b92a      	cbnz	r2, 800f8c8 <_realloc_r+0x24>
 800f8bc:	f7ff fddc 	bl	800f478 <_free_r>
 800f8c0:	4625      	mov	r5, r4
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c8:	f000 faae 	bl	800fe28 <_malloc_usable_size_r>
 800f8cc:	4284      	cmp	r4, r0
 800f8ce:	4607      	mov	r7, r0
 800f8d0:	d802      	bhi.n	800f8d8 <_realloc_r+0x34>
 800f8d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8d6:	d812      	bhi.n	800f8fe <_realloc_r+0x5a>
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4640      	mov	r0, r8
 800f8dc:	f7fd fc34 	bl	800d148 <_malloc_r>
 800f8e0:	4605      	mov	r5, r0
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d0ed      	beq.n	800f8c2 <_realloc_r+0x1e>
 800f8e6:	42bc      	cmp	r4, r7
 800f8e8:	4622      	mov	r2, r4
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	bf28      	it	cs
 800f8ee:	463a      	movcs	r2, r7
 800f8f0:	f7fd fbf3 	bl	800d0da <memcpy>
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	f7ff fdbe 	bl	800f478 <_free_r>
 800f8fc:	e7e1      	b.n	800f8c2 <_realloc_r+0x1e>
 800f8fe:	4635      	mov	r5, r6
 800f900:	e7df      	b.n	800f8c2 <_realloc_r+0x1e>

0800f902 <__sfputc_r>:
 800f902:	6893      	ldr	r3, [r2, #8]
 800f904:	3b01      	subs	r3, #1
 800f906:	2b00      	cmp	r3, #0
 800f908:	b410      	push	{r4}
 800f90a:	6093      	str	r3, [r2, #8]
 800f90c:	da08      	bge.n	800f920 <__sfputc_r+0x1e>
 800f90e:	6994      	ldr	r4, [r2, #24]
 800f910:	42a3      	cmp	r3, r4
 800f912:	db01      	blt.n	800f918 <__sfputc_r+0x16>
 800f914:	290a      	cmp	r1, #10
 800f916:	d103      	bne.n	800f920 <__sfputc_r+0x1e>
 800f918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f91c:	f000 b94a 	b.w	800fbb4 <__swbuf_r>
 800f920:	6813      	ldr	r3, [r2, #0]
 800f922:	1c58      	adds	r0, r3, #1
 800f924:	6010      	str	r0, [r2, #0]
 800f926:	7019      	strb	r1, [r3, #0]
 800f928:	4608      	mov	r0, r1
 800f92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <__sfputs_r>:
 800f930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f932:	4606      	mov	r6, r0
 800f934:	460f      	mov	r7, r1
 800f936:	4614      	mov	r4, r2
 800f938:	18d5      	adds	r5, r2, r3
 800f93a:	42ac      	cmp	r4, r5
 800f93c:	d101      	bne.n	800f942 <__sfputs_r+0x12>
 800f93e:	2000      	movs	r0, #0
 800f940:	e007      	b.n	800f952 <__sfputs_r+0x22>
 800f942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f946:	463a      	mov	r2, r7
 800f948:	4630      	mov	r0, r6
 800f94a:	f7ff ffda 	bl	800f902 <__sfputc_r>
 800f94e:	1c43      	adds	r3, r0, #1
 800f950:	d1f3      	bne.n	800f93a <__sfputs_r+0xa>
 800f952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f954 <_vfiprintf_r>:
 800f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f958:	460d      	mov	r5, r1
 800f95a:	b09d      	sub	sp, #116	; 0x74
 800f95c:	4614      	mov	r4, r2
 800f95e:	4698      	mov	r8, r3
 800f960:	4606      	mov	r6, r0
 800f962:	b118      	cbz	r0, 800f96c <_vfiprintf_r+0x18>
 800f964:	6983      	ldr	r3, [r0, #24]
 800f966:	b90b      	cbnz	r3, 800f96c <_vfiprintf_r+0x18>
 800f968:	f7fd faf2 	bl	800cf50 <__sinit>
 800f96c:	4b89      	ldr	r3, [pc, #548]	; (800fb94 <_vfiprintf_r+0x240>)
 800f96e:	429d      	cmp	r5, r3
 800f970:	d11b      	bne.n	800f9aa <_vfiprintf_r+0x56>
 800f972:	6875      	ldr	r5, [r6, #4]
 800f974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f976:	07d9      	lsls	r1, r3, #31
 800f978:	d405      	bmi.n	800f986 <_vfiprintf_r+0x32>
 800f97a:	89ab      	ldrh	r3, [r5, #12]
 800f97c:	059a      	lsls	r2, r3, #22
 800f97e:	d402      	bmi.n	800f986 <_vfiprintf_r+0x32>
 800f980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f982:	f7fd fba8 	bl	800d0d6 <__retarget_lock_acquire_recursive>
 800f986:	89ab      	ldrh	r3, [r5, #12]
 800f988:	071b      	lsls	r3, r3, #28
 800f98a:	d501      	bpl.n	800f990 <_vfiprintf_r+0x3c>
 800f98c:	692b      	ldr	r3, [r5, #16]
 800f98e:	b9eb      	cbnz	r3, 800f9cc <_vfiprintf_r+0x78>
 800f990:	4629      	mov	r1, r5
 800f992:	4630      	mov	r0, r6
 800f994:	f000 f96e 	bl	800fc74 <__swsetup_r>
 800f998:	b1c0      	cbz	r0, 800f9cc <_vfiprintf_r+0x78>
 800f99a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f99c:	07dc      	lsls	r4, r3, #31
 800f99e:	d50e      	bpl.n	800f9be <_vfiprintf_r+0x6a>
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	b01d      	add	sp, #116	; 0x74
 800f9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9aa:	4b7b      	ldr	r3, [pc, #492]	; (800fb98 <_vfiprintf_r+0x244>)
 800f9ac:	429d      	cmp	r5, r3
 800f9ae:	d101      	bne.n	800f9b4 <_vfiprintf_r+0x60>
 800f9b0:	68b5      	ldr	r5, [r6, #8]
 800f9b2:	e7df      	b.n	800f974 <_vfiprintf_r+0x20>
 800f9b4:	4b79      	ldr	r3, [pc, #484]	; (800fb9c <_vfiprintf_r+0x248>)
 800f9b6:	429d      	cmp	r5, r3
 800f9b8:	bf08      	it	eq
 800f9ba:	68f5      	ldreq	r5, [r6, #12]
 800f9bc:	e7da      	b.n	800f974 <_vfiprintf_r+0x20>
 800f9be:	89ab      	ldrh	r3, [r5, #12]
 800f9c0:	0598      	lsls	r0, r3, #22
 800f9c2:	d4ed      	bmi.n	800f9a0 <_vfiprintf_r+0x4c>
 800f9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9c6:	f7fd fb87 	bl	800d0d8 <__retarget_lock_release_recursive>
 800f9ca:	e7e9      	b.n	800f9a0 <_vfiprintf_r+0x4c>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f9d0:	2320      	movs	r3, #32
 800f9d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9da:	2330      	movs	r3, #48	; 0x30
 800f9dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fba0 <_vfiprintf_r+0x24c>
 800f9e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9e4:	f04f 0901 	mov.w	r9, #1
 800f9e8:	4623      	mov	r3, r4
 800f9ea:	469a      	mov	sl, r3
 800f9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9f0:	b10a      	cbz	r2, 800f9f6 <_vfiprintf_r+0xa2>
 800f9f2:	2a25      	cmp	r2, #37	; 0x25
 800f9f4:	d1f9      	bne.n	800f9ea <_vfiprintf_r+0x96>
 800f9f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f9fa:	d00b      	beq.n	800fa14 <_vfiprintf_r+0xc0>
 800f9fc:	465b      	mov	r3, fp
 800f9fe:	4622      	mov	r2, r4
 800fa00:	4629      	mov	r1, r5
 800fa02:	4630      	mov	r0, r6
 800fa04:	f7ff ff94 	bl	800f930 <__sfputs_r>
 800fa08:	3001      	adds	r0, #1
 800fa0a:	f000 80aa 	beq.w	800fb62 <_vfiprintf_r+0x20e>
 800fa0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa10:	445a      	add	r2, fp
 800fa12:	9209      	str	r2, [sp, #36]	; 0x24
 800fa14:	f89a 3000 	ldrb.w	r3, [sl]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f000 80a2 	beq.w	800fb62 <_vfiprintf_r+0x20e>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	f04f 32ff 	mov.w	r2, #4294967295
 800fa24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa28:	f10a 0a01 	add.w	sl, sl, #1
 800fa2c:	9304      	str	r3, [sp, #16]
 800fa2e:	9307      	str	r3, [sp, #28]
 800fa30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa34:	931a      	str	r3, [sp, #104]	; 0x68
 800fa36:	4654      	mov	r4, sl
 800fa38:	2205      	movs	r2, #5
 800fa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa3e:	4858      	ldr	r0, [pc, #352]	; (800fba0 <_vfiprintf_r+0x24c>)
 800fa40:	f7f0 fbde 	bl	8000200 <memchr>
 800fa44:	9a04      	ldr	r2, [sp, #16]
 800fa46:	b9d8      	cbnz	r0, 800fa80 <_vfiprintf_r+0x12c>
 800fa48:	06d1      	lsls	r1, r2, #27
 800fa4a:	bf44      	itt	mi
 800fa4c:	2320      	movmi	r3, #32
 800fa4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa52:	0713      	lsls	r3, r2, #28
 800fa54:	bf44      	itt	mi
 800fa56:	232b      	movmi	r3, #43	; 0x2b
 800fa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fa60:	2b2a      	cmp	r3, #42	; 0x2a
 800fa62:	d015      	beq.n	800fa90 <_vfiprintf_r+0x13c>
 800fa64:	9a07      	ldr	r2, [sp, #28]
 800fa66:	4654      	mov	r4, sl
 800fa68:	2000      	movs	r0, #0
 800fa6a:	f04f 0c0a 	mov.w	ip, #10
 800fa6e:	4621      	mov	r1, r4
 800fa70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa74:	3b30      	subs	r3, #48	; 0x30
 800fa76:	2b09      	cmp	r3, #9
 800fa78:	d94e      	bls.n	800fb18 <_vfiprintf_r+0x1c4>
 800fa7a:	b1b0      	cbz	r0, 800faaa <_vfiprintf_r+0x156>
 800fa7c:	9207      	str	r2, [sp, #28]
 800fa7e:	e014      	b.n	800faaa <_vfiprintf_r+0x156>
 800fa80:	eba0 0308 	sub.w	r3, r0, r8
 800fa84:	fa09 f303 	lsl.w	r3, r9, r3
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	9304      	str	r3, [sp, #16]
 800fa8c:	46a2      	mov	sl, r4
 800fa8e:	e7d2      	b.n	800fa36 <_vfiprintf_r+0xe2>
 800fa90:	9b03      	ldr	r3, [sp, #12]
 800fa92:	1d19      	adds	r1, r3, #4
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	9103      	str	r1, [sp, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	bfbb      	ittet	lt
 800fa9c:	425b      	neglt	r3, r3
 800fa9e:	f042 0202 	orrlt.w	r2, r2, #2
 800faa2:	9307      	strge	r3, [sp, #28]
 800faa4:	9307      	strlt	r3, [sp, #28]
 800faa6:	bfb8      	it	lt
 800faa8:	9204      	strlt	r2, [sp, #16]
 800faaa:	7823      	ldrb	r3, [r4, #0]
 800faac:	2b2e      	cmp	r3, #46	; 0x2e
 800faae:	d10c      	bne.n	800faca <_vfiprintf_r+0x176>
 800fab0:	7863      	ldrb	r3, [r4, #1]
 800fab2:	2b2a      	cmp	r3, #42	; 0x2a
 800fab4:	d135      	bne.n	800fb22 <_vfiprintf_r+0x1ce>
 800fab6:	9b03      	ldr	r3, [sp, #12]
 800fab8:	1d1a      	adds	r2, r3, #4
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	9203      	str	r2, [sp, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	bfb8      	it	lt
 800fac2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fac6:	3402      	adds	r4, #2
 800fac8:	9305      	str	r3, [sp, #20]
 800faca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fbb0 <_vfiprintf_r+0x25c>
 800face:	7821      	ldrb	r1, [r4, #0]
 800fad0:	2203      	movs	r2, #3
 800fad2:	4650      	mov	r0, sl
 800fad4:	f7f0 fb94 	bl	8000200 <memchr>
 800fad8:	b140      	cbz	r0, 800faec <_vfiprintf_r+0x198>
 800fada:	2340      	movs	r3, #64	; 0x40
 800fadc:	eba0 000a 	sub.w	r0, r0, sl
 800fae0:	fa03 f000 	lsl.w	r0, r3, r0
 800fae4:	9b04      	ldr	r3, [sp, #16]
 800fae6:	4303      	orrs	r3, r0
 800fae8:	3401      	adds	r4, #1
 800faea:	9304      	str	r3, [sp, #16]
 800faec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faf0:	482c      	ldr	r0, [pc, #176]	; (800fba4 <_vfiprintf_r+0x250>)
 800faf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800faf6:	2206      	movs	r2, #6
 800faf8:	f7f0 fb82 	bl	8000200 <memchr>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d03f      	beq.n	800fb80 <_vfiprintf_r+0x22c>
 800fb00:	4b29      	ldr	r3, [pc, #164]	; (800fba8 <_vfiprintf_r+0x254>)
 800fb02:	bb1b      	cbnz	r3, 800fb4c <_vfiprintf_r+0x1f8>
 800fb04:	9b03      	ldr	r3, [sp, #12]
 800fb06:	3307      	adds	r3, #7
 800fb08:	f023 0307 	bic.w	r3, r3, #7
 800fb0c:	3308      	adds	r3, #8
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb12:	443b      	add	r3, r7
 800fb14:	9309      	str	r3, [sp, #36]	; 0x24
 800fb16:	e767      	b.n	800f9e8 <_vfiprintf_r+0x94>
 800fb18:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb1c:	460c      	mov	r4, r1
 800fb1e:	2001      	movs	r0, #1
 800fb20:	e7a5      	b.n	800fa6e <_vfiprintf_r+0x11a>
 800fb22:	2300      	movs	r3, #0
 800fb24:	3401      	adds	r4, #1
 800fb26:	9305      	str	r3, [sp, #20]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	f04f 0c0a 	mov.w	ip, #10
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb34:	3a30      	subs	r2, #48	; 0x30
 800fb36:	2a09      	cmp	r2, #9
 800fb38:	d903      	bls.n	800fb42 <_vfiprintf_r+0x1ee>
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d0c5      	beq.n	800faca <_vfiprintf_r+0x176>
 800fb3e:	9105      	str	r1, [sp, #20]
 800fb40:	e7c3      	b.n	800faca <_vfiprintf_r+0x176>
 800fb42:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb46:	4604      	mov	r4, r0
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e7f0      	b.n	800fb2e <_vfiprintf_r+0x1da>
 800fb4c:	ab03      	add	r3, sp, #12
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	462a      	mov	r2, r5
 800fb52:	4b16      	ldr	r3, [pc, #88]	; (800fbac <_vfiprintf_r+0x258>)
 800fb54:	a904      	add	r1, sp, #16
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7fd fc0a 	bl	800d370 <_printf_float>
 800fb5c:	4607      	mov	r7, r0
 800fb5e:	1c78      	adds	r0, r7, #1
 800fb60:	d1d6      	bne.n	800fb10 <_vfiprintf_r+0x1bc>
 800fb62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb64:	07d9      	lsls	r1, r3, #31
 800fb66:	d405      	bmi.n	800fb74 <_vfiprintf_r+0x220>
 800fb68:	89ab      	ldrh	r3, [r5, #12]
 800fb6a:	059a      	lsls	r2, r3, #22
 800fb6c:	d402      	bmi.n	800fb74 <_vfiprintf_r+0x220>
 800fb6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb70:	f7fd fab2 	bl	800d0d8 <__retarget_lock_release_recursive>
 800fb74:	89ab      	ldrh	r3, [r5, #12]
 800fb76:	065b      	lsls	r3, r3, #25
 800fb78:	f53f af12 	bmi.w	800f9a0 <_vfiprintf_r+0x4c>
 800fb7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb7e:	e711      	b.n	800f9a4 <_vfiprintf_r+0x50>
 800fb80:	ab03      	add	r3, sp, #12
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	462a      	mov	r2, r5
 800fb86:	4b09      	ldr	r3, [pc, #36]	; (800fbac <_vfiprintf_r+0x258>)
 800fb88:	a904      	add	r1, sp, #16
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f7fd fe94 	bl	800d8b8 <_printf_i>
 800fb90:	e7e4      	b.n	800fb5c <_vfiprintf_r+0x208>
 800fb92:	bf00      	nop
 800fb94:	0801046c 	.word	0x0801046c
 800fb98:	0801048c 	.word	0x0801048c
 800fb9c:	0801044c 	.word	0x0801044c
 800fba0:	080107d4 	.word	0x080107d4
 800fba4:	080107de 	.word	0x080107de
 800fba8:	0800d371 	.word	0x0800d371
 800fbac:	0800f931 	.word	0x0800f931
 800fbb0:	080107da 	.word	0x080107da

0800fbb4 <__swbuf_r>:
 800fbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbb6:	460e      	mov	r6, r1
 800fbb8:	4614      	mov	r4, r2
 800fbba:	4605      	mov	r5, r0
 800fbbc:	b118      	cbz	r0, 800fbc6 <__swbuf_r+0x12>
 800fbbe:	6983      	ldr	r3, [r0, #24]
 800fbc0:	b90b      	cbnz	r3, 800fbc6 <__swbuf_r+0x12>
 800fbc2:	f7fd f9c5 	bl	800cf50 <__sinit>
 800fbc6:	4b21      	ldr	r3, [pc, #132]	; (800fc4c <__swbuf_r+0x98>)
 800fbc8:	429c      	cmp	r4, r3
 800fbca:	d12b      	bne.n	800fc24 <__swbuf_r+0x70>
 800fbcc:	686c      	ldr	r4, [r5, #4]
 800fbce:	69a3      	ldr	r3, [r4, #24]
 800fbd0:	60a3      	str	r3, [r4, #8]
 800fbd2:	89a3      	ldrh	r3, [r4, #12]
 800fbd4:	071a      	lsls	r2, r3, #28
 800fbd6:	d52f      	bpl.n	800fc38 <__swbuf_r+0x84>
 800fbd8:	6923      	ldr	r3, [r4, #16]
 800fbda:	b36b      	cbz	r3, 800fc38 <__swbuf_r+0x84>
 800fbdc:	6923      	ldr	r3, [r4, #16]
 800fbde:	6820      	ldr	r0, [r4, #0]
 800fbe0:	1ac0      	subs	r0, r0, r3
 800fbe2:	6963      	ldr	r3, [r4, #20]
 800fbe4:	b2f6      	uxtb	r6, r6
 800fbe6:	4283      	cmp	r3, r0
 800fbe8:	4637      	mov	r7, r6
 800fbea:	dc04      	bgt.n	800fbf6 <__swbuf_r+0x42>
 800fbec:	4621      	mov	r1, r4
 800fbee:	4628      	mov	r0, r5
 800fbf0:	f7ff f842 	bl	800ec78 <_fflush_r>
 800fbf4:	bb30      	cbnz	r0, 800fc44 <__swbuf_r+0x90>
 800fbf6:	68a3      	ldr	r3, [r4, #8]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	60a3      	str	r3, [r4, #8]
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	1c5a      	adds	r2, r3, #1
 800fc00:	6022      	str	r2, [r4, #0]
 800fc02:	701e      	strb	r6, [r3, #0]
 800fc04:	6963      	ldr	r3, [r4, #20]
 800fc06:	3001      	adds	r0, #1
 800fc08:	4283      	cmp	r3, r0
 800fc0a:	d004      	beq.n	800fc16 <__swbuf_r+0x62>
 800fc0c:	89a3      	ldrh	r3, [r4, #12]
 800fc0e:	07db      	lsls	r3, r3, #31
 800fc10:	d506      	bpl.n	800fc20 <__swbuf_r+0x6c>
 800fc12:	2e0a      	cmp	r6, #10
 800fc14:	d104      	bne.n	800fc20 <__swbuf_r+0x6c>
 800fc16:	4621      	mov	r1, r4
 800fc18:	4628      	mov	r0, r5
 800fc1a:	f7ff f82d 	bl	800ec78 <_fflush_r>
 800fc1e:	b988      	cbnz	r0, 800fc44 <__swbuf_r+0x90>
 800fc20:	4638      	mov	r0, r7
 800fc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc24:	4b0a      	ldr	r3, [pc, #40]	; (800fc50 <__swbuf_r+0x9c>)
 800fc26:	429c      	cmp	r4, r3
 800fc28:	d101      	bne.n	800fc2e <__swbuf_r+0x7a>
 800fc2a:	68ac      	ldr	r4, [r5, #8]
 800fc2c:	e7cf      	b.n	800fbce <__swbuf_r+0x1a>
 800fc2e:	4b09      	ldr	r3, [pc, #36]	; (800fc54 <__swbuf_r+0xa0>)
 800fc30:	429c      	cmp	r4, r3
 800fc32:	bf08      	it	eq
 800fc34:	68ec      	ldreq	r4, [r5, #12]
 800fc36:	e7ca      	b.n	800fbce <__swbuf_r+0x1a>
 800fc38:	4621      	mov	r1, r4
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f000 f81a 	bl	800fc74 <__swsetup_r>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d0cb      	beq.n	800fbdc <__swbuf_r+0x28>
 800fc44:	f04f 37ff 	mov.w	r7, #4294967295
 800fc48:	e7ea      	b.n	800fc20 <__swbuf_r+0x6c>
 800fc4a:	bf00      	nop
 800fc4c:	0801046c 	.word	0x0801046c
 800fc50:	0801048c 	.word	0x0801048c
 800fc54:	0801044c 	.word	0x0801044c

0800fc58 <__ascii_wctomb>:
 800fc58:	b149      	cbz	r1, 800fc6e <__ascii_wctomb+0x16>
 800fc5a:	2aff      	cmp	r2, #255	; 0xff
 800fc5c:	bf85      	ittet	hi
 800fc5e:	238a      	movhi	r3, #138	; 0x8a
 800fc60:	6003      	strhi	r3, [r0, #0]
 800fc62:	700a      	strbls	r2, [r1, #0]
 800fc64:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc68:	bf98      	it	ls
 800fc6a:	2001      	movls	r0, #1
 800fc6c:	4770      	bx	lr
 800fc6e:	4608      	mov	r0, r1
 800fc70:	4770      	bx	lr
	...

0800fc74 <__swsetup_r>:
 800fc74:	4b32      	ldr	r3, [pc, #200]	; (800fd40 <__swsetup_r+0xcc>)
 800fc76:	b570      	push	{r4, r5, r6, lr}
 800fc78:	681d      	ldr	r5, [r3, #0]
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460c      	mov	r4, r1
 800fc7e:	b125      	cbz	r5, 800fc8a <__swsetup_r+0x16>
 800fc80:	69ab      	ldr	r3, [r5, #24]
 800fc82:	b913      	cbnz	r3, 800fc8a <__swsetup_r+0x16>
 800fc84:	4628      	mov	r0, r5
 800fc86:	f7fd f963 	bl	800cf50 <__sinit>
 800fc8a:	4b2e      	ldr	r3, [pc, #184]	; (800fd44 <__swsetup_r+0xd0>)
 800fc8c:	429c      	cmp	r4, r3
 800fc8e:	d10f      	bne.n	800fcb0 <__swsetup_r+0x3c>
 800fc90:	686c      	ldr	r4, [r5, #4]
 800fc92:	89a3      	ldrh	r3, [r4, #12]
 800fc94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc98:	0719      	lsls	r1, r3, #28
 800fc9a:	d42c      	bmi.n	800fcf6 <__swsetup_r+0x82>
 800fc9c:	06dd      	lsls	r5, r3, #27
 800fc9e:	d411      	bmi.n	800fcc4 <__swsetup_r+0x50>
 800fca0:	2309      	movs	r3, #9
 800fca2:	6033      	str	r3, [r6, #0]
 800fca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fca8:	81a3      	strh	r3, [r4, #12]
 800fcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800fcae:	e03e      	b.n	800fd2e <__swsetup_r+0xba>
 800fcb0:	4b25      	ldr	r3, [pc, #148]	; (800fd48 <__swsetup_r+0xd4>)
 800fcb2:	429c      	cmp	r4, r3
 800fcb4:	d101      	bne.n	800fcba <__swsetup_r+0x46>
 800fcb6:	68ac      	ldr	r4, [r5, #8]
 800fcb8:	e7eb      	b.n	800fc92 <__swsetup_r+0x1e>
 800fcba:	4b24      	ldr	r3, [pc, #144]	; (800fd4c <__swsetup_r+0xd8>)
 800fcbc:	429c      	cmp	r4, r3
 800fcbe:	bf08      	it	eq
 800fcc0:	68ec      	ldreq	r4, [r5, #12]
 800fcc2:	e7e6      	b.n	800fc92 <__swsetup_r+0x1e>
 800fcc4:	0758      	lsls	r0, r3, #29
 800fcc6:	d512      	bpl.n	800fcee <__swsetup_r+0x7a>
 800fcc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcca:	b141      	cbz	r1, 800fcde <__swsetup_r+0x6a>
 800fccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcd0:	4299      	cmp	r1, r3
 800fcd2:	d002      	beq.n	800fcda <__swsetup_r+0x66>
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f7ff fbcf 	bl	800f478 <_free_r>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	6363      	str	r3, [r4, #52]	; 0x34
 800fcde:	89a3      	ldrh	r3, [r4, #12]
 800fce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fce4:	81a3      	strh	r3, [r4, #12]
 800fce6:	2300      	movs	r3, #0
 800fce8:	6063      	str	r3, [r4, #4]
 800fcea:	6923      	ldr	r3, [r4, #16]
 800fcec:	6023      	str	r3, [r4, #0]
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	f043 0308 	orr.w	r3, r3, #8
 800fcf4:	81a3      	strh	r3, [r4, #12]
 800fcf6:	6923      	ldr	r3, [r4, #16]
 800fcf8:	b94b      	cbnz	r3, 800fd0e <__swsetup_r+0x9a>
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd04:	d003      	beq.n	800fd0e <__swsetup_r+0x9a>
 800fd06:	4621      	mov	r1, r4
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f000 f84d 	bl	800fda8 <__smakebuf_r>
 800fd0e:	89a0      	ldrh	r0, [r4, #12]
 800fd10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd14:	f010 0301 	ands.w	r3, r0, #1
 800fd18:	d00a      	beq.n	800fd30 <__swsetup_r+0xbc>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	60a3      	str	r3, [r4, #8]
 800fd1e:	6963      	ldr	r3, [r4, #20]
 800fd20:	425b      	negs	r3, r3
 800fd22:	61a3      	str	r3, [r4, #24]
 800fd24:	6923      	ldr	r3, [r4, #16]
 800fd26:	b943      	cbnz	r3, 800fd3a <__swsetup_r+0xc6>
 800fd28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd2c:	d1ba      	bne.n	800fca4 <__swsetup_r+0x30>
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	0781      	lsls	r1, r0, #30
 800fd32:	bf58      	it	pl
 800fd34:	6963      	ldrpl	r3, [r4, #20]
 800fd36:	60a3      	str	r3, [r4, #8]
 800fd38:	e7f4      	b.n	800fd24 <__swsetup_r+0xb0>
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	e7f7      	b.n	800fd2e <__swsetup_r+0xba>
 800fd3e:	bf00      	nop
 800fd40:	2000010c 	.word	0x2000010c
 800fd44:	0801046c 	.word	0x0801046c
 800fd48:	0801048c 	.word	0x0801048c
 800fd4c:	0801044c 	.word	0x0801044c

0800fd50 <abort>:
 800fd50:	b508      	push	{r3, lr}
 800fd52:	2006      	movs	r0, #6
 800fd54:	f000 f898 	bl	800fe88 <raise>
 800fd58:	2001      	movs	r0, #1
 800fd5a:	f7f1 fee7 	bl	8001b2c <_exit>

0800fd5e <__swhatbuf_r>:
 800fd5e:	b570      	push	{r4, r5, r6, lr}
 800fd60:	460e      	mov	r6, r1
 800fd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd66:	2900      	cmp	r1, #0
 800fd68:	b096      	sub	sp, #88	; 0x58
 800fd6a:	4614      	mov	r4, r2
 800fd6c:	461d      	mov	r5, r3
 800fd6e:	da08      	bge.n	800fd82 <__swhatbuf_r+0x24>
 800fd70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	602a      	str	r2, [r5, #0]
 800fd78:	061a      	lsls	r2, r3, #24
 800fd7a:	d410      	bmi.n	800fd9e <__swhatbuf_r+0x40>
 800fd7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd80:	e00e      	b.n	800fda0 <__swhatbuf_r+0x42>
 800fd82:	466a      	mov	r2, sp
 800fd84:	f000 f89c 	bl	800fec0 <_fstat_r>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	dbf1      	blt.n	800fd70 <__swhatbuf_r+0x12>
 800fd8c:	9a01      	ldr	r2, [sp, #4]
 800fd8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd96:	425a      	negs	r2, r3
 800fd98:	415a      	adcs	r2, r3
 800fd9a:	602a      	str	r2, [r5, #0]
 800fd9c:	e7ee      	b.n	800fd7c <__swhatbuf_r+0x1e>
 800fd9e:	2340      	movs	r3, #64	; 0x40
 800fda0:	2000      	movs	r0, #0
 800fda2:	6023      	str	r3, [r4, #0]
 800fda4:	b016      	add	sp, #88	; 0x58
 800fda6:	bd70      	pop	{r4, r5, r6, pc}

0800fda8 <__smakebuf_r>:
 800fda8:	898b      	ldrh	r3, [r1, #12]
 800fdaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fdac:	079d      	lsls	r5, r3, #30
 800fdae:	4606      	mov	r6, r0
 800fdb0:	460c      	mov	r4, r1
 800fdb2:	d507      	bpl.n	800fdc4 <__smakebuf_r+0x1c>
 800fdb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fdb8:	6023      	str	r3, [r4, #0]
 800fdba:	6123      	str	r3, [r4, #16]
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	6163      	str	r3, [r4, #20]
 800fdc0:	b002      	add	sp, #8
 800fdc2:	bd70      	pop	{r4, r5, r6, pc}
 800fdc4:	ab01      	add	r3, sp, #4
 800fdc6:	466a      	mov	r2, sp
 800fdc8:	f7ff ffc9 	bl	800fd5e <__swhatbuf_r>
 800fdcc:	9900      	ldr	r1, [sp, #0]
 800fdce:	4605      	mov	r5, r0
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f7fd f9b9 	bl	800d148 <_malloc_r>
 800fdd6:	b948      	cbnz	r0, 800fdec <__smakebuf_r+0x44>
 800fdd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fddc:	059a      	lsls	r2, r3, #22
 800fdde:	d4ef      	bmi.n	800fdc0 <__smakebuf_r+0x18>
 800fde0:	f023 0303 	bic.w	r3, r3, #3
 800fde4:	f043 0302 	orr.w	r3, r3, #2
 800fde8:	81a3      	strh	r3, [r4, #12]
 800fdea:	e7e3      	b.n	800fdb4 <__smakebuf_r+0xc>
 800fdec:	4b0d      	ldr	r3, [pc, #52]	; (800fe24 <__smakebuf_r+0x7c>)
 800fdee:	62b3      	str	r3, [r6, #40]	; 0x28
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	6020      	str	r0, [r4, #0]
 800fdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf8:	81a3      	strh	r3, [r4, #12]
 800fdfa:	9b00      	ldr	r3, [sp, #0]
 800fdfc:	6163      	str	r3, [r4, #20]
 800fdfe:	9b01      	ldr	r3, [sp, #4]
 800fe00:	6120      	str	r0, [r4, #16]
 800fe02:	b15b      	cbz	r3, 800fe1c <__smakebuf_r+0x74>
 800fe04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe08:	4630      	mov	r0, r6
 800fe0a:	f000 f86b 	bl	800fee4 <_isatty_r>
 800fe0e:	b128      	cbz	r0, 800fe1c <__smakebuf_r+0x74>
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	f043 0301 	orr.w	r3, r3, #1
 800fe1a:	81a3      	strh	r3, [r4, #12]
 800fe1c:	89a0      	ldrh	r0, [r4, #12]
 800fe1e:	4305      	orrs	r5, r0
 800fe20:	81a5      	strh	r5, [r4, #12]
 800fe22:	e7cd      	b.n	800fdc0 <__smakebuf_r+0x18>
 800fe24:	0800cee9 	.word	0x0800cee9

0800fe28 <_malloc_usable_size_r>:
 800fe28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe2c:	1f18      	subs	r0, r3, #4
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	bfbc      	itt	lt
 800fe32:	580b      	ldrlt	r3, [r1, r0]
 800fe34:	18c0      	addlt	r0, r0, r3
 800fe36:	4770      	bx	lr

0800fe38 <_raise_r>:
 800fe38:	291f      	cmp	r1, #31
 800fe3a:	b538      	push	{r3, r4, r5, lr}
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	460d      	mov	r5, r1
 800fe40:	d904      	bls.n	800fe4c <_raise_r+0x14>
 800fe42:	2316      	movs	r3, #22
 800fe44:	6003      	str	r3, [r0, #0]
 800fe46:	f04f 30ff 	mov.w	r0, #4294967295
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}
 800fe4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe4e:	b112      	cbz	r2, 800fe56 <_raise_r+0x1e>
 800fe50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe54:	b94b      	cbnz	r3, 800fe6a <_raise_r+0x32>
 800fe56:	4620      	mov	r0, r4
 800fe58:	f000 f830 	bl	800febc <_getpid_r>
 800fe5c:	462a      	mov	r2, r5
 800fe5e:	4601      	mov	r1, r0
 800fe60:	4620      	mov	r0, r4
 800fe62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe66:	f000 b817 	b.w	800fe98 <_kill_r>
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d00a      	beq.n	800fe84 <_raise_r+0x4c>
 800fe6e:	1c59      	adds	r1, r3, #1
 800fe70:	d103      	bne.n	800fe7a <_raise_r+0x42>
 800fe72:	2316      	movs	r3, #22
 800fe74:	6003      	str	r3, [r0, #0]
 800fe76:	2001      	movs	r0, #1
 800fe78:	e7e7      	b.n	800fe4a <_raise_r+0x12>
 800fe7a:	2400      	movs	r4, #0
 800fe7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe80:	4628      	mov	r0, r5
 800fe82:	4798      	blx	r3
 800fe84:	2000      	movs	r0, #0
 800fe86:	e7e0      	b.n	800fe4a <_raise_r+0x12>

0800fe88 <raise>:
 800fe88:	4b02      	ldr	r3, [pc, #8]	; (800fe94 <raise+0xc>)
 800fe8a:	4601      	mov	r1, r0
 800fe8c:	6818      	ldr	r0, [r3, #0]
 800fe8e:	f7ff bfd3 	b.w	800fe38 <_raise_r>
 800fe92:	bf00      	nop
 800fe94:	2000010c 	.word	0x2000010c

0800fe98 <_kill_r>:
 800fe98:	b538      	push	{r3, r4, r5, lr}
 800fe9a:	4d07      	ldr	r5, [pc, #28]	; (800feb8 <_kill_r+0x20>)
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	4604      	mov	r4, r0
 800fea0:	4608      	mov	r0, r1
 800fea2:	4611      	mov	r1, r2
 800fea4:	602b      	str	r3, [r5, #0]
 800fea6:	f7f1 fe31 	bl	8001b0c <_kill>
 800feaa:	1c43      	adds	r3, r0, #1
 800feac:	d102      	bne.n	800feb4 <_kill_r+0x1c>
 800feae:	682b      	ldr	r3, [r5, #0]
 800feb0:	b103      	cbz	r3, 800feb4 <_kill_r+0x1c>
 800feb2:	6023      	str	r3, [r4, #0]
 800feb4:	bd38      	pop	{r3, r4, r5, pc}
 800feb6:	bf00      	nop
 800feb8:	2000afe0 	.word	0x2000afe0

0800febc <_getpid_r>:
 800febc:	f7f1 be1e 	b.w	8001afc <_getpid>

0800fec0 <_fstat_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4d07      	ldr	r5, [pc, #28]	; (800fee0 <_fstat_r+0x20>)
 800fec4:	2300      	movs	r3, #0
 800fec6:	4604      	mov	r4, r0
 800fec8:	4608      	mov	r0, r1
 800feca:	4611      	mov	r1, r2
 800fecc:	602b      	str	r3, [r5, #0]
 800fece:	f7f1 fe7c 	bl	8001bca <_fstat>
 800fed2:	1c43      	adds	r3, r0, #1
 800fed4:	d102      	bne.n	800fedc <_fstat_r+0x1c>
 800fed6:	682b      	ldr	r3, [r5, #0]
 800fed8:	b103      	cbz	r3, 800fedc <_fstat_r+0x1c>
 800feda:	6023      	str	r3, [r4, #0]
 800fedc:	bd38      	pop	{r3, r4, r5, pc}
 800fede:	bf00      	nop
 800fee0:	2000afe0 	.word	0x2000afe0

0800fee4 <_isatty_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4d06      	ldr	r5, [pc, #24]	; (800ff00 <_isatty_r+0x1c>)
 800fee8:	2300      	movs	r3, #0
 800feea:	4604      	mov	r4, r0
 800feec:	4608      	mov	r0, r1
 800feee:	602b      	str	r3, [r5, #0]
 800fef0:	f7f1 fe7b 	bl	8001bea <_isatty>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	d102      	bne.n	800fefe <_isatty_r+0x1a>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	b103      	cbz	r3, 800fefe <_isatty_r+0x1a>
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	2000afe0 	.word	0x2000afe0

0800ff04 <_init>:
 800ff04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff06:	bf00      	nop
 800ff08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff0a:	bc08      	pop	{r3}
 800ff0c:	469e      	mov	lr, r3
 800ff0e:	4770      	bx	lr

0800ff10 <_fini>:
 800ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff12:	bf00      	nop
 800ff14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff16:	bc08      	pop	{r3}
 800ff18:	469e      	mov	lr, r3
 800ff1a:	4770      	bx	lr
