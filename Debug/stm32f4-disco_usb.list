
stm32f4-disco_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf4  0800cbf4  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbfc  0800cbfc  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800cc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          0000ab50  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000acc0  2000acc0  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021303  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d20  00000000  00000000  000414a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  000461c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001840  00000000  00000000  00047c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008c3d  00000000  00000000  00049450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9af  00000000  00000000  0005208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d90eb  00000000  00000000  00070a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149b27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000733c  00000000  00000000  00149b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c85c 	.word	0x0800c85c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0800c85c 	.word	0x0800c85c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10a      	bne.n	80005ac <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059a:	f383 8811 	msr	BASEPRI, r3
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	f3bf 8f4f 	dsb	sy
 80005a6:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005a8:	bf00      	nop
 80005aa:	e7fe      	b.n	80005aa <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80005ac:	2008      	movs	r0, #8
 80005ae:	f00a fc2b 	bl	800ae08 <pvPortMalloc>
 80005b2:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10a      	bne.n	80005d0 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	60bb      	str	r3, [r7, #8]
}
 80005cc:	bf00      	nop
 80005ce:	e7fe      	b.n	80005ce <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d012      	beq.n	80005fc <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 80005d6:	f00a faf5 	bl	800abc4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <FreeRTOS_CLIRegisterCommand+0x84>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <FreeRTOS_CLIRegisterCommand+0x84>)
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 80005f4:	f00a fb16 	bl	800ac24 <vPortExitCritical>

		xReturn = pdPASS;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80005fc:	697b      	ldr	r3, [r7, #20]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000008 	.word	0x20000008

0800060c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 800061c:	4b3a      	ldr	r3, [pc, #232]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d141      	bne.n	80006a8 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <FreeRTOS_CLIProcessCommand+0x100>)
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e037      	b.n	800069c <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000636:	69b8      	ldr	r0, [r7, #24]
 8000638:	f7ff fdca 	bl	80001d0 <strlen>
 800063c:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	69b9      	ldr	r1, [r7, #24]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f00b fd48 	bl	800c0d8 <strncmp>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d121      	bne.n	8000692 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b20      	cmp	r3, #32
 8000658:	d005      	beq.n	8000666 <FreeRTOS_CLIProcessCommand+0x5a>
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d115      	bne.n	8000692 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db18      	blt.n	80006a6 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f000 f87d 	bl	8000774 <prvGetNumberOfParameters>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d00c      	beq.n	80006a6 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000690:	e009      	b.n	80006a6 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1c3      	bne.n	800062c <FreeRTOS_CLIProcessCommand+0x20>
 80006a4:	e000      	b.n	80006a8 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 80006a6:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00b      	beq.n	80006c8 <FreeRTOS_CLIProcessCommand+0xbc>
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d108      	bne.n	80006c8 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4915      	ldr	r1, [pc, #84]	; (8000710 <FreeRTOS_CLIProcessCommand+0x104>)
 80006ba:	68b8      	ldr	r0, [r7, #8]
 80006bc:	f00b fd20 	bl	800c100 <strncpy>
		pxCommand = NULL;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e01a      	b.n	80006fe <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00f      	beq.n	80006f0 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	4798      	blx	r3
 80006e0:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	e006      	b.n	80006fe <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <FreeRTOS_CLIProcessCommand+0x108>)
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f00b fd03 	bl	800c100 <strncpy>
		xReturn = pdFALSE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80006fe:	69fb      	ldr	r3, [r7, #28]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000018c 	.word	0x2000018c
 800070c:	20000000 	.word	0x20000000
 8000710:	0800c8ac 	.word	0x0800c8ac
 8000714:	0800c904 	.word	0x0800c904

08000718 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <prvHelpCommand+0x54>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <prvHelpCommand+0x54>)
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <prvHelpCommand+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <prvHelpCommand+0x54>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	4619      	mov	r1, r3
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f00b fcde 	bl	800c100 <strncpy>
	pxCommand = pxCommand->pxNext;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <prvHelpCommand+0x54>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <prvHelpCommand+0x54>)
 800074c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <prvHelpCommand+0x54>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	e001      	b.n	8000760 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000760:	697b      	ldr	r3, [r7, #20]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000190 	.word	0x20000190
 8000770:	20000000 	.word	0x20000000

08000774 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8000784:	e014      	b.n	80007b0 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b20      	cmp	r3, #32
 800078c:	d10b      	bne.n	80007a6 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d00a      	beq.n	80007aa <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8000794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e001      	b.n	80007aa <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e6      	bne.n	8000786 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d105      	bne.n	80007ca <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	3b01      	subs	r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 80007e0:	f000 fac0 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f816 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f87e 	bl	80008e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007ec:	f006 fbda 	bl	8006fa4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <main+0x2c>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <main+0x30>)
 80007f6:	f006 fc1f 	bl	8007038 <osThreadNew>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <main+0x34>)
 80007fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000800:	f006 fbf4 	bl	8006fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0x28>
 8000806:	bf00      	nop
 8000808:	0800cb00 	.word	0x0800cb00
 800080c:	080009c1 	.word	0x080009c1
 8000810:	20000194 	.word	0x20000194

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00b fb1a 	bl	800be5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xcc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <SystemClock_Config+0xd0>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000888:	23a8      	movs	r3, #168	; 0xa8
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000890:	2307      	movs	r3, #7
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f001 ffc5 	bl	8002828 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 f91c 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fa26 	bl	8002d18 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d2:	f000 f905 	bl	8000ae0 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3750      	adds	r7, #80	; 0x50
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_GPIO_Init+0x4c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_GPIO_Init+0x4c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_GPIO_Init+0x4c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_GPIO_Init+0x4c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <MX_GPIO_Init+0x4c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_GPIO_Init+0x4c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <prvTaskStatsCommand>:
BaseType_t CDC_Receiveq_HS(char *data, TickType_t timeout);
uint8_t buffer[128];
uint32_t len = 0;

static BaseType_t prvTaskStatsCommand(char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]

  /* For simplicity, this function assumes the output buffer is large enough
  to hold all the text generated by executing the vTaskList() API function,
  so the xWriteBufferLen parameter is not used. */
  char *head = "Name\t\t\t\tState  Priority  Stack  Number\n\r";
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <prvTaskStatsCommand+0x34>)
 8000946:	617b      	str	r3, [r7, #20]
  (void)xWriteBufferLen;

  /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
  generated by executing vTaskList() is written directly into the output
  buffer. */
  strcpy(pcWriteBuffer, head);
 8000948:	6979      	ldr	r1, [r7, #20]
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f00b fbbc 	bl	800c0c8 <strcpy>
  vTaskList(pcWriteBuffer + strlen(head));
 8000950:	6978      	ldr	r0, [r7, #20]
 8000952:	f7ff fc3d 	bl	80001d0 <strlen>
 8000956:	4602      	mov	r2, r0
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f009 f993 	bl	8009c88 <vTaskList>

  /* The entire table was written directly to the output buffer.  Execution
  of this command is complete, so return pdFALSE. */
  return pdFALSE;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	0800c960 	.word	0x0800c960

08000970 <prvTaskStatsTexto>:

static BaseType_t prvTaskStatsTexto(char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString)
{
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]

  strcpy(pcWriteBuffer, (char *)"Isto é apenas um teste, testando 1 2 3...\r\n");
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <prvTaskStatsTexto+0x4c>)
 8000980:	4614      	mov	r4, r2
 8000982:	469c      	mov	ip, r3
 8000984:	f104 0e20 	add.w	lr, r4, #32
 8000988:	4665      	mov	r5, ip
 800098a:	4626      	mov	r6, r4
 800098c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800098e:	6028      	str	r0, [r5, #0]
 8000990:	6069      	str	r1, [r5, #4]
 8000992:	60aa      	str	r2, [r5, #8]
 8000994:	60eb      	str	r3, [r5, #12]
 8000996:	3410      	adds	r4, #16
 8000998:	f10c 0c10 	add.w	ip, ip, #16
 800099c:	4574      	cmp	r4, lr
 800099e:	d1f3      	bne.n	8000988 <prvTaskStatsTexto+0x18>
 80009a0:	4665      	mov	r5, ip
 80009a2:	4623      	mov	r3, r4
 80009a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80009a6:	6028      	str	r0, [r5, #0]
 80009a8:	6069      	str	r1, [r5, #4]
 80009aa:	60aa      	str	r2, [r5, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	732b      	strb	r3, [r5, #12]
  return pdFALSE;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	0800c98c 	.word	0x0800c98c

080009c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009c8:	f00a fc08 	bl	800b1dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 80009cc:	f00a fd98 	bl	800b500 <init_usb_rtos_obj>
  //char data[32];
	int qtd;
  /* Infinite loop */
	//Peripheral_Descriptor_t xConsole;
	int8_t cInputIndex = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]

	FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 80009d4:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <StartDefaultTask+0xe4>)
 80009d6:	f7ff fdd5 	bl	8000584 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 80009da:	4833      	ldr	r0, [pc, #204]	; (8000aa8 <StartDefaultTask+0xe8>)
 80009dc:	f7ff fdd2 	bl	8000584 <FreeRTOS_CLIRegisterCommand>
	    been opened and configured, and is passed into the task as the task
	    parameter.  Cast the task parameter to the correct type. */
	    //xConsole = ( Peripheral_Descriptor_t ) pvParameters;

	    /* Send a welcome message to the user knows they are connected. */
		(void)queue_print(pcWelcomeMessage, strlen( pcWelcomeMessage ));//write
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <StartDefaultTask+0xec>)
 80009e2:	681c      	ldr	r4, [r3, #0]
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <StartDefaultTask+0xec>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fbf1 	bl	80001d0 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4620      	mov	r0, r4
 80009f4:	f00a fd10 	bl	800b418 <queue_print>

	    for( ;; )
	    {
	        /* This implementation reads a single character at a time.  Wait in the
	        Blocked state until a character is received. */
			CDC_Receiveq_FS(&data, 1, portMAX_DELAY);
 80009f8:	f107 030f 	add.w	r3, r7, #15
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00a fcf2 	bl	800b3ec <CDC_Receiveq_FS>
	        //FreeRTOS_read( xConsole, &data, sizeof( data ) );

	        if( data == '\r' )
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b0d      	cmp	r3, #13
 8000a0c:	d11c      	bne.n	8000a48 <StartDefaultTask+0x88>
	        {
	            /* A newline character was received, so the input command string is
	            complete and can be processed.  Transmit a line separator, just to
	            make the output easier to read. */
				(void)queue_print("\r\n", strlen( "\r\n" ));//write
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <StartDefaultTask+0xf0>)
 8000a12:	f00a fd01 	bl	800b418 <queue_print>
	            do
	            {
	                /* Send the command string to the command interpreter.  Any
	                output generated by the command interpreter will be placed in the
	                pcOutputString buffer. */
	                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	4926      	ldr	r1, [pc, #152]	; (8000ab4 <StartDefaultTask+0xf4>)
 8000a1a:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <StartDefaultTask+0xf8>)
 8000a1c:	f7ff fdf6 	bl	800060c <FreeRTOS_CLIProcessCommand>
 8000a20:	6138      	str	r0, [r7, #16]
	                                  MAX_OUTPUT_LENGTH/* The size of the output buffer. */
	                              );

	                /* Write the output generated by the command interpreter to the
	                console. */
					(void)queue_print(pcOutputString, strlen( pcOutputString ));//write
 8000a22:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <StartDefaultTask+0xf4>)
 8000a24:	f7ff fbd4 	bl	80001d0 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <StartDefaultTask+0xf4>)
 8000a2e:	f00a fcf3 	bl	800b418 <queue_print>
	                //FreeRTOS_write( xConsole, pcOutputString, strlen( pcOutputString ) );

	            } while( xMoreDataToFollow != pdFALSE );
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1ee      	bne.n	8000a16 <StartDefaultTask+0x56>

	            /* All the strings generated by the input command have been sent.
	            Processing of the command is complete.  Clear the input string ready
	            to receive the next command. */
	            cInputIndex = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75fb      	strb	r3, [r7, #23]
	            memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 8000a3c:	2232      	movs	r2, #50	; 0x32
 8000a3e:	2100      	movs	r1, #0
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <StartDefaultTask+0xf8>)
 8000a42:	f00b fa0b 	bl	800be5c <memset>
 8000a46:	e7d7      	b.n	80009f8 <StartDefaultTask+0x38>
	        {
	            /* The if() clause performs the processing after a newline character
	            is received.  This else clause performs the processing if any other
	            character is received. */

	            if( data == '\n' )
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b0a      	cmp	r3, #10
 8000a4c:	d0d4      	beq.n	80009f8 <StartDefaultTask+0x38>
	            {
	                /* Ignore carriage returns. */
	            }
	            else if( data == '\b' )
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b08      	cmp	r3, #8
 8000a52:	d10f      	bne.n	8000a74 <StartDefaultTask+0xb4>
	            {
	                /* Backspace was pressed.  Erase the last character in the input
	                buffer - if there are any. */
	                if( cInputIndex > 0 )
 8000a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	ddcd      	ble.n	80009f8 <StartDefaultTask+0x38>
	                {
	                    cInputIndex--;
 8000a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	3b01      	subs	r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	75fb      	strb	r3, [r7, #23]
	                    pcInputString[ cInputIndex ] = '\0';
 8000a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <StartDefaultTask+0xf8>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	54d1      	strb	r1, [r2, r3]
 8000a72:	e7c1      	b.n	80009f8 <StartDefaultTask+0x38>
	            {
	                /* A character was entered.  It was not a new line, backspace
	                or carriage return, so it is accepted as part of the input and
	                placed into the input buffer.  When a n is entered the complete
	                string will be passed to the command interpreter. */
	                if( cInputIndex < MAX_INPUT_LENGTH )
 8000a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a78:	2b31      	cmp	r3, #49	; 0x31
 8000a7a:	dcbd      	bgt.n	80009f8 <StartDefaultTask+0x38>
	                {
	                    pcInputString[ cInputIndex ] = data;
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a82:	b251      	sxtb	r1, r2
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <StartDefaultTask+0xf8>)
 8000a86:	54d1      	strb	r1, [r2, r3]
	                    cInputIndex++;
 8000a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	75fb      	strb	r3, [r7, #23]
	                    (void)queue_print(&data, 1);//write
 8000a94:	f107 030f 	add.w	r3, r7, #15
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00a fcbc 	bl	800b418 <queue_print>
	    {
 8000aa0:	e7aa      	b.n	80009f8 <StartDefaultTask+0x38>
 8000aa2:	bf00      	nop
 8000aa4:	0800cb24 	.word	0x0800cb24
 8000aa8:	0800cb34 	.word	0x0800cb34
 8000aac:	0800cb44 	.word	0x0800cb44
 8000ab0:	0800ca20 	.word	0x0800ca20
 8000ab4:	200001cc 	.word	0x200001cc
 8000ab8:	20000198 	.word	0x20000198

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 f96b 	bl	8000da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010000 	.word	0x40010000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_MspInit+0x54>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <HAL_MspInit+0x54>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x54>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_MspInit+0x54>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_MspInit+0x54>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_MspInit+0x54>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	f06f 0001 	mvn.w	r0, #1
 8000b32:	f000 fa35 	bl	8000fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_InitTick+0xd4>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_InitTick+0xd4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6453      	str	r3, [r2, #68]	; 0x44
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_InitTick+0xd4>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 020c 	add.w	r2, r7, #12
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fad8 	bl	8003130 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b80:	f002 fac2 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8000b84:	4603      	mov	r3, r0
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <HAL_InitTick+0xd8>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_InitTick+0xdc>)
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <HAL_InitTick+0xe0>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_InitTick+0xdc>)
 8000ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_InitTick+0xdc>)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_InitTick+0xdc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_InitTick+0xdc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_InitTick+0xdc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bbe:	4818      	ldr	r0, [pc, #96]	; (8000c20 <HAL_InitTick+0xdc>)
 8000bc0:	f002 fae8 	bl	8003194 <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11b      	bne.n	8000c0a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <HAL_InitTick+0xdc>)
 8000bd4:	f002 fb38 	bl	8003248 <HAL_TIM_Base_Start_IT>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d111      	bne.n	8000c0a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000be6:	2019      	movs	r0, #25
 8000be8:	f000 f9f6 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d808      	bhi.n	8000c04 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 f9d2 	bl	8000fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_InitTick+0xe4>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e002      	b.n	8000c0a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	431bde83 	.word	0x431bde83
 8000c20:	20000230 	.word	0x20000230
 8000c24:	40010000 	.word	0x40010000
 8000c28:	20000010 	.word	0x20000010

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c5e:	f002 fb63 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000230 	.word	0x20000230

08000c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <OTG_FS_IRQHandler+0x10>)
 8000c72:	f000 fcab 	bl	80015cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000a584 	.word	0x2000a584

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f00b f89a 	bl	800bde8 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20020000 	.word	0x20020000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000278 	.word	0x20000278
 8000ce8:	2000acc0 	.word	0x2000acc0

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ffd7 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f00b f859 	bl	800bdf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fd4b 	bl	80007dc <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000d54:	0800cc04 	.word	0x0800cc04
  ldr r2, =_sbss
 8000d58:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000d5c:	2000acc0 	.word	0x2000acc0

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f8fc 	bl	8000f8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	200f      	movs	r0, #15
 8000d94:	f7ff fed6 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fea8 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	2000027c 	.word	0x2000027c

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000027c 	.word	0x2000027c

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000014 	.word	0x20000014

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff4c 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff61 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb1 	bl	8000f24 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff80 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff54 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e16b      	b.n	80012e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 815a 	bne.w	80012e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80b4 	beq.w	80012e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b60      	ldr	r3, [pc, #384]	; (8001300 <HAL_GPIO_Init+0x30c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a5f      	ldr	r2, [pc, #380]	; (8001300 <HAL_GPIO_Init+0x30c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <HAL_GPIO_Init+0x30c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a5b      	ldr	r2, [pc, #364]	; (8001304 <HAL_GPIO_Init+0x310>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_GPIO_Init+0x314>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x226>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_GPIO_Init+0x318>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d025      	beq.n	8001216 <HAL_GPIO_Init+0x222>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a50      	ldr	r2, [pc, #320]	; (8001310 <HAL_GPIO_Init+0x31c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01f      	beq.n	8001212 <HAL_GPIO_Init+0x21e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	; (8001314 <HAL_GPIO_Init+0x320>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x21a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_GPIO_Init+0x324>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x216>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <HAL_GPIO_Init+0x328>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x212>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x20e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_GPIO_Init+0x330>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x20a>
 80011fa:	2307      	movs	r3, #7
 80011fc:	e00e      	b.n	800121c <HAL_GPIO_Init+0x228>
 80011fe:	2308      	movs	r3, #8
 8001200:	e00c      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001202:	2306      	movs	r3, #6
 8001204:	e00a      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001206:	2305      	movs	r3, #5
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x228>
 800120a:	2304      	movs	r3, #4
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x228>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x228>
 800121a:	2300      	movs	r3, #0
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x310>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_GPIO_Init+0x334>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <HAL_GPIO_Init+0x334>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <HAL_GPIO_Init+0x334>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_GPIO_Init+0x334>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_GPIO_Init+0x334>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_GPIO_Init+0x334>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_GPIO_Init+0x334>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_GPIO_Init+0x334>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	f67f ae90 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	b08f      	sub	sp, #60	; 0x3c
 8001330:	af0a      	add	r7, sp, #40	; 0x28
 8001332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e10f      	b.n	800155e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f00a fa23 	bl	800b7a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f002 facc 	bl	800391a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	687e      	ldr	r6, [r7, #4]
 800138a:	466d      	mov	r5, sp
 800138c:	f106 0410 	add.w	r4, r6, #16
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800139c:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a0:	1d33      	adds	r3, r6, #4
 80013a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f002 f9a3 	bl	80036f0 <USB_CoreInit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d0      	b.n	800155e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 faba 	bl	800393c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e04a      	b.n	8001464 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	333d      	adds	r3, #61	; 0x3d
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	333c      	adds	r3, #60	; 0x3c
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	b298      	uxth	r0, r3
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3344      	adds	r3, #68	; 0x44
 800140a:	4602      	mov	r2, r0
 800140c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3340      	adds	r3, #64	; 0x40
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3348      	adds	r3, #72	; 0x48
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	334c      	adds	r3, #76	; 0x4c
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3354      	adds	r3, #84	; 0x54
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	3301      	adds	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3af      	bcc.n	80013ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e044      	b.n	80014fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	3301      	adds	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	d3b5      	bcc.n	8001474 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	687e      	ldr	r6, [r7, #4]
 8001510:	466d      	mov	r5, sp
 8001512:	f106 0410 	add.w	r4, r6, #16
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001522:	e885 0003 	stmia.w	r5, {r0, r1}
 8001526:	1d33      	adds	r3, r6, #4
 8001528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f002 fa52 	bl	80039d4 <USB_DevInit>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2202      	movs	r2, #2
 800153a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00d      	b.n	800155e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fba1 	bl	8004c9e <USB_DevDisconnect>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001566 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_PCD_Start+0x1c>
 800157e:	2302      	movs	r3, #2
 8001580:	e020      	b.n	80015c4 <HAL_PCD_Start+0x5e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	2b01      	cmp	r3, #1
 8001590:	d109      	bne.n	80015a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001596:	2b01      	cmp	r3, #1
 8001598:	d005      	beq.n	80015a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f9a4 	bl	80038f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fb51 	bl	8004c5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b08d      	sub	sp, #52	; 0x34
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fc0f 	bl	8004e06 <USB_GetMode>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 848a 	bne.w	8001f04 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fb73 	bl	8004ce0 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8480 	beq.w	8001f02 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fb60 	bl	8004ce0 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b02      	cmp	r3, #2
 8001628:	d107      	bne.n	800163a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f002 0202 	and.w	r2, r2, #2
 8001638:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fb4e 	bl	8004ce0 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b10      	cmp	r3, #16
 800164c:	d161      	bne.n	8001712 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0210 	bic.w	r2, r2, #16
 800165c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f003 020f 	and.w	r2, r3, #15
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	3304      	adds	r3, #4
 800167c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	0c5b      	lsrs	r3, r3, #17
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	2b02      	cmp	r3, #2
 8001688:	d124      	bne.n	80016d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d035      	beq.n	8001702 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f003 f985 	bl	80049b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ba:	441a      	add	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016cc:	441a      	add	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	621a      	str	r2, [r3, #32]
 80016d2:	e016      	b.n	8001702 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	0c5b      	lsrs	r3, r3, #17
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d110      	bne.n	8001702 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016e6:	2208      	movs	r2, #8
 80016e8:	4619      	mov	r1, r3
 80016ea:	6a38      	ldr	r0, [r7, #32]
 80016ec:	f003 f964 	bl	80049b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016fc:	441a      	add	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0210 	orr.w	r2, r2, #16
 8001710:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fae2 	bl	8004ce0 <USB_ReadInterrupts>
 800171c:	4603      	mov	r3, r0
 800171e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001722:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001726:	f040 80a7 	bne.w	8001878 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fae7 	bl	8004d06 <USB_ReadDevAllOutEpInterrupt>
 8001738:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800173a:	e099      	b.n	8001870 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 808e 	beq.w	8001864 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fb0b 	bl	8004d6e <USB_ReadDevOutEPInterrupt>
 8001758:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00c      	beq.n	800177e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	015a      	lsls	r2, r3, #5
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001770:	461a      	mov	r2, r3
 8001772:	2301      	movs	r3, #1
 8001774:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fec3 	bl	8002504 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00c      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001794:	461a      	mov	r2, r3
 8001796:	2308      	movs	r3, #8
 8001798:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800179a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 ff99 	bl	80026d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b8:	461a      	mov	r2, r3
 80017ba:	2310      	movs	r3, #16
 80017bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d030      	beq.n	800182a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	d109      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	3304      	adds	r3, #4
 80017fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d108      	bne.n	8001818 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2200      	movs	r2, #0
 800180a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f00a f8da 	bl	800b9cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001824:	461a      	mov	r2, r3
 8001826:	2302      	movs	r3, #2
 8001828:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001840:	461a      	mov	r2, r3
 8001842:	2320      	movs	r3, #32
 8001844:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185c:	461a      	mov	r2, r3
 800185e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001862:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	3301      	adds	r3, #1
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f af62 	bne.w	800173c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fa2f 	bl	8004ce0 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800188c:	f040 80db 	bne.w	8001a46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fa50 	bl	8004d3a <USB_ReadDevAllInEpInterrupt>
 800189a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018a0:	e0cd      	b.n	8001a3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80c2 	beq.w	8001a32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fa76 	bl	8004daa <USB_ReadDevInEPInterrupt>
 80018be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d057      	beq.n	800197a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	2201      	movs	r2, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69f9      	ldr	r1, [r7, #28]
 80018e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018ea:	4013      	ands	r3, r2
 80018ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fa:	461a      	mov	r2, r3
 80018fc:	2301      	movs	r3, #1
 80018fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d132      	bne.n	800196e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	334c      	adds	r3, #76	; 0x4c
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	3348      	adds	r3, #72	; 0x48
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4419      	add	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4403      	add	r3, r0
 800193c:	334c      	adds	r3, #76	; 0x4c
 800193e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d113      	bne.n	800196e <HAL_PCD_IRQHandler+0x3a2>
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3354      	adds	r3, #84	; 0x54
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d108      	bne.n	800196e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001966:	461a      	mov	r2, r3
 8001968:	2101      	movs	r1, #1
 800196a:	f003 fa7d 	bl	8004e68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f009 ffa4 	bl	800b8c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2308      	movs	r3, #8
 8001994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ac:	461a      	mov	r2, r3
 80019ae:	2310      	movs	r3, #16
 80019b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	461a      	mov	r2, r3
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019da:	6a38      	ldr	r0, [r7, #32]
 80019dc:	f002 f95e 	bl	8003c9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	3338      	adds	r3, #56	; 0x38
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2200      	movs	r2, #0
 8001a00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f009 fff1 	bl	800b9f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fcdb 	bl	80023e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f af2e 	bne.w	80018a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 f948 	bl	8004ce0 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a5a:	d122      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a82:	2100      	movs	r1, #0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fec3 	bl	8002810 <HAL_PCDEx_LPM_Callback>
 8001a8a:	e002      	b.n	8001a92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f009 ff8f 	bl	800b9b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 f91a 	bl	8004ce0 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab6:	d112      	bne.n	8001ade <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f009 ff4b 	bl	800b964 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001adc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f8fc 	bl	8004ce0 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af2:	f040 80b7 	bne.w	8001c64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2110      	movs	r1, #16
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 f8c3 	bl	8003c9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1a:	e046      	b.n	8001baa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b40:	0151      	lsls	r1, r2, #5
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	440a      	add	r2, r1
 8001b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b74:	0151      	lsls	r1, r2, #5
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	440a      	add	r2, r1
 8001b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b94:	0151      	lsls	r1, r2, #5
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	440a      	add	r2, r1
 8001b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ba2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3b3      	bcc.n	8001b1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d016      	beq.n	8001bfe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be0:	f043 030b 	orr.w	r3, r3, #11
 8001be4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf6:	f043 030b 	orr.w	r3, r3, #11
 8001bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfc:	e015      	b.n	8001c2a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c10:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c24:	f043 030b 	orr.w	r3, r3, #11
 8001c28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f003 f90a 	bl	8004e68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 f839 	bl	8004ce0 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c78:	d124      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f8cf 	bl	8004e22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 f884 	bl	8003d96 <USB_GetDevSpeed>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681c      	ldr	r4, [r3, #0]
 8001c9a:	f001 fa29 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8001c9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f001 fd83 	bl	80037b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f009 fe2f 	bl	800b912 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 f809 	bl	8004ce0 <USB_ReadInterrupts>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d10a      	bne.n	8001cee <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f009 fe0c 	bl	800b8f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 0208 	and.w	r2, r2, #8
 8001cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fff4 	bl	8004ce0 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d122      	bne.n	8001d48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e014      	b.n	8001d3e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb27 	bl	8002386 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e5      	bcc.n	8001d14 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 ffc7 	bl	8004ce0 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5c:	d13b      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e02b      	b.n	8001dbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3340      	adds	r3, #64	; 0x40
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d115      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da12      	bge.n	8001db6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	333f      	adds	r3, #63	; 0x3f
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fae8 	bl	8002386 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	3301      	adds	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3ce      	bcc.n	8001d64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 ff80 	bl	8004ce0 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dea:	d155      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dec:	2301      	movs	r3, #1
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e045      	b.n	8001e7e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12e      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da2b      	bge.n	8001e78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d121      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e74:	6053      	str	r3, [r2, #4]
            break;
 8001e76:	e007      	b.n	8001e88 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3b4      	bcc.n	8001df2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 ff1f 	bl	8004ce0 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d10a      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f009 fdb0 	bl	800ba14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 ff09 	bl	8004ce0 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d115      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f009 fda0 	bl	800ba30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e000      	b.n	8001f04 <HAL_PCD_IRQHandler+0x938>
      return;
 8001f02:	bf00      	nop
    }
  }
}
 8001f04:	3734      	adds	r7, #52	; 0x34
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_SetAddress+0x1a>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e013      	b.n	8001f4c <HAL_PCD_SetAddress+0x42>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fe67 	bl	8004c10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	70fb      	strb	r3, [r7, #3]
 8001f66:	460b      	mov	r3, r1
 8001f68:	803b      	strh	r3, [r7, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0f      	bge.n	8001f9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3338      	adds	r3, #56	; 0x38
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	705a      	strb	r2, [r3, #1]
 8001f98:	e00f      	b.n	8001fba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fc6:	883a      	ldrh	r2, [r7, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	78ba      	ldrb	r2, [r7, #2]
 8001fd0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe4:	78bb      	ldrb	r3, [r7, #2]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_Open+0xaa>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00e      	b.n	800201c <HAL_PCD_EP_Open+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fee7 	bl	8003de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800201a:	7afb      	ldrb	r3, [r7, #11]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00f      	b.n	8002078 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_PCD_EP_Close+0x6e>
 800208e:	2302      	movs	r3, #2
 8002090:	e00e      	b.n	80020b0 <HAL_PCD_EP_Close+0x8c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 ff25 	bl	8003ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	460b      	mov	r3, r1
 80020c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f002 fa04 	bl	8004538 <USB_EP0StartXfer>
 8002130:	e008      	b.n	8002144 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	f001 ffb2 	bl	80040a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002170:	681b      	ldr	r3, [r3, #0]
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	f002 f9a2 	bl	8004538 <USB_EP0StartXfer>
 80021f4:	e008      	b.n	8002208 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	6979      	ldr	r1, [r7, #20]
 8002204:	f001 ff50 	bl	80040a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d901      	bls.n	8002230 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e050      	b.n	80022d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0f      	bge.n	8002258 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3338      	adds	r3, #56	; 0x38
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	705a      	strb	r2, [r3, #1]
 8002256:	e00d      	b.n	8002274 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_SetStall+0x82>
 8002290:	2302      	movs	r3, #2
 8002292:	e01e      	b.n	80022d2 <HAL_PCD_EP_SetStall+0xc0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fbe0 	bl	8004a68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c2:	461a      	mov	r2, r3
 80022c4:	f002 fdd0 	bl	8004e68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e042      	b.n	800237e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0f      	bge.n	8002320 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3338      	adds	r3, #56	; 0x38
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	705a      	strb	r2, [r3, #1]
 800231e:	e00f      	b.n	8002340 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	3304      	adds	r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_PCD_EP_ClrStall+0x86>
 800235c:	2302      	movs	r3, #2
 800235e:	e00e      	b.n	800237e <HAL_PCD_EP_ClrStall+0xa4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fbe8 	bl	8004b44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da0c      	bge.n	80023b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	3338      	adds	r3, #56	; 0x38
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e00c      	b.n	80023ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 020f 	and.w	r2, r3, #15
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	3304      	adds	r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fa07 	bl	80047e8 <USB_EPStopXfer>
 80023da:	4603      	mov	r3, r0
 80023dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023de:	7afb      	ldrb	r3, [r7, #11]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3338      	adds	r3, #56	; 0x38
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	d901      	bls.n	8002420 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e06c      	b.n	80024fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	429a      	cmp	r2, r3
 8002434:	d902      	bls.n	800243c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3303      	adds	r3, #3
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002444:	e02b      	b.n	800249e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	429a      	cmp	r2, r3
 800245a:	d902      	bls.n	8002462 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3303      	adds	r3, #3
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800247a:	b2db      	uxtb	r3, r3
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4603      	mov	r3, r0
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f002 fa5b 	bl	800493c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	441a      	add	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	441a      	add	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d809      	bhi.n	80024c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024bc:	429a      	cmp	r2, r3
 80024be:	d203      	bcs.n	80024c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1be      	bne.n	8002446 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d811      	bhi.n	80024f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	6939      	ldr	r1, [r7, #16]
 80024f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024f4:	4013      	ands	r3, r2
 80024f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	333c      	adds	r3, #60	; 0x3c
 800251c:	3304      	adds	r3, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d17b      	bne.n	8002632 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4a61      	ldr	r2, [pc, #388]	; (80026cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f240 80b9 	bls.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80b3 	beq.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	e0a7      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	2320      	movs	r3, #32
 800258a:	6093      	str	r3, [r2, #8]
 800258c:	e098      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8093 	bne.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d90f      	bls.n	80025c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e07e      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d114      	bne.n	8002624 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800260c:	461a      	mov	r2, r3
 800260e:	2101      	movs	r1, #1
 8002610:	f002 fc2a 	bl	8004e68 <USB_EP0_OutStart>
 8002614:	e006      	b.n	8002624 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f009 f92e 	bl	800b88c <HAL_PCD_DataOutStageCallback>
 8002630:	e046      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d124      	bne.n	8002684 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002656:	6093      	str	r3, [r2, #8]
 8002658:	e032      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2320      	movs	r3, #32
 8002674:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f009 f905 	bl	800b88c <HAL_PCD_DataOutStageCallback>
 8002682:	e01d      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d114      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ac:	461a      	mov	r2, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	f002 fbda 	bl	8004e68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f009 f8e6 	bl	800b88c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	4f54300a 	.word	0x4f54300a
 80026d0:	4f54310a 	.word	0x4f54310a

080026d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	333c      	adds	r3, #60	; 0x3c
 80026ec:	3304      	adds	r3, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <PCD_EP_OutSetupPacket_int+0x88>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d90e      	bls.n	8002728 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002726:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f009 f89d 	bl	800b868 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <PCD_EP_OutSetupPacket_int+0x88>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d90c      	bls.n	8002750 <PCD_EP_OutSetupPacket_int+0x7c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002748:	461a      	mov	r2, r3
 800274a:	2101      	movs	r1, #1
 800274c:	f002 fb8c 	bl	8004e68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	4f54300a 	.word	0x4f54300a

08002760 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	4613      	mov	r3, r2
 800276e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800277e:	883b      	ldrh	r3, [r7, #0]
 8002780:	0419      	lsls	r1, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	430a      	orrs	r2, r1
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
 800278c:	e028      	b.n	80027e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e00d      	b.n	80027be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3340      	adds	r3, #64	; 0x40
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3ec      	bcc.n	80027a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027c8:	883b      	ldrh	r3, [r7, #0]
 80027ca:	0418      	lsls	r0, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4302      	orrs	r2, r0
 80027d8:	3340      	adds	r3, #64	; 0x40
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e267      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d075      	beq.n	8002932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b85      	ldr	r3, [pc, #532]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	2b08      	cmp	r3, #8
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x108>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e242      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x74>
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6f      	ldr	r2, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6c      	ldr	r2, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 80028c0:	4b69      	ldr	r3, [pc, #420]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a68      	ldr	r2, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fa76 	bl	8000dd0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fa72 	bl	8000dd0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e207      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xc0>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fa62 	bl	8000dd0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fa5e 	bl	8000dd0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1f3      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0xe8>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d063      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1c7      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e03a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_RCC_OscConfig+0x244>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fa17 	bl	8000dd0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a6:	f7fe fa13 	bl	8000dd0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1a8      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4925      	ldr	r1, [pc, #148]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe f9f6 	bl	8000dd0 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e8:	f7fe f9f2 	bl	8000dd0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e187      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d036      	beq.n	8002a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe f9d6 	bl	8000dd0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe f9d2 	bl	8000dd0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e167      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x200>
 8002a46:	e01b      	b.n	8002a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe f9bf 	bl	8000dd0 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00e      	b.n	8002a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe f9bb 	bl	8000dd0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d907      	bls.n	8002a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e150      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	42470000 	.word	0x42470000
 8002a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ea      	bne.n	8002a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8097 	beq.w	8002bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b7d      	ldr	r3, [pc, #500]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a7c      	ldr	r2, [pc, #496]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b77      	ldr	r3, [pc, #476]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b74      	ldr	r3, [pc, #464]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a73      	ldr	r2, [pc, #460]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe f97b 	bl	8000dd0 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe f977 	bl	8000dd0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e10c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2ea>
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a63      	ldr	r2, [pc, #396]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x30c>
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a5e      	ldr	r2, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe f93c 	bl	8000dd0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe f938 	bl	8000dd0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0cb      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ee      	beq.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe f926 	bl	8000dd0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe f922 	bl	8000dd0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0b5      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ee      	bne.n	8002b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a1 	beq.w	8002d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d05c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d141      	bne.n	8002c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f8f6 	bl	8000dd0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe f8f2 	bl	8000dd0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e087      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	491b      	ldr	r1, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe f8cb 	bl	8000dd0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe f8c7 	bl	8000dd0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e05c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x416>
 8002c5c:	e054      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe f8b4 	bl	8000dd0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe f8b0 	bl	8000dd0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e045      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
 8002c8a:	e03d      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e038      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x4ec>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d121      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0cc      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d90c      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d044      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d119      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e067      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4934      	ldr	r1, [pc, #208]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fd ffe2 	bl	8000dd0 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fd ffde 	bl	8000dd0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d20c      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f821 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fe40 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	0800cb48 	.word	0x0800cb48
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	20000010 	.word	0x20000010

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b094      	sub	sp, #80	; 0x50
 8002eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efc:	4b79      	ldr	r3, [pc, #484]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d00d      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x40>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f200 80e1 	bhi.w	80030d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f16:	e0db      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f1c:	e0db      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f22:	e0d8      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f68:	0150      	lsls	r0, r2, #5
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4621      	mov	r1, r4
 8002f70:	1a51      	subs	r1, r2, r1
 8002f72:	6139      	str	r1, [r7, #16]
 8002f74:	4629      	mov	r1, r5
 8002f76:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f88:	4659      	mov	r1, fp
 8002f8a:	018b      	lsls	r3, r1, #6
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f92:	4651      	mov	r1, sl
 8002f94:	018a      	lsls	r2, r1, #6
 8002f96:	4651      	mov	r1, sl
 8002f98:	ebb2 0801 	subs.w	r8, r2, r1
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	4699      	mov	r9, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	eb18 0303 	adds.w	r3, r8, r3
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	eb49 0303 	adc.w	r3, r9, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	024b      	lsls	r3, r1, #9
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	024a      	lsls	r2, r1, #9
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff4:	f7fd f944 	bl	8000280 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003000:	e058      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	4618      	mov	r0, r3
 800300c:	4611      	mov	r1, r2
 800300e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0159      	lsls	r1, r3, #5
 800302a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302e:	0150      	lsls	r0, r2, #5
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4641      	mov	r1, r8
 8003036:	ebb2 0a01 	subs.w	sl, r2, r1
 800303a:	4649      	mov	r1, r9
 800303c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800304c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003054:	ebb2 040a 	subs.w	r4, r2, sl
 8003058:	eb63 050b 	sbc.w	r5, r3, fp
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	00eb      	lsls	r3, r5, #3
 8003066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306a:	00e2      	lsls	r2, r4, #3
 800306c:	4614      	mov	r4, r2
 800306e:	461d      	mov	r5, r3
 8003070:	4643      	mov	r3, r8
 8003072:	18e3      	adds	r3, r4, r3
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	464b      	mov	r3, r9
 8003078:	eb45 0303 	adc.w	r3, r5, r3
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308a:	4629      	mov	r1, r5
 800308c:	028b      	lsls	r3, r1, #10
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003094:	4621      	mov	r1, r4
 8003096:	028a      	lsls	r2, r1, #10
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	2200      	movs	r2, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	61fa      	str	r2, [r7, #28]
 80030a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a8:	f7fd f8ea 	bl	8000280 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3750      	adds	r7, #80	; 0x50
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0b5b      	lsrs	r3, r3, #13
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	0800cb58 	.word	0x0800cb58

08003130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	220f      	movs	r2, #15
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <HAL_RCC_GetClockConfig+0x60>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40023c00 	.word	0x40023c00

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e041      	b.n	800322a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f839 	bl	8003232 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f9d8 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e04e      	b.n	80032fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a23      	ldr	r2, [pc, #140]	; (800330c <HAL_TIM_Base_Start_IT+0xc4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d01d      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_TIM_Base_Start_IT+0xc8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_TIM_Base_Start_IT+0xcc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_TIM_Base_Start_IT+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_TIM_Base_Start_IT+0xd4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d111      	bne.n	80032ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d010      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ea:	e007      	b.n	80032fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40001800 	.word	0x40001800

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0202 	mvn.w	r2, #2
 8003354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8ee 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8e0 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8f1 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8c4 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8b6 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8c7 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0208 	mvn.w	r2, #8
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f89a 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f88c 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f89d 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b10      	cmp	r3, #16
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0210 	mvn.w	r2, #16
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2208      	movs	r2, #8
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f870 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f862 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f873 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0201 	mvn.w	r2, #1
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fb08 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d107      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f902 	bl	80036dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d10e      	bne.n	8003504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f838 	bl	8003574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d10e      	bne.n	8003530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0220 	mvn.w	r2, #32
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8cc 	bl	80036c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <TIM_Base_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x114>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d027      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d023      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <TIM_Base_SetConfig+0x124>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d017      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <TIM_Base_SetConfig+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <TIM_Base_SetConfig+0x12c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <TIM_Base_SetConfig+0x130>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a25      	ldr	r2, [pc, #148]	; (80036bc <TIM_Base_SetConfig+0x134>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <TIM_Base_SetConfig+0x138>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <TIM_Base_SetConfig+0x13c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0xf8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <TIM_Base_SetConfig+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40001800 	.word	0x40001800
 80036c0:	40001c00 	.word	0x40001c00
 80036c4:	40002000 	.word	0x40002000

080036c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036f0:	b084      	sub	sp, #16
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	f107 001c 	add.w	r0, r7, #28
 80036fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	2b01      	cmp	r3, #1
 8003706:	d122      	bne.n	800374e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800371c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f001 fbee 	bl	8004f24 <USB_CoreReset>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e01a      	b.n	8003784 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f001 fbe2 	bl	8004f24 <USB_CoreReset>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
 8003776:	e005      	b.n	8003784 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	2b01      	cmp	r3, #1
 8003788:	d10b      	bne.n	80037a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f043 0206 	orr.w	r2, r3, #6
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ae:	b004      	add	sp, #16
 80037b0:	4770      	bx	lr
	...

080037b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d165      	bne.n	8003894 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <USB_SetTurnaroundTime+0x11c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d906      	bls.n	80037de <USB_SetTurnaroundTime+0x2a>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4a40      	ldr	r2, [pc, #256]	; (80038d4 <USB_SetTurnaroundTime+0x120>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d202      	bcs.n	80037de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037d8:	230f      	movs	r3, #15
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e062      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4a3c      	ldr	r2, [pc, #240]	; (80038d4 <USB_SetTurnaroundTime+0x120>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d306      	bcc.n	80037f4 <USB_SetTurnaroundTime+0x40>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <USB_SetTurnaroundTime+0x124>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d202      	bcs.n	80037f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037ee:	230e      	movs	r3, #14
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e057      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a38      	ldr	r2, [pc, #224]	; (80038d8 <USB_SetTurnaroundTime+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d306      	bcc.n	800380a <USB_SetTurnaroundTime+0x56>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a37      	ldr	r2, [pc, #220]	; (80038dc <USB_SetTurnaroundTime+0x128>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d202      	bcs.n	800380a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003804:	230d      	movs	r3, #13
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e04c      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4a33      	ldr	r2, [pc, #204]	; (80038dc <USB_SetTurnaroundTime+0x128>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d306      	bcc.n	8003820 <USB_SetTurnaroundTime+0x6c>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <USB_SetTurnaroundTime+0x12c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d802      	bhi.n	8003820 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800381a:	230c      	movs	r3, #12
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e041      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <USB_SetTurnaroundTime+0x12c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d906      	bls.n	8003836 <USB_SetTurnaroundTime+0x82>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a2e      	ldr	r2, [pc, #184]	; (80038e4 <USB_SetTurnaroundTime+0x130>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d802      	bhi.n	8003836 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003830:	230b      	movs	r3, #11
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e036      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4a2a      	ldr	r2, [pc, #168]	; (80038e4 <USB_SetTurnaroundTime+0x130>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d906      	bls.n	800384c <USB_SetTurnaroundTime+0x98>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <USB_SetTurnaroundTime+0x134>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003846:	230a      	movs	r3, #10
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e02b      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a26      	ldr	r2, [pc, #152]	; (80038e8 <USB_SetTurnaroundTime+0x134>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d906      	bls.n	8003862 <USB_SetTurnaroundTime+0xae>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a25      	ldr	r2, [pc, #148]	; (80038ec <USB_SetTurnaroundTime+0x138>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d202      	bcs.n	8003862 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800385c:	2309      	movs	r3, #9
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e020      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4a21      	ldr	r2, [pc, #132]	; (80038ec <USB_SetTurnaroundTime+0x138>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d306      	bcc.n	8003878 <USB_SetTurnaroundTime+0xc4>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <USB_SetTurnaroundTime+0x13c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d802      	bhi.n	8003878 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003872:	2308      	movs	r3, #8
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e015      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <USB_SetTurnaroundTime+0x13c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d906      	bls.n	800388e <USB_SetTurnaroundTime+0xda>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <USB_SetTurnaroundTime+0x140>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d202      	bcs.n	800388e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003888:	2307      	movs	r3, #7
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e00a      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800388e:	2306      	movs	r3, #6
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e007      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800389a:	2309      	movs	r3, #9
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e001      	b.n	80038a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038a0:	2309      	movs	r3, #9
 80038a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	00d8acbf 	.word	0x00d8acbf
 80038d4:	00e4e1c0 	.word	0x00e4e1c0
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	01067380 	.word	0x01067380
 80038e0:	011a499f 	.word	0x011a499f
 80038e4:	01312cff 	.word	0x01312cff
 80038e8:	014ca43f 	.word	0x014ca43f
 80038ec:	016e3600 	.word	0x016e3600
 80038f0:	01a6ab1f 	.word	0x01a6ab1f
 80038f4:	01e84800 	.word	0x01e84800

080038f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0201 	bic.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d115      	bne.n	800398a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800396a:	2001      	movs	r0, #1
 800396c:	f7fd fa3c 	bl	8000de8 <HAL_Delay>
      ms++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f001 fa45 	bl	8004e06 <USB_GetMode>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d01e      	beq.n	80039c0 <USB_SetCurrentMode+0x84>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b31      	cmp	r3, #49	; 0x31
 8003986:	d9f0      	bls.n	800396a <USB_SetCurrentMode+0x2e>
 8003988:	e01a      	b.n	80039c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d115      	bne.n	80039bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800399c:	2001      	movs	r0, #1
 800399e:	f7fd fa23 	bl	8000de8 <HAL_Delay>
      ms++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 fa2c 	bl	8004e06 <USB_GetMode>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <USB_SetCurrentMode+0x84>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b31      	cmp	r3, #49	; 0x31
 80039b8:	d9f0      	bls.n	800399c <USB_SetCurrentMode+0x60>
 80039ba:	e001      	b.n	80039c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e005      	b.n	80039cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b32      	cmp	r3, #50	; 0x32
 80039c4:	d101      	bne.n	80039ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039d4:	b084      	sub	sp, #16
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e009      	b.n	8003a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3340      	adds	r3, #64	; 0x40
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3301      	adds	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b0e      	cmp	r3, #14
 8003a0c:	d9f2      	bls.n	80039f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11c      	bne.n	8003a4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a4c:	e00b      	b.n	8003a66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2300      	movs	r3, #0
 8003a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	4619      	mov	r1, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	461a      	mov	r2, r3
 8003a82:	680b      	ldr	r3, [r1, #0]
 8003a84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10c      	bne.n	8003aa6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a92:	2100      	movs	r1, #0
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f965 	bl	8003d64 <USB_SetDevSpeed>
 8003a9a:	e008      	b.n	8003aae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f960 	bl	8003d64 <USB_SetDevSpeed>
 8003aa4:	e003      	b.n	8003aae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f95b 	bl	8003d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aae:	2110      	movs	r1, #16
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f8f3 	bl	8003c9c <USB_FlushTxFifo>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f91f 	bl	8003d04 <USB_FlushRxFifo>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	461a      	mov	r2, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e043      	b.n	8003b82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b10:	d118      	bne.n	8003b44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	461a      	mov	r2, r3
 8003b26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e013      	b.n	8003b56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e008      	b.n	8003b56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b62:	461a      	mov	r2, r3
 8003b64:	2300      	movs	r3, #0
 8003b66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	461a      	mov	r2, r3
 8003b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d3b7      	bcc.n	8003afa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	e043      	b.n	8003c18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba6:	d118      	bne.n	8003bda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e013      	b.n	8003bec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e008      	b.n	8003bec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	461a      	mov	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3301      	adds	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d3b7      	bcc.n	8003b90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f043 0210 	orr.w	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <USB_DevInit+0x2c4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f043 0208 	orr.w	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c94:	b004      	add	sp, #16
 8003c96:	4770      	bx	lr
 8003c98:	803c3800 	.word	0x803c3800

08003c9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <USB_FlushTxFifo+0x64>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e01b      	b.n	8003cf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	daf2      	bge.n	8003caa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	019b      	lsls	r3, r3, #6
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <USB_FlushTxFifo+0x64>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e006      	b.n	8003cf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d0f0      	beq.n	8003cd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	00030d40 	.word	0x00030d40

08003d04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <USB_FlushRxFifo+0x5c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e018      	b.n	8003d54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	daf2      	bge.n	8003d10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2210      	movs	r2, #16
 8003d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <USB_FlushRxFifo+0x5c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e006      	b.n	8003d54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d0f0      	beq.n	8003d34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	00030d40 	.word	0x00030d40

08003d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0306 	and.w	r3, r3, #6
 8003dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
 8003dba:	e00a      	b.n	8003dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d002      	beq.n	8003dc8 <USB_GetDevSpeed+0x32>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d102      	bne.n	8003dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
 8003dcc:	e001      	b.n	8003dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003dce:	230f      	movs	r3, #15
 8003dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d13a      	bne.n	8003e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d155      	bne.n	8003ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	791b      	ldrb	r3, [r3, #4]
 8003e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	059b      	lsls	r3, r3, #22
 8003e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e036      	b.n	8003ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11a      	bne.n	8003ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d161      	bne.n	8003fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f22:	d11f      	bne.n	8003f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f84:	4013      	ands	r3, r2
 8003f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <USB_DeactivateEndpoint+0x1b0>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
 8003fce:	e060      	b.n	8004092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe6:	d11f      	bne.n	8004028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	43db      	mvns	r3, r3
 8004042:	68f9      	ldr	r1, [r7, #12]
 8004044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004048:	4013      	ands	r3, r2
 800404a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2101      	movs	r1, #1
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	43db      	mvns	r3, r3
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800406c:	4013      	ands	r3, r2
 800406e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	0159      	lsls	r1, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	440b      	add	r3, r1
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	4619      	mov	r1, r3
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <USB_DeactivateEndpoint+0x1b4>)
 800408e:	4013      	ands	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	ec337800 	.word	0xec337800
 80040a4:	eff37800 	.word	0xeff37800

080040a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 815c 	bne.w	8004382 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d132      	bne.n	8004138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	0cdb      	lsrs	r3, r3, #19
 8004132:	04db      	lsls	r3, r3, #19
 8004134:	6113      	str	r3, [r2, #16]
 8004136:	e074      	b.n	8004222 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004152:	0cdb      	lsrs	r3, r3, #19
 8004154:	04db      	lsls	r3, r3, #19
 8004156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004172:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004176:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800417a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	440b      	add	r3, r1
 8004194:	1e59      	subs	r1, r3, #1
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	fbb1 f3f3 	udiv	r3, r1, r3
 800419e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041a0:	4b9d      	ldr	r3, [pc, #628]	; (8004418 <USB_EPStartXfer+0x370>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	69b9      	ldr	r1, [r7, #24]
 80041a6:	0148      	lsls	r0, r1, #5
 80041a8:	69f9      	ldr	r1, [r7, #28]
 80041aa:	4401      	add	r1, r0
 80041ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041b0:	4313      	orrs	r3, r2
 80041b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ca:	69b9      	ldr	r1, [r7, #24]
 80041cc:	0148      	lsls	r0, r1, #5
 80041ce:	69f9      	ldr	r1, [r7, #28]
 80041d0:	4401      	add	r1, r0
 80041d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041d6:	4313      	orrs	r3, r2
 80041d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	791b      	ldrb	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d11f      	bne.n	8004222 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004200:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004220:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d14b      	bne.n	80042c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	791b      	ldrb	r3, [r3, #4]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d128      	bne.n	800429e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d110      	bne.n	800427e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e00f      	b.n	800429e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	440a      	add	r2, r1
 8004294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e133      	b.n	8004528 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	791b      	ldrb	r3, [r3, #4]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d015      	beq.n	8004314 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 811b 	beq.w	8004528 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	69f9      	ldr	r1, [r7, #28]
 800430a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430e:	4313      	orrs	r3, r2
 8004310:	634b      	str	r3, [r1, #52]	; 0x34
 8004312:	e109      	b.n	8004528 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d110      	bne.n	8004346 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	e00f      	b.n	8004366 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6919      	ldr	r1, [r3, #16]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	b298      	uxth	r0, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4603      	mov	r3, r0
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fade 	bl	800493c <USB_WritePacket>
 8004380:	e0d2      	b.n	8004528 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800439c:	0cdb      	lsrs	r3, r3, #19
 800439e:	04db      	lsls	r3, r3, #19
 80043a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	0151      	lsls	r1, r2, #5
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	440a      	add	r2, r1
 80043b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d126      	bne.n	800441c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	0148      	lsls	r0, r1, #5
 80043e8:	69f9      	ldr	r1, [r7, #28]
 80043ea:	4401      	add	r1, r0
 80043ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043f0:	4313      	orrs	r3, r2
 80043f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004412:	6113      	str	r3, [r2, #16]
 8004414:	e03a      	b.n	800448c <USB_EPStartXfer+0x3e4>
 8004416:	bf00      	nop
 8004418:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4413      	add	r3, r2
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	8afa      	ldrh	r2, [r7, #22]
 8004438:	fb03 f202 	mul.w	r2, r3, r2
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	04d9      	lsls	r1, r3, #19
 8004452:	4b38      	ldr	r3, [pc, #224]	; (8004534 <USB_EPStartXfer+0x48c>)
 8004454:	400b      	ands	r3, r1
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	0148      	lsls	r0, r1, #5
 800445a:	69f9      	ldr	r1, [r7, #28]
 800445c:	4401      	add	r1, r0
 800445e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004462:	4313      	orrs	r3, r2
 8004464:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447c:	69b9      	ldr	r1, [r7, #24]
 800447e:	0148      	lsls	r0, r1, #5
 8004480:	69f9      	ldr	r1, [r7, #28]
 8004482:	4401      	add	r1, r0
 8004484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d10d      	bne.n	80044ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6919      	ldr	r1, [r3, #16]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	460a      	mov	r2, r1
 80044ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	791b      	ldrb	r3, [r3, #4]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d128      	bne.n	8004508 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d110      	bne.n	80044e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e00f      	b.n	8004508 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	1ff80000 	.word	0x1ff80000

08004538 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 80ce 	bne.w	80046f6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d132      	bne.n	80045c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004580:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c0:	0cdb      	lsrs	r3, r3, #19
 80045c2:	04db      	lsls	r3, r3, #19
 80045c4:	6113      	str	r3, [r2, #16]
 80045c6:	e04e      	b.n	8004666 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e2:	0cdb      	lsrs	r3, r3, #19
 80045e4:	04db      	lsls	r3, r3, #19
 80045e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800460a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800463e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004656:	6939      	ldr	r1, [r7, #16]
 8004658:	0148      	lsls	r0, r1, #5
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	4401      	add	r1, r0
 800465e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004662:	4313      	orrs	r3, r2
 8004664:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d11e      	bne.n	80046aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e097      	b.n	80047da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8083 	beq.w	80047da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	6979      	ldr	r1, [r7, #20]
 80046ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f0:	4313      	orrs	r3, r2
 80046f2:	634b      	str	r3, [r1, #52]	; 0x34
 80046f4:	e071      	b.n	80047da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	0cdb      	lsrs	r3, r3, #19
 8004712:	04db      	lsls	r3, r3, #19
 8004714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004730:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004734:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004738:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	6939      	ldr	r1, [r7, #16]
 800478a:	0148      	lsls	r0, r1, #5
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	4401      	add	r1, r0
 8004790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004794:	4313      	orrs	r3, r2
 8004796:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10d      	bne.n	80047ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6919      	ldr	r1, [r3, #16]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	460a      	mov	r2, r1
 80047b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d14a      	bne.n	800489c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481e:	f040 8086 	bne.w	800492e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004844:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f242 7210 	movw	r2, #10000	; 0x2710
 8004876:	4293      	cmp	r3, r2
 8004878:	d902      	bls.n	8004880 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
          break;
 800487e:	e056      	b.n	800492e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004898:	d0e7      	beq.n	800486a <USB_EPStopXfer+0x82>
 800489a:	e048      	b.n	800492e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b4:	d13b      	bne.n	800492e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	7812      	ldrb	r2, [r2, #0]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f242 7210 	movw	r2, #10000	; 0x2710
 800490a:	4293      	cmp	r3, r2
 800490c:	d902      	bls.n	8004914 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
          break;
 8004912:	e00c      	b.n	800492e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492c:	d0e7      	beq.n	80048fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4611      	mov	r1, r2
 8004948:	461a      	mov	r2, r3
 800494a:	460b      	mov	r3, r1
 800494c:	71fb      	strb	r3, [r7, #7]
 800494e:	4613      	mov	r3, r2
 8004950:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800495a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d123      	bne.n	80049aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004962:	88bb      	ldrh	r3, [r7, #4]
 8004964:	3303      	adds	r3, #3
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e018      	b.n	80049a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	031a      	lsls	r2, r3, #12
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	4413      	add	r3, r2
 8004978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497c:	461a      	mov	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	3301      	adds	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	3301      	adds	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d3e2      	bcc.n	8004970 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3724      	adds	r7, #36	; 0x24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b08b      	sub	sp, #44	; 0x2c
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	e014      	b.n	8004a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	3301      	adds	r3, #1
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	3301      	adds	r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	3301      	adds	r3, #1
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	3301      	adds	r3, #1
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	6a3a      	ldr	r2, [r7, #32]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3e6      	bcc.n	80049e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a16:	8bfb      	ldrh	r3, [r7, #30]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01e      	beq.n	8004a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	461a      	mov	r2, r3
 8004a28:	f107 0310 	add.w	r3, r7, #16
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	701a      	strb	r2, [r3, #0]
      i++;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	3301      	adds	r3, #1
 8004a46:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a4e:	8bfb      	ldrh	r3, [r7, #30]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a54:	8bfb      	ldrh	r3, [r7, #30]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ea      	bne.n	8004a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	372c      	adds	r7, #44	; 0x2c
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d12c      	bne.n	8004ade <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	db12      	blt.n	8004abc <USB_EPSetStall+0x54>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00f      	beq.n	8004abc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e02b      	b.n	8004b36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db12      	blt.n	8004b16 <USB_EPSetStall+0xae>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00f      	beq.n	8004b16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d128      	bne.n	8004bb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	791b      	ldrb	r3, [r3, #4]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d003      	beq.n	8004b90 <USB_EPClearStall+0x4c>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	791b      	ldrb	r3, [r3, #4]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d138      	bne.n	8004c02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e027      	b.n	8004c02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	791b      	ldrb	r3, [r3, #4]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d003      	beq.n	8004be2 <USB_EPClearStall+0x9e>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d10f      	bne.n	8004c02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8a:	f023 0302 	bic.w	r3, r3, #2
 8004c8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cb8:	f023 0303 	bic.w	r3, r3, #3
 8004cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ccc:	f043 0302 	orr.w	r3, r3, #2
 8004cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	b29b      	uxth	r3, r3
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	01db      	lsls	r3, r3, #7
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004df8:	68bb      	ldr	r3, [r7, #8]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0301 	and.w	r3, r3, #1
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e40:	f023 0307 	bic.w	r3, r3, #7
 8004e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	460b      	mov	r3, r1
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	333c      	adds	r3, #60	; 0x3c
 8004e7e:	3304      	adds	r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <USB_EP0_OutStart+0xb8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d90a      	bls.n	8004ea2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9c:	d101      	bne.n	8004ea2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e037      	b.n	8004f12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed0:	f043 0318 	orr.w	r3, r3, #24
 8004ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ee8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004eea:	7afb      	ldrb	r3, [r7, #11]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10f      	bne.n	8004f10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	4f54300a 	.word	0x4f54300a

08004f24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <USB_CoreReset+0x64>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e01b      	b.n	8004f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	daf2      	bge.n	8004f30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <USB_CoreReset+0x64>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e006      	b.n	8004f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d0f0      	beq.n	8004f5a <USB_CoreReset+0x36>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	00030d40 	.word	0x00030d40

08004f8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f9c:	f006 fee0 	bl	800bd60 <USBD_static_malloc>
 8004fa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	32b0      	adds	r2, #176	; 0xb0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0d4      	b.n	8005166 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004fbc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f006 ff4a 	bl	800be5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	32b0      	adds	r2, #176	; 0xb0
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	32b0      	adds	r2, #176	; 0xb0
 8004fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7c1b      	ldrb	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d138      	bne.n	8005066 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ff4:	4b5e      	ldr	r3, [pc, #376]	; (8005170 <USBD_CDC_Init+0x1e4>)
 8004ff6:	7819      	ldrb	r1, [r3, #0]
 8004ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f006 fd8b 	bl	800bb1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005004:	4b5a      	ldr	r3, [pc, #360]	; (8005170 <USBD_CDC_Init+0x1e4>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	2201      	movs	r2, #1
 800501c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800501e:	4b55      	ldr	r3, [pc, #340]	; (8005174 <USBD_CDC_Init+0x1e8>)
 8005020:	7819      	ldrb	r1, [r3, #0]
 8005022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005026:	2202      	movs	r2, #2
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f006 fd76 	bl	800bb1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800502e:	4b51      	ldr	r3, [pc, #324]	; (8005174 <USBD_CDC_Init+0x1e8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005046:	2201      	movs	r2, #1
 8005048:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800504a:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <USBD_CDC_Init+0x1ec>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3326      	adds	r3, #38	; 0x26
 8005060:	2210      	movs	r2, #16
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e035      	b.n	80050d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005066:	4b42      	ldr	r3, [pc, #264]	; (8005170 <USBD_CDC_Init+0x1e4>)
 8005068:	7819      	ldrb	r1, [r3, #0]
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	2202      	movs	r2, #2
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f006 fd53 	bl	800bb1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005074:	4b3e      	ldr	r3, [pc, #248]	; (8005170 <USBD_CDC_Init+0x1e4>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	3324      	adds	r3, #36	; 0x24
 800508a:	2201      	movs	r2, #1
 800508c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800508e:	4b39      	ldr	r3, [pc, #228]	; (8005174 <USBD_CDC_Init+0x1e8>)
 8005090:	7819      	ldrb	r1, [r3, #0]
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	2202      	movs	r2, #2
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f006 fd3f 	bl	800bb1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800509c:	4b35      	ldr	r3, [pc, #212]	; (8005174 <USBD_CDC_Init+0x1e8>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050b4:	2201      	movs	r2, #1
 80050b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050b8:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <USBD_CDC_Init+0x1ec>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 020f 	and.w	r2, r3, #15
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	3326      	adds	r3, #38	; 0x26
 80050ce:	2210      	movs	r2, #16
 80050d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <USBD_CDC_Init+0x1ec>)
 80050d4:	7819      	ldrb	r1, [r3, #0]
 80050d6:	2308      	movs	r3, #8
 80050d8:	2203      	movs	r2, #3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f006 fd1d 	bl	800bb1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <USBD_CDC_Init+0x1ec>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f003 020f 	and.w	r2, r3, #15
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	3324      	adds	r3, #36	; 0x24
 80050f6:	2201      	movs	r2, #1
 80050f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	33b0      	adds	r3, #176	; 0xb0
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005130:	2302      	movs	r3, #2
 8005132:	e018      	b.n	8005166 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7c1b      	ldrb	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <USBD_CDC_Init+0x1e8>)
 800513e:	7819      	ldrb	r1, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f006 fdd4 	bl	800bcf8 <USBD_LL_PrepareReceive>
 8005150:	e008      	b.n	8005164 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <USBD_CDC_Init+0x1e8>)
 8005154:	7819      	ldrb	r1, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f006 fdca 	bl	800bcf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000009f 	.word	0x2000009f
 8005174:	200000a0 	.word	0x200000a0
 8005178:	200000a1 	.word	0x200000a1

0800517c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005188:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <USBD_CDC_DeInit+0xf8>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f006 fce9 	bl	800bb66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005194:	4b37      	ldr	r3, [pc, #220]	; (8005274 <USBD_CDC_DeInit+0xf8>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3324      	adds	r3, #36	; 0x24
 80051aa:	2200      	movs	r2, #0
 80051ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80051ae:	4b32      	ldr	r3, [pc, #200]	; (8005278 <USBD_CDC_DeInit+0xfc>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f006 fcd6 	bl	800bb66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <USBD_CDC_DeInit+0xfc>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051d2:	2200      	movs	r2, #0
 80051d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80051d6:	4b29      	ldr	r3, [pc, #164]	; (800527c <USBD_CDC_DeInit+0x100>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f006 fcc2 	bl	800bb66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <USBD_CDC_DeInit+0x100>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3324      	adds	r3, #36	; 0x24
 80051f8:	2200      	movs	r2, #0
 80051fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051fc:	4b1f      	ldr	r3, [pc, #124]	; (800527c <USBD_CDC_DeInit+0x100>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	f003 020f 	and.w	r2, r3, #15
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	3326      	adds	r3, #38	; 0x26
 8005212:	2200      	movs	r2, #0
 8005214:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	32b0      	adds	r2, #176	; 0xb0
 8005220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01f      	beq.n	8005268 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	33b0      	adds	r3, #176	; 0xb0
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	32b0      	adds	r2, #176	; 0xb0
 8005246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524a:	4618      	mov	r0, r3
 800524c:	f006 fd96 	bl	800bd7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	32b0      	adds	r2, #176	; 0xb0
 800525a:	2100      	movs	r1, #0
 800525c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000009f 	.word	0x2000009f
 8005278:	200000a0 	.word	0x200000a0
 800527c:	200000a1 	.word	0x200000a1

08005280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	32b0      	adds	r2, #176	; 0xb0
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0bf      	b.n	8005430 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d050      	beq.n	800535e <USBD_CDC_Setup+0xde>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	f040 80af 	bne.w	8005420 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	88db      	ldrh	r3, [r3, #6]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03a      	beq.n	8005340 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b25b      	sxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da1b      	bge.n	800530c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	33b0      	adds	r3, #176	; 0xb0
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	88d2      	ldrh	r2, [r2, #6]
 80052f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	88db      	ldrh	r3, [r3, #6]
 80052f6:	2b07      	cmp	r3, #7
 80052f8:	bf28      	it	cs
 80052fa:	2307      	movcs	r3, #7
 80052fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	89fa      	ldrh	r2, [r7, #14]
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fd89 	bl	8006e1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800530a:	e090      	b.n	800542e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	785a      	ldrb	r2, [r3, #1]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	88db      	ldrh	r3, [r3, #6]
 800531a:	2b3f      	cmp	r3, #63	; 0x3f
 800531c:	d803      	bhi.n	8005326 <USBD_CDC_Setup+0xa6>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	88db      	ldrh	r3, [r3, #6]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	e000      	b.n	8005328 <USBD_CDC_Setup+0xa8>
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800532e:	6939      	ldr	r1, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005336:	461a      	mov	r2, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 fd9b 	bl	8006e74 <USBD_CtlPrepareRx>
      break;
 800533e:	e076      	b.n	800542e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	33b0      	adds	r3, #176	; 0xb0
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	7850      	ldrb	r0, [r2, #1]
 8005356:	2200      	movs	r2, #0
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	4798      	blx	r3
      break;
 800535c:	e067      	b.n	800542e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b0b      	cmp	r3, #11
 8005364:	d851      	bhi.n	800540a <USBD_CDC_Setup+0x18a>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <USBD_CDC_Setup+0xec>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	0800539d 	.word	0x0800539d
 8005370:	08005419 	.word	0x08005419
 8005374:	0800540b 	.word	0x0800540b
 8005378:	0800540b 	.word	0x0800540b
 800537c:	0800540b 	.word	0x0800540b
 8005380:	0800540b 	.word	0x0800540b
 8005384:	0800540b 	.word	0x0800540b
 8005388:	0800540b 	.word	0x0800540b
 800538c:	0800540b 	.word	0x0800540b
 8005390:	0800540b 	.word	0x0800540b
 8005394:	080053c7 	.word	0x080053c7
 8005398:	080053f1 	.word	0x080053f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d107      	bne.n	80053b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053a8:	f107 030a 	add.w	r3, r7, #10
 80053ac:	2202      	movs	r2, #2
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fd33 	bl	8006e1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053b6:	e032      	b.n	800541e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 fcbd 	bl	8006d3a <USBD_CtlError>
            ret = USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	75fb      	strb	r3, [r7, #23]
          break;
 80053c4:	e02b      	b.n	800541e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053d2:	f107 030d 	add.w	r3, r7, #13
 80053d6:	2201      	movs	r2, #1
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 fd1e 	bl	8006e1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053e0:	e01d      	b.n	800541e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 fca8 	bl	8006d3a <USBD_CtlError>
            ret = USBD_FAIL;
 80053ea:	2303      	movs	r3, #3
 80053ec:	75fb      	strb	r3, [r7, #23]
          break;
 80053ee:	e016      	b.n	800541e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d00f      	beq.n	800541c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fc9b 	bl	8006d3a <USBD_CtlError>
            ret = USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005408:	e008      	b.n	800541c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 fc94 	bl	8006d3a <USBD_CtlError>
          ret = USBD_FAIL;
 8005412:	2303      	movs	r3, #3
 8005414:	75fb      	strb	r3, [r7, #23]
          break;
 8005416:	e002      	b.n	800541e <USBD_CDC_Setup+0x19e>
          break;
 8005418:	bf00      	nop
 800541a:	e008      	b.n	800542e <USBD_CDC_Setup+0x1ae>
          break;
 800541c:	bf00      	nop
      }
      break;
 800541e:	e006      	b.n	800542e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 fc89 	bl	8006d3a <USBD_CtlError>
      ret = USBD_FAIL;
 8005428:	2303      	movs	r3, #3
 800542a:	75fb      	strb	r3, [r7, #23]
      break;
 800542c:	bf00      	nop
  }

  return (uint8_t)ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800544a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	32b0      	adds	r2, #176	; 0xb0
 8005456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	e065      	b.n	800552e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	32b0      	adds	r2, #176	; 0xb0
 800546c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005470:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	f003 020f 	and.w	r2, r3, #15
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	3318      	adds	r3, #24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d02f      	beq.n	80054ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3318      	adds	r3, #24
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	f003 010f 	and.w	r1, r3, #15
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	460b      	mov	r3, r1
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4403      	add	r3, r0
 80054b4:	3348      	adds	r3, #72	; 0x48
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d112      	bne.n	80054ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	f003 020f 	and.w	r2, r3, #15
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	3318      	adds	r3, #24
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054de:	78f9      	ldrb	r1, [r7, #3]
 80054e0:	2300      	movs	r3, #0
 80054e2:	2200      	movs	r2, #0
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f006 fbe6 	bl	800bcb6 <USBD_LL_Transmit>
 80054ea:	e01f      	b.n	800552c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	33b0      	adds	r3, #176	; 0xb0
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d010      	beq.n	800552c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	33b0      	adds	r3, #176	; 0xb0
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	32b0      	adds	r2, #176	; 0xb0
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	32b0      	adds	r2, #176	; 0xb0
 800555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005564:	2303      	movs	r3, #3
 8005566:	e01a      	b.n	800559e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f006 fbe4 	bl	800bd3a <USBD_LL_GetRxDataSize>
 8005572:	4602      	mov	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	33b0      	adds	r3, #176	; 0xb0
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005598:	4611      	mov	r1, r2
 800559a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	32b0      	adds	r2, #176	; 0xb0
 80055b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e025      	b.n	8005614 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	33b0      	adds	r3, #176	; 0xb0
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01a      	beq.n	8005612 <USBD_CDC_EP0_RxReady+0x6c>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055e2:	2bff      	cmp	r3, #255	; 0xff
 80055e4:	d015      	beq.n	8005612 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	33b0      	adds	r3, #176	; 0xb0
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005606:	b292      	uxth	r2, r2
 8005608:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005624:	2182      	movs	r1, #130	; 0x82
 8005626:	4818      	ldr	r0, [pc, #96]	; (8005688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005628:	f000 fd4f 	bl	80060ca <USBD_GetEpDesc>
 800562c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800562e:	2101      	movs	r1, #1
 8005630:	4815      	ldr	r0, [pc, #84]	; (8005688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005632:	f000 fd4a 	bl	80060ca <USBD_GetEpDesc>
 8005636:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005638:	2181      	movs	r1, #129	; 0x81
 800563a:	4813      	ldr	r0, [pc, #76]	; (8005688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800563c:	f000 fd45 	bl	80060ca <USBD_GetEpDesc>
 8005640:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2210      	movs	r2, #16
 800564c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d006      	beq.n	8005662 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2200      	movs	r2, #0
 8005658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565c:	711a      	strb	r2, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005670:	711a      	strb	r2, [r3, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2243      	movs	r2, #67	; 0x43
 800567a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800567c:	4b02      	ldr	r3, [pc, #8]	; (8005688 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	2000005c 	.word	0x2000005c

0800568c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005694:	2182      	movs	r1, #130	; 0x82
 8005696:	4818      	ldr	r0, [pc, #96]	; (80056f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005698:	f000 fd17 	bl	80060ca <USBD_GetEpDesc>
 800569c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800569e:	2101      	movs	r1, #1
 80056a0:	4815      	ldr	r0, [pc, #84]	; (80056f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056a2:	f000 fd12 	bl	80060ca <USBD_GetEpDesc>
 80056a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056a8:	2181      	movs	r1, #129	; 0x81
 80056aa:	4813      	ldr	r0, [pc, #76]	; (80056f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056ac:	f000 fd0d 	bl	80060ca <USBD_GetEpDesc>
 80056b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2210      	movs	r2, #16
 80056bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2200      	movs	r2, #0
 80056c8:	711a      	strb	r2, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f042 0202 	orr.w	r2, r2, #2
 80056d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	711a      	strb	r2, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f042 0202 	orr.w	r2, r2, #2
 80056e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2243      	movs	r2, #67	; 0x43
 80056ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	2000005c 	.word	0x2000005c

080056fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005704:	2182      	movs	r1, #130	; 0x82
 8005706:	4818      	ldr	r0, [pc, #96]	; (8005768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005708:	f000 fcdf 	bl	80060ca <USBD_GetEpDesc>
 800570c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800570e:	2101      	movs	r1, #1
 8005710:	4815      	ldr	r0, [pc, #84]	; (8005768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005712:	f000 fcda 	bl	80060ca <USBD_GetEpDesc>
 8005716:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005718:	2181      	movs	r1, #129	; 0x81
 800571a:	4813      	ldr	r0, [pc, #76]	; (8005768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800571c:	f000 fcd5 	bl	80060ca <USBD_GetEpDesc>
 8005720:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2210      	movs	r2, #16
 800572c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2200      	movs	r2, #0
 8005738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573c:	711a      	strb	r2, [r3, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005750:	711a      	strb	r2, [r3, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2243      	movs	r2, #67	; 0x43
 800575a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	2000005c 	.word	0x2000005c

0800576c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	220a      	movs	r2, #10
 8005778:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000018 	.word	0x20000018

0800578c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800579c:	2303      	movs	r3, #3
 800579e:	e009      	b.n	80057b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	33b0      	adds	r3, #176	; 0xb0
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	32b0      	adds	r2, #176	; 0xb0
 80057d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e008      	b.n	80057f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	32b0      	adds	r2, #176	; 0xb0
 8005818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e004      	b.n	8005832 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	32b0      	adds	r2, #176	; 0xb0
 8005852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005856:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	32b0      	adds	r2, #176	; 0xb0
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800586e:	2303      	movs	r3, #3
 8005870:	e025      	b.n	80058be <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11f      	bne.n	80058bc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2201      	movs	r2, #1
 8005880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <USBD_CDC_TransmitPacket+0x88>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4403      	add	r3, r0
 800589e:	3318      	adds	r3, #24
 80058a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <USBD_CDC_TransmitPacket+0x88>)
 80058a4:	7819      	ldrb	r1, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f006 f9ff 	bl	800bcb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2000009f 	.word	0x2000009f

080058cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32b0      	adds	r2, #176	; 0xb0
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	32b0      	adds	r2, #176	; 0xb0
 80058ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e018      	b.n	800592c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c1b      	ldrb	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <USBD_CDC_ReceivePacket+0x68>)
 8005904:	7819      	ldrb	r1, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800590c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f006 f9f1 	bl	800bcf8 <USBD_LL_PrepareReceive>
 8005916:	e008      	b.n	800592a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <USBD_CDC_ReceivePacket+0x68>)
 800591a:	7819      	ldrb	r1, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f006 f9e7 	bl	800bcf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	200000a0 	.word	0x200000a0

08005938 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	4613      	mov	r3, r2
 8005944:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800594c:	2303      	movs	r3, #3
 800594e:	e01f      	b.n	8005990 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	79fa      	ldrb	r2, [r7, #7]
 8005982:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f006 f861 	bl	800ba4c <USBD_LL_Init>
 800598a:	4603      	mov	r3, r0
 800598c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e025      	b.n	80059fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	32ae      	adds	r2, #174	; 0xae
 80059c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	32ae      	adds	r2, #174	; 0xae
 80059d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f107 020e 	add.w	r2, r7, #14
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
 80059e4:	4602      	mov	r2, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f006 f869 	bl	800bae4 <USBD_LL_Start>
 8005a12:	4603      	mov	r3, r0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	4611      	mov	r1, r2
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4798      	blx	r3
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	4611      	mov	r1, r2
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f908 	bl	8006cc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d01a      	beq.n	8005b10 <USBD_LL_SetupStage+0x72>
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d822      	bhi.n	8005b24 <USBD_LL_SetupStage+0x86>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <USBD_LL_SetupStage+0x4a>
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d00a      	beq.n	8005afc <USBD_LL_SetupStage+0x5e>
 8005ae6:	e01d      	b.n	8005b24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb5f 	bl	80061b4 <USBD_StdDevReq>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
      break;
 8005afa:	e020      	b.n	8005b3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fbc7 	bl	8006298 <USBD_StdItfReq>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0e:	e016      	b.n	8005b3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fc29 	bl	8006370 <USBD_StdEPReq>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	73fb      	strb	r3, [r7, #15]
      break;
 8005b22:	e00c      	b.n	8005b3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f006 f836 	bl	800bba4 <USBD_LL_StallEP>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3c:	bf00      	nop
  }

  return ret;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	460b      	mov	r3, r1
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d16e      	bne.n	8005c3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	f040 8098 	bne.w	8005ca4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d913      	bls.n	8005ba8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4293      	cmp	r3, r2
 8005b98:	bf28      	it	cs
 8005b9a:	4613      	movcs	r3, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f001 f984 	bl	8006eae <USBD_CtlContinueRx>
 8005ba6:	e07d      	b.n	8005ca4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d014      	beq.n	8005be0 <USBD_LL_DataOutStage+0x98>
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d81d      	bhi.n	8005bf6 <USBD_LL_DataOutStage+0xae>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <USBD_LL_DataOutStage+0x7c>
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d003      	beq.n	8005bca <USBD_LL_DataOutStage+0x82>
 8005bc2:	e018      	b.n	8005bf6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	75bb      	strb	r3, [r7, #22]
            break;
 8005bc8:	e018      	b.n	8005bfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa5e 	bl	8006096 <USBD_CoreFindIF>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8005bde:	e00d      	b.n	8005bfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	4619      	mov	r1, r3
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa60 	bl	80060b0 <USBD_CoreFindEP>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75bb      	strb	r3, [r7, #22]
            break;
 8005bf4:	e002      	b.n	8005bfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75bb      	strb	r3, [r7, #22]
            break;
 8005bfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bfc:	7dbb      	ldrb	r3, [r7, #22]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d119      	bne.n	8005c36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d113      	bne.n	8005c36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c0e:	7dba      	ldrb	r2, [r7, #22]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	32ae      	adds	r2, #174	; 0xae
 8005c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c1e:	7dba      	ldrb	r2, [r7, #22]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c26:	7dba      	ldrb	r2, [r7, #22]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	32ae      	adds	r2, #174	; 0xae
 8005c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f001 f94a 	bl	8006ed0 <USBD_CtlSendStatus>
 8005c3c:	e032      	b.n	8005ca4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fa31 	bl	80060b0 <USBD_CoreFindEP>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c52:	7dbb      	ldrb	r3, [r7, #22]
 8005c54:	2bff      	cmp	r3, #255	; 0xff
 8005c56:	d025      	beq.n	8005ca4 <USBD_LL_DataOutStage+0x15c>
 8005c58:	7dbb      	ldrb	r3, [r7, #22]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d122      	bne.n	8005ca4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d117      	bne.n	8005c9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c6a:	7dba      	ldrb	r2, [r7, #22]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	32ae      	adds	r2, #174	; 0xae
 8005c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00f      	beq.n	8005c9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c7a:	7dba      	ldrb	r2, [r7, #22]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c82:	7dba      	ldrb	r2, [r7, #22]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	32ae      	adds	r2, #174	; 0xae
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	7afa      	ldrb	r2, [r7, #11]
 8005c90:	4611      	mov	r1, r2
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4798      	blx	r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	e000      	b.n	8005ca6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005cbc:	7afb      	ldrb	r3, [r7, #11]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d16f      	bne.n	8005da2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d15a      	bne.n	8005d88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d914      	bls.n	8005d08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f001 f8ac 	bl	8006e52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f005 fff9 	bl	800bcf8 <USBD_LL_PrepareReceive>
 8005d06:	e03f      	b.n	8005d88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d11c      	bne.n	8005d4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d316      	bcc.n	8005d4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d20f      	bcs.n	8005d4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2100      	movs	r1, #0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f001 f88d 	bl	8006e52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d40:	2300      	movs	r3, #0
 8005d42:	2200      	movs	r2, #0
 8005d44:	2100      	movs	r1, #0
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f005 ffd6 	bl	800bcf8 <USBD_LL_PrepareReceive>
 8005d4c:	e01c      	b.n	8005d88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d10f      	bne.n	8005d7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f005 ff11 	bl	800bba4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f001 f8b7 	bl	8006ef6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d03a      	beq.n	8005e08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff fe42 	bl	8005a1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005da0:	e032      	b.n	8005e08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f97f 	bl	80060b0 <USBD_CoreFindEP>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	2bff      	cmp	r3, #255	; 0xff
 8005dba:	d025      	beq.n	8005e08 <USBD_LL_DataInStage+0x15a>
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d122      	bne.n	8005e08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d11c      	bne.n	8005e08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dce:	7dfa      	ldrb	r2, [r7, #23]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	32ae      	adds	r2, #174	; 0xae
 8005dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d014      	beq.n	8005e08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005dde:	7dfa      	ldrb	r2, [r7, #23]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005de6:	7dfa      	ldrb	r2, [r7, #23]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	32ae      	adds	r2, #174	; 0xae
 8005dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	7afa      	ldrb	r2, [r7, #11]
 8005df4:	4611      	mov	r1, r2
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	4798      	blx	r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005dfe:	7dbb      	ldrb	r3, [r7, #22]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e04:	7dbb      	ldrb	r3, [r7, #22]
 8005e06:	e000      	b.n	8005e0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d014      	beq.n	8005e78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00e      	beq.n	8005e78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6852      	ldr	r2, [r2, #4]
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	4611      	mov	r1, r2
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f005 fe4b 	bl	800bb1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2240      	movs	r2, #64	; 0x40
 8005e90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	2200      	movs	r2, #0
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f005 fe3d 	bl	800bb1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2240      	movs	r2, #64	; 0x40
 8005eaa:	621a      	str	r2, [r3, #32]

  return ret;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d106      	bne.n	8005f24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d110      	bne.n	8005f68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	32ae      	adds	r2, #174	; 0xae
 8005f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e01c      	b.n	8005fce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d115      	bne.n	8005fcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32ae      	adds	r2, #174	; 0xae
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32ae      	adds	r2, #174	; 0xae
 8005fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	32ae      	adds	r2, #174	; 0xae
 8005fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e01c      	b.n	8006032 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b03      	cmp	r3, #3
 8006002:	d115      	bne.n	8006030 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	32ae      	adds	r2, #174	; 0xae
 800600e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00b      	beq.n	8006030 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	32ae      	adds	r2, #174	; 0xae
 8006022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	4611      	mov	r1, r2
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6852      	ldr	r2, [r2, #4]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	4611      	mov	r1, r2
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006088:	2303      	movs	r3, #3
 800608a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d920      	bls.n	8006134 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060fa:	e013      	b.n	8006124 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060fc:	f107 030a 	add.w	r3, r7, #10
 8006100:	4619      	mov	r1, r3
 8006102:	6978      	ldr	r0, [r7, #20]
 8006104:	f000 f81b 	bl	800613e <USBD_GetNextDesc>
 8006108:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b05      	cmp	r3, #5
 8006110:	d108      	bne.n	8006124 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	789b      	ldrb	r3, [r3, #2]
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	429a      	cmp	r2, r3
 800611e:	d008      	beq.n	8006132 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	885b      	ldrh	r3, [r3, #2]
 8006128:	b29a      	uxth	r2, r3
 800612a:	897b      	ldrh	r3, [r7, #10]
 800612c:	429a      	cmp	r2, r3
 800612e:	d8e5      	bhi.n	80060fc <USBD_GetEpDesc+0x32>
 8006130:	e000      	b.n	8006134 <USBD_GetEpDesc+0x6a>
          break;
 8006132:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006134:	693b      	ldr	r3, [r7, #16]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800613e:	b480      	push	{r7}
 8006140:	b085      	sub	sp, #20
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	4413      	add	r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	3301      	adds	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006196:	8a3b      	ldrh	r3, [r7, #16]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	b21a      	sxth	r2, r3
 800619c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061a6:	89fb      	ldrh	r3, [r7, #14]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ca:	2b40      	cmp	r3, #64	; 0x40
 80061cc:	d005      	beq.n	80061da <USBD_StdDevReq+0x26>
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d857      	bhi.n	8006282 <USBD_StdDevReq+0xce>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00f      	beq.n	80061f6 <USBD_StdDevReq+0x42>
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d153      	bne.n	8006282 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	32ae      	adds	r2, #174	; 0xae
 80061e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]
      break;
 80061f4:	e04a      	b.n	800628c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	2b09      	cmp	r3, #9
 80061fc:	d83b      	bhi.n	8006276 <USBD_StdDevReq+0xc2>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <USBD_StdDevReq+0x50>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006259 	.word	0x08006259
 8006208:	0800626d 	.word	0x0800626d
 800620c:	08006277 	.word	0x08006277
 8006210:	08006263 	.word	0x08006263
 8006214:	08006277 	.word	0x08006277
 8006218:	08006237 	.word	0x08006237
 800621c:	0800622d 	.word	0x0800622d
 8006220:	08006277 	.word	0x08006277
 8006224:	0800624f 	.word	0x0800624f
 8006228:	08006241 	.word	0x08006241
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa3c 	bl	80066ac <USBD_GetDescriptor>
          break;
 8006234:	e024      	b.n	8006280 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fba1 	bl	8006980 <USBD_SetAddress>
          break;
 800623e:	e01f      	b.n	8006280 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fbe0 	bl	8006a08 <USBD_SetConfig>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
          break;
 800624c:	e018      	b.n	8006280 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc83 	bl	8006b5c <USBD_GetConfig>
          break;
 8006256:	e013      	b.n	8006280 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fcb4 	bl	8006bc8 <USBD_GetStatus>
          break;
 8006260:	e00e      	b.n	8006280 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fce3 	bl	8006c30 <USBD_SetFeature>
          break;
 800626a:	e009      	b.n	8006280 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fd07 	bl	8006c82 <USBD_ClrFeature>
          break;
 8006274:	e004      	b.n	8006280 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fd5e 	bl	8006d3a <USBD_CtlError>
          break;
 800627e:	bf00      	nop
      }
      break;
 8006280:	e004      	b.n	800628c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fd58 	bl	8006d3a <USBD_CtlError>
      break;
 800628a:	bf00      	nop
  }

  return ret;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop

08006298 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d005      	beq.n	80062be <USBD_StdItfReq+0x26>
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d852      	bhi.n	800635c <USBD_StdItfReq+0xc4>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <USBD_StdItfReq+0x26>
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d14e      	bne.n	800635c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d840      	bhi.n	800634e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	889b      	ldrh	r3, [r3, #4]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d836      	bhi.n	8006344 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	889b      	ldrh	r3, [r3, #4]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fed9 	bl	8006096 <USBD_CoreFindIF>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	2bff      	cmp	r3, #255	; 0xff
 80062ec:	d01d      	beq.n	800632a <USBD_StdItfReq+0x92>
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11a      	bne.n	800632a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062f4:	7bba      	ldrb	r2, [r7, #14]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32ae      	adds	r2, #174	; 0xae
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00f      	beq.n	8006324 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006304:	7bba      	ldrb	r2, [r7, #14]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800630c:	7bba      	ldrb	r2, [r7, #14]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32ae      	adds	r2, #174	; 0xae
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
 800631e:	4603      	mov	r3, r0
 8006320:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006322:	e004      	b.n	800632e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006324:	2303      	movs	r3, #3
 8006326:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006328:	e001      	b.n	800632e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	88db      	ldrh	r3, [r3, #6]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d110      	bne.n	8006358 <USBD_StdItfReq+0xc0>
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10d      	bne.n	8006358 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fdc7 	bl	8006ed0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006342:	e009      	b.n	8006358 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fcf7 	bl	8006d3a <USBD_CtlError>
          break;
 800634c:	e004      	b.n	8006358 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fcf2 	bl	8006d3a <USBD_CtlError>
          break;
 8006356:	e000      	b.n	800635a <USBD_StdItfReq+0xc2>
          break;
 8006358:	bf00      	nop
      }
      break;
 800635a:	e004      	b.n	8006366 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fceb 	bl	8006d3a <USBD_CtlError>
      break;
 8006364:	bf00      	nop
  }

  return ret;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	889b      	ldrh	r3, [r3, #4]
 8006382:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d007      	beq.n	80063a0 <USBD_StdEPReq+0x30>
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	f200 817f 	bhi.w	8006694 <USBD_StdEPReq+0x324>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d02a      	beq.n	80063f0 <USBD_StdEPReq+0x80>
 800639a:	2b20      	cmp	r3, #32
 800639c:	f040 817a 	bne.w	8006694 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff fe83 	bl	80060b0 <USBD_CoreFindEP>
 80063aa:	4603      	mov	r3, r0
 80063ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063ae:	7b7b      	ldrb	r3, [r7, #13]
 80063b0:	2bff      	cmp	r3, #255	; 0xff
 80063b2:	f000 8174 	beq.w	800669e <USBD_StdEPReq+0x32e>
 80063b6:	7b7b      	ldrb	r3, [r7, #13]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 8170 	bne.w	800669e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063be:	7b7a      	ldrb	r2, [r7, #13]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063c6:	7b7a      	ldrb	r2, [r7, #13]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	32ae      	adds	r2, #174	; 0xae
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8163 	beq.w	800669e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063d8:	7b7a      	ldrb	r2, [r7, #13]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	; 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ee:	e156      	b.n	800669e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d008      	beq.n	800640a <USBD_StdEPReq+0x9a>
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	f300 8145 	bgt.w	8006688 <USBD_StdEPReq+0x318>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 809b 	beq.w	800653a <USBD_StdEPReq+0x1ca>
 8006404:	2b01      	cmp	r3, #1
 8006406:	d03c      	beq.n	8006482 <USBD_StdEPReq+0x112>
 8006408:	e13e      	b.n	8006688 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d002      	beq.n	800641c <USBD_StdEPReq+0xac>
 8006416:	2b03      	cmp	r3, #3
 8006418:	d016      	beq.n	8006448 <USBD_StdEPReq+0xd8>
 800641a:	e02c      	b.n	8006476 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <USBD_StdEPReq+0xce>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d00a      	beq.n	800643e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f005 fbb9 	bl	800bba4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f005 fbb5 	bl	800bba4 <USBD_LL_StallEP>
 800643a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800643c:	e020      	b.n	8006480 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc7a 	bl	8006d3a <USBD_CtlError>
              break;
 8006446:	e01b      	b.n	8006480 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	885b      	ldrh	r3, [r3, #2]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10e      	bne.n	800646e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <USBD_StdEPReq+0xfe>
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b80      	cmp	r3, #128	; 0x80
 800645a:	d008      	beq.n	800646e <USBD_StdEPReq+0xfe>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	88db      	ldrh	r3, [r3, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f005 fb9b 	bl	800bba4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fd2e 	bl	8006ed0 <USBD_CtlSendStatus>

              break;
 8006474:	e004      	b.n	8006480 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc5e 	bl	8006d3a <USBD_CtlError>
              break;
 800647e:	bf00      	nop
          }
          break;
 8006480:	e107      	b.n	8006692 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d002      	beq.n	8006494 <USBD_StdEPReq+0x124>
 800648e:	2b03      	cmp	r3, #3
 8006490:	d016      	beq.n	80064c0 <USBD_StdEPReq+0x150>
 8006492:	e04b      	b.n	800652c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <USBD_StdEPReq+0x146>
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b80      	cmp	r3, #128	; 0x80
 800649e:	d00a      	beq.n	80064b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f005 fb7d 	bl	800bba4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f005 fb79 	bl	800bba4 <USBD_LL_StallEP>
 80064b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064b4:	e040      	b.n	8006538 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc3e 	bl	8006d3a <USBD_CtlError>
              break;
 80064be:	e03b      	b.n	8006538 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d136      	bne.n	8006536 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f005 fb83 	bl	800bbe2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fcf7 	bl	8006ed0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fde2 	bl	80060b0 <USBD_CoreFindEP>
 80064ec:	4603      	mov	r3, r0
 80064ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064f0:	7b7b      	ldrb	r3, [r7, #13]
 80064f2:	2bff      	cmp	r3, #255	; 0xff
 80064f4:	d01f      	beq.n	8006536 <USBD_StdEPReq+0x1c6>
 80064f6:	7b7b      	ldrb	r3, [r7, #13]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11c      	bne.n	8006536 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064fc:	7b7a      	ldrb	r2, [r7, #13]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006504:	7b7a      	ldrb	r2, [r7, #13]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32ae      	adds	r2, #174	; 0xae
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d010      	beq.n	8006536 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006514:	7b7a      	ldrb	r2, [r7, #13]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	32ae      	adds	r2, #174	; 0xae
 800651a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800652a:	e004      	b.n	8006536 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fc03 	bl	8006d3a <USBD_CtlError>
              break;
 8006534:	e000      	b.n	8006538 <USBD_StdEPReq+0x1c8>
              break;
 8006536:	bf00      	nop
          }
          break;
 8006538:	e0ab      	b.n	8006692 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d002      	beq.n	800654c <USBD_StdEPReq+0x1dc>
 8006546:	2b03      	cmp	r3, #3
 8006548:	d032      	beq.n	80065b0 <USBD_StdEPReq+0x240>
 800654a:	e097      	b.n	800667c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <USBD_StdEPReq+0x1f2>
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b80      	cmp	r3, #128	; 0x80
 8006556:	d004      	beq.n	8006562 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fbed 	bl	8006d3a <USBD_CtlError>
                break;
 8006560:	e091      	b.n	8006686 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006566:	2b00      	cmp	r3, #0
 8006568:	da0b      	bge.n	8006582 <USBD_StdEPReq+0x212>
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	3310      	adds	r3, #16
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	3304      	adds	r3, #4
 8006580:	e00b      	b.n	800659a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	3304      	adds	r3, #4
 800659a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2202      	movs	r2, #2
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fc37 	bl	8006e1c <USBD_CtlSendData>
              break;
 80065ae:	e06a      	b.n	8006686 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da11      	bge.n	80065dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	3324      	adds	r3, #36	; 0x24
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d117      	bne.n	8006602 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fbb0 	bl	8006d3a <USBD_CtlError>
                  break;
 80065da:	e054      	b.n	8006686 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	f003 020f 	and.w	r2, r3, #15
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fb9d 	bl	8006d3a <USBD_CtlError>
                  break;
 8006600:	e041      	b.n	8006686 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006606:	2b00      	cmp	r3, #0
 8006608:	da0b      	bge.n	8006622 <USBD_StdEPReq+0x2b2>
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	3310      	adds	r3, #16
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	3304      	adds	r3, #4
 8006620:	e00b      	b.n	800663a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4413      	add	r3, r2
 8006638:	3304      	adds	r3, #4
 800663a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <USBD_StdEPReq+0x2d8>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d103      	bne.n	8006650 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e00e      	b.n	800666e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f005 fae3 	bl	800bc20 <USBD_LL_IsStallEP>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e002      	b.n	800666e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2202      	movs	r2, #2
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fbd1 	bl	8006e1c <USBD_CtlSendData>
              break;
 800667a:	e004      	b.n	8006686 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fb5b 	bl	8006d3a <USBD_CtlError>
              break;
 8006684:	bf00      	nop
          }
          break;
 8006686:	e004      	b.n	8006692 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fb55 	bl	8006d3a <USBD_CtlError>
          break;
 8006690:	bf00      	nop
      }
      break;
 8006692:	e005      	b.n	80066a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fb4f 	bl	8006d3a <USBD_CtlError>
      break;
 800669c:	e000      	b.n	80066a0 <USBD_StdEPReq+0x330>
      break;
 800669e:	bf00      	nop
  }

  return ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	885b      	ldrh	r3, [r3, #2]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	f200 8128 	bhi.w	8006922 <USBD_GetDescriptor+0x276>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <USBD_GetDescriptor+0x2c>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	0800674d 	.word	0x0800674d
 80066e4:	08006923 	.word	0x08006923
 80066e8:	08006923 	.word	0x08006923
 80066ec:	080068c3 	.word	0x080068c3
 80066f0:	080068ef 	.word	0x080068ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	7c12      	ldrb	r2, [r2, #16]
 8006700:	f107 0108 	add.w	r1, r7, #8
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	60f8      	str	r0, [r7, #12]
      break;
 800670a:	e112      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7c1b      	ldrb	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10d      	bne.n	8006730 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	f107 0208 	add.w	r2, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	2202      	movs	r2, #2
 800672c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672e:	e100      	b.n	8006932 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f107 0208 	add.w	r2, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	2202      	movs	r2, #2
 8006748:	701a      	strb	r2, [r3, #0]
      break;
 800674a:	e0f2      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	885b      	ldrh	r3, [r3, #2]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b05      	cmp	r3, #5
 8006754:	f200 80ac 	bhi.w	80068b0 <USBD_GetDescriptor+0x204>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <USBD_GetDescriptor+0xb4>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006779 	.word	0x08006779
 8006764:	080067ad 	.word	0x080067ad
 8006768:	080067e1 	.word	0x080067e1
 800676c:	08006815 	.word	0x08006815
 8006770:	08006849 	.word	0x08006849
 8006774:	0800687d 	.word	0x0800687d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7c12      	ldrb	r2, [r2, #16]
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
 8006798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679a:	e091      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 facb 	bl	8006d3a <USBD_CtlError>
            err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
          break;
 80067aa:	e089      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	7c12      	ldrb	r2, [r2, #16]
 80067c4:	f107 0108 	add.w	r1, r7, #8
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
 80067cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ce:	e077      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fab1 	bl	8006d3a <USBD_CtlError>
            err++;
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	3301      	adds	r3, #1
 80067dc:	72fb      	strb	r3, [r7, #11]
          break;
 80067de:	e06f      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	7c12      	ldrb	r2, [r2, #16]
 80067f8:	f107 0108 	add.w	r1, r7, #8
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
 8006800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006802:	e05d      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa97 	bl	8006d3a <USBD_CtlError>
            err++;
 800680c:	7afb      	ldrb	r3, [r7, #11]
 800680e:	3301      	adds	r3, #1
 8006810:	72fb      	strb	r3, [r7, #11]
          break;
 8006812:	e055      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	7c12      	ldrb	r2, [r2, #16]
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006836:	e043      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa7d 	bl	8006d3a <USBD_CtlError>
            err++;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	3301      	adds	r3, #1
 8006844:	72fb      	strb	r3, [r7, #11]
          break;
 8006846:	e03b      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	7c12      	ldrb	r2, [r2, #16]
 8006860:	f107 0108 	add.w	r1, r7, #8
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800686a:	e029      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa63 	bl	8006d3a <USBD_CtlError>
            err++;
 8006874:	7afb      	ldrb	r3, [r7, #11]
 8006876:	3301      	adds	r3, #1
 8006878:	72fb      	strb	r3, [r7, #11]
          break;
 800687a:	e021      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	7c12      	ldrb	r2, [r2, #16]
 8006894:	f107 0108 	add.w	r1, r7, #8
 8006898:	4610      	mov	r0, r2
 800689a:	4798      	blx	r3
 800689c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689e:	e00f      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa49 	bl	8006d3a <USBD_CtlError>
            err++;
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	3301      	adds	r3, #1
 80068ac:	72fb      	strb	r3, [r7, #11]
          break;
 80068ae:	e007      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa41 	bl	8006d3a <USBD_CtlError>
          err++;
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	3301      	adds	r3, #1
 80068bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068be:	bf00      	nop
      }
      break;
 80068c0:	e037      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7c1b      	ldrb	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	f107 0208 	add.w	r2, r7, #8
 80068d6:	4610      	mov	r0, r2
 80068d8:	4798      	blx	r3
 80068da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068dc:	e029      	b.n	8006932 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa2a 	bl	8006d3a <USBD_CtlError>
        err++;
 80068e6:	7afb      	ldrb	r3, [r7, #11]
 80068e8:	3301      	adds	r3, #1
 80068ea:	72fb      	strb	r3, [r7, #11]
      break;
 80068ec:	e021      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7c1b      	ldrb	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10d      	bne.n	8006912 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f107 0208 	add.w	r2, r7, #8
 8006902:	4610      	mov	r0, r2
 8006904:	4798      	blx	r3
 8006906:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	2207      	movs	r2, #7
 800690e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006910:	e00f      	b.n	8006932 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa10 	bl	8006d3a <USBD_CtlError>
        err++;
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	3301      	adds	r3, #1
 800691e:	72fb      	strb	r3, [r7, #11]
      break;
 8006920:	e007      	b.n	8006932 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa08 	bl	8006d3a <USBD_CtlError>
      err++;
 800692a:	7afb      	ldrb	r3, [r7, #11]
 800692c:	3301      	adds	r3, #1
 800692e:	72fb      	strb	r3, [r7, #11]
      break;
 8006930:	bf00      	nop
  }

  if (err != 0U)
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11e      	bne.n	8006976 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	88db      	ldrh	r3, [r3, #6]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d016      	beq.n	800696e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006940:	893b      	ldrh	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00e      	beq.n	8006964 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88da      	ldrh	r2, [r3, #6]
 800694a:	893b      	ldrh	r3, [r7, #8]
 800694c:	4293      	cmp	r3, r2
 800694e:	bf28      	it	cs
 8006950:	4613      	movcs	r3, r2
 8006952:	b29b      	uxth	r3, r3
 8006954:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006956:	893b      	ldrh	r3, [r7, #8]
 8006958:	461a      	mov	r2, r3
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa5d 	bl	8006e1c <USBD_CtlSendData>
 8006962:	e009      	b.n	8006978 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9e7 	bl	8006d3a <USBD_CtlError>
 800696c:	e004      	b.n	8006978 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 faae 	bl	8006ed0 <USBD_CtlSendStatus>
 8006974:	e000      	b.n	8006978 <USBD_GetDescriptor+0x2cc>
    return;
 8006976:	bf00      	nop
  }
}
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	889b      	ldrh	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d131      	bne.n	80069f6 <USBD_SetAddress+0x76>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88db      	ldrh	r3, [r3, #6]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d12d      	bne.n	80069f6 <USBD_SetAddress+0x76>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	2b7f      	cmp	r3, #127	; 0x7f
 80069a0:	d829      	bhi.n	80069f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d104      	bne.n	80069c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9bc 	bl	8006d3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	e01d      	b.n	8006a00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f005 f951 	bl	800bc78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa7a 	bl	8006ed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ea:	e009      	b.n	8006a00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f4:	e004      	b.n	8006a00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f99e 	bl	8006d3a <USBD_CtlError>
  }
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	4b4e      	ldr	r3, [pc, #312]	; (8006b58 <USBD_SetConfig+0x150>)
 8006a1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a20:	4b4d      	ldr	r3, [pc, #308]	; (8006b58 <USBD_SetConfig+0x150>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d905      	bls.n	8006a34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f985 	bl	8006d3a <USBD_CtlError>
    return USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e08c      	b.n	8006b4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d002      	beq.n	8006a46 <USBD_SetConfig+0x3e>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d029      	beq.n	8006a98 <USBD_SetConfig+0x90>
 8006a44:	e075      	b.n	8006b32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a46:	4b44      	ldr	r3, [pc, #272]	; (8006b58 <USBD_SetConfig+0x150>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d020      	beq.n	8006a90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a4e:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <USBD_SetConfig+0x150>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a58:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <USBD_SetConfig+0x150>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fe ffe7 	bl	8005a32 <USBD_SetClassConfig>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d008      	beq.n	8006a80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f962 	bl	8006d3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a7e:	e065      	b.n	8006b4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fa25 	bl	8006ed0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a8e:	e05d      	b.n	8006b4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa1d 	bl	8006ed0 <USBD_CtlSendStatus>
      break;
 8006a96:	e059      	b.n	8006b4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a98:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <USBD_SetConfig+0x150>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d112      	bne.n	8006ac6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <USBD_SetConfig+0x150>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ab2:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <USBD_SetConfig+0x150>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fe ffd6 	bl	8005a6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa06 	bl	8006ed0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ac4:	e042      	b.n	8006b4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ac6:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <USBD_SetConfig+0x150>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d02a      	beq.n	8006b2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fe ffc4 	bl	8005a6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <USBD_SetConfig+0x150>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006aec:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <USBD_SetConfig+0x150>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fe ff9d 	bl	8005a32 <USBD_SetClassConfig>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f918 	bl	8006d3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fe ffa9 	bl	8005a6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b20:	e014      	b.n	8006b4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f9d4 	bl	8006ed0 <USBD_CtlSendStatus>
      break;
 8006b28:	e010      	b.n	8006b4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9d0 	bl	8006ed0 <USBD_CtlSendStatus>
      break;
 8006b30:	e00c      	b.n	8006b4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f900 	bl	8006d3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <USBD_SetConfig+0x150>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fe ff92 	bl	8005a6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b46:	2303      	movs	r3, #3
 8006b48:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4a:	bf00      	nop
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000280 	.word	0x20000280

08006b5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88db      	ldrh	r3, [r3, #6]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d004      	beq.n	8006b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8e2 	bl	8006d3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b76:	e023      	b.n	8006bc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	dc02      	bgt.n	8006b8a <USBD_GetConfig+0x2e>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc03      	bgt.n	8006b90 <USBD_GetConfig+0x34>
 8006b88:	e015      	b.n	8006bb6 <USBD_GetConfig+0x5a>
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d00b      	beq.n	8006ba6 <USBD_GetConfig+0x4a>
 8006b8e:	e012      	b.n	8006bb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f93c 	bl	8006e1c <USBD_CtlSendData>
        break;
 8006ba4:	e00c      	b.n	8006bc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2201      	movs	r2, #1
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f934 	bl	8006e1c <USBD_CtlSendData>
        break;
 8006bb4:	e004      	b.n	8006bc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8be 	bl	8006d3a <USBD_CtlError>
        break;
 8006bbe:	bf00      	nop
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d81e      	bhi.n	8006c1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	88db      	ldrh	r3, [r3, #6]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d004      	beq.n	8006bf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8a5 	bl	8006d3a <USBD_CtlError>
        break;
 8006bf0:	e01a      	b.n	8006c28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	330c      	adds	r3, #12
 8006c12:	2202      	movs	r2, #2
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f900 	bl	8006e1c <USBD_CtlSendData>
      break;
 8006c1c:	e004      	b.n	8006c28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f88a 	bl	8006d3a <USBD_CtlError>
      break;
 8006c26:	bf00      	nop
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d107      	bne.n	8006c52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f940 	bl	8006ed0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c50:	e013      	b.n	8006c7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	885b      	ldrh	r3, [r3, #2]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d10b      	bne.n	8006c72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	889b      	ldrh	r3, [r3, #4]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f930 	bl	8006ed0 <USBD_CtlSendStatus>
}
 8006c70:	e003      	b.n	8006c7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f860 	bl	8006d3a <USBD_CtlError>
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d80b      	bhi.n	8006cb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	885b      	ldrh	r3, [r3, #2]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d10c      	bne.n	8006cbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f910 	bl	8006ed0 <USBD_CtlSendStatus>
      }
      break;
 8006cb0:	e004      	b.n	8006cbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f840 	bl	8006d3a <USBD_CtlError>
      break;
 8006cba:	e000      	b.n	8006cbe <USBD_ClrFeature+0x3c>
      break;
 8006cbc:	bf00      	nop
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	781a      	ldrb	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3301      	adds	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff fa41 	bl	8006178 <SWAPBYTE>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3301      	adds	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff fa34 	bl	8006178 <SWAPBYTE>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fa27 	bl	8006178 <SWAPBYTE>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	80da      	strh	r2, [r3, #6]
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d44:	2180      	movs	r1, #128	; 0x80
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f004 ff2c 	bl	800bba4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f004 ff28 	bl	800bba4 <USBD_LL_StallEP>
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d036      	beq.n	8006de0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f000 f836 	bl	8006de8 <USBD_GetLen>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	3301      	adds	r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	4413      	add	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	2203      	movs	r2, #3
 8006da4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	3301      	adds	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dac:	e013      	b.n	8006dd6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	4413      	add	r3, r2
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
    idx++;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4413      	add	r3, r2
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e7      	bne.n	8006dae <USBD_GetString+0x52>
 8006dde:	e000      	b.n	8006de2 <USBD_GetString+0x86>
    return;
 8006de0:	bf00      	nop
  }
}
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006df8:	e005      	b.n	8006e06 <USBD_GetLen+0x1e>
  {
    len++;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f5      	bne.n	8006dfa <USBD_GetLen+0x12>
  }

  return len;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f004 ff37 	bl	800bcb6 <USBD_LL_Transmit>

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	2100      	movs	r1, #0
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f004 ff26 	bl	800bcb6 <USBD_LL_Transmit>

  return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2203      	movs	r2, #3
 8006e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f004 ff2a 	bl	800bcf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f004 ff19 	bl	800bcf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2204      	movs	r2, #4
 8006edc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f004 fee5 	bl	800bcb6 <USBD_LL_Transmit>

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2205      	movs	r2, #5
 8006f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f06:	2300      	movs	r3, #0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f004 fef3 	bl	800bcf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <__NVIC_SetPriority>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	db0a      	blt.n	8006f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	490c      	ldr	r1, [pc, #48]	; (8006f68 <__NVIC_SetPriority+0x4c>)
 8006f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3a:	0112      	lsls	r2, r2, #4
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	440b      	add	r3, r1
 8006f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f44:	e00a      	b.n	8006f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4908      	ldr	r1, [pc, #32]	; (8006f6c <__NVIC_SetPriority+0x50>)
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	3b04      	subs	r3, #4
 8006f54:	0112      	lsls	r2, r2, #4
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	440b      	add	r3, r1
 8006f5a:	761a      	strb	r2, [r3, #24]
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	e000e100 	.word	0xe000e100
 8006f6c:	e000ed00 	.word	0xe000ed00

08006f70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <SysTick_Handler+0x1c>)
 8006f76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f78:	f002 fcea 	bl	8009950 <xTaskGetSchedulerState>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d001      	beq.n	8006f86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f82:	f003 feb1 	bl	800ace8 <xPortSysTickHandler>
  }
}
 8006f86:	bf00      	nop
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	e000e010 	.word	0xe000e010

08006f90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f94:	2100      	movs	r1, #0
 8006f96:	f06f 0004 	mvn.w	r0, #4
 8006f9a:	f7ff ffbf 	bl	8006f1c <__NVIC_SetPriority>
#endif
}
 8006f9e:	bf00      	nop
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006faa:	f3ef 8305 	mrs	r3, IPSR
 8006fae:	603b      	str	r3, [r7, #0]
  return(result);
 8006fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006fb6:	f06f 0305 	mvn.w	r3, #5
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	e00c      	b.n	8006fd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <osKernelInitialize+0x44>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fc6:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <osKernelInitialize+0x44>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	e002      	b.n	8006fd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fd8:	687b      	ldr	r3, [r7, #4]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000284 	.word	0x20000284

08006fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff2:	f3ef 8305 	mrs	r3, IPSR
 8006ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ffe:	f06f 0305 	mvn.w	r3, #5
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	e010      	b.n	8007028 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007006:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <osKernelStart+0x48>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d109      	bne.n	8007022 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800700e:	f7ff ffbf 	bl	8006f90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <osKernelStart+0x48>)
 8007014:	2202      	movs	r2, #2
 8007016:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007018:	f001 fea6 	bl	8008d68 <vTaskStartScheduler>
      stat = osOK;
 800701c:	2300      	movs	r3, #0
 800701e:	607b      	str	r3, [r7, #4]
 8007020:	e002      	b.n	8007028 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007022:	f04f 33ff 	mov.w	r3, #4294967295
 8007026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007028:	687b      	ldr	r3, [r7, #4]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000284 	.word	0x20000284

08007038 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b08e      	sub	sp, #56	; 0x38
 800703c:	af04      	add	r7, sp, #16
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007048:	f3ef 8305 	mrs	r3, IPSR
 800704c:	617b      	str	r3, [r7, #20]
  return(result);
 800704e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007050:	2b00      	cmp	r3, #0
 8007052:	d17e      	bne.n	8007152 <osThreadNew+0x11a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d07b      	beq.n	8007152 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800705a:	2380      	movs	r3, #128	; 0x80
 800705c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800705e:	2318      	movs	r3, #24
 8007060:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d045      	beq.n	80070fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <osThreadNew+0x48>
        name = attr->name;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <osThreadNew+0x6e>
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	2b38      	cmp	r3, #56	; 0x38
 8007098:	d805      	bhi.n	80070a6 <osThreadNew+0x6e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <osThreadNew+0x72>
        return (NULL);
 80070a6:	2300      	movs	r3, #0
 80070a8:	e054      	b.n	8007154 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00e      	beq.n	80070e0 <osThreadNew+0xa8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2bbb      	cmp	r3, #187	; 0xbb
 80070c8:	d90a      	bls.n	80070e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d006      	beq.n	80070e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <osThreadNew+0xa8>
        mem = 1;
 80070da:	2301      	movs	r3, #1
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	e010      	b.n	8007102 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10c      	bne.n	8007102 <osThreadNew+0xca>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d108      	bne.n	8007102 <osThreadNew+0xca>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <osThreadNew+0xca>
          mem = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e001      	b.n	8007102 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d110      	bne.n	800712a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007110:	9202      	str	r2, [sp, #8]
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6a3a      	ldr	r2, [r7, #32]
 800711c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f001 fc03 	bl	800892a <xTaskCreateStatic>
 8007124:	4603      	mov	r3, r0
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	e013      	b.n	8007152 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d110      	bne.n	8007152 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	b29a      	uxth	r2, r3
 8007134:	f107 0310 	add.w	r3, r7, #16
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 fc4e 	bl	80089e4 <xTaskCreate>
 8007148:	4603      	mov	r3, r0
 800714a:	2b01      	cmp	r3, #1
 800714c:	d001      	beq.n	8007152 <osThreadNew+0x11a>
            hTask = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007152:	693b      	ldr	r3, [r7, #16]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	; 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a07      	ldr	r2, [pc, #28]	; (8007188 <vApplicationGetIdleTaskMemory+0x2c>)
 800716c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4a06      	ldr	r2, [pc, #24]	; (800718c <vApplicationGetIdleTaskMemory+0x30>)
 8007172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2280      	movs	r2, #128	; 0x80
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000288 	.word	0x20000288
 800718c:	20000344 	.word	0x20000344

08007190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a07      	ldr	r2, [pc, #28]	; (80071bc <vApplicationGetTimerTaskMemory+0x2c>)
 80071a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	4a06      	ldr	r2, [pc, #24]	; (80071c0 <vApplicationGetTimerTaskMemory+0x30>)
 80071a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ae:	601a      	str	r2, [r3, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20000544 	.word	0x20000544
 80071c0:	20000600 	.word	0x20000600

080071c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f103 0208 	add.w	r2, r3, #8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f103 0208 	add.w	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f103 0208 	add.w	r2, r3, #8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d103      	bne.n	8007286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e00c      	b.n	80072a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3308      	adds	r3, #8
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e002      	b.n	8007294 <vListInsert+0x2e>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d2f6      	bcs.n	800728e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6892      	ldr	r2, [r2, #8]
 80072ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6852      	ldr	r2, [r2, #4]
 80072f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d103      	bne.n	800730c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	1e5a      	subs	r2, r3, #1
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueGenericReset+0x2a>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60bb      	str	r3, [r7, #8]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007356:	f003 fc35 	bl	800abc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	441a      	add	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	3b01      	subs	r3, #1
 8007388:	68f9      	ldr	r1, [r7, #12]
 800738a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	22ff      	movs	r2, #255	; 0xff
 800739a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d114      	bne.n	80073d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01a      	beq.n	80073ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3310      	adds	r3, #16
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 fffd 	bl	80093b8 <xTaskRemoveFromEventList>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <xQueueGenericReset+0xcc>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	e009      	b.n	80073ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3310      	adds	r3, #16
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fef2 	bl	80071c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff feed 	bl	80071c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073ea:	f003 fc1b 	bl	800ac24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073ee:	2301      	movs	r3, #1
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08e      	sub	sp, #56	; 0x38
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <xQueueGenericCreateStatic+0x52>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <xQueueGenericCreateStatic+0x56>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueGenericCreateStatic+0x58>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	623b      	str	r3, [r7, #32]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <xQueueGenericCreateStatic+0x7e>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <xQueueGenericCreateStatic+0x82>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <xQueueGenericCreateStatic+0x84>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	61fb      	str	r3, [r7, #28]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800749a:	2350      	movs	r3, #80	; 0x50
 800749c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b50      	cmp	r3, #80	; 0x50
 80074a2:	d00a      	beq.n	80074ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	61bb      	str	r3, [r7, #24]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f83f 	bl	8007560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3730      	adds	r7, #48	; 0x30
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	fb02 f303 	mul.w	r3, r2, r3
 800751e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3350      	adds	r3, #80	; 0x50
 8007524:	4618      	mov	r0, r3
 8007526:	f003 fc6f 	bl	800ae08 <pvPortMalloc>
 800752a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	3350      	adds	r3, #80	; 0x50
 800753a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f805 	bl	8007560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007556:	69bb      	ldr	r3, [r7, #24]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e002      	b.n	8007582 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800758e:	2101      	movs	r1, #1
 8007590:	69b8      	ldr	r0, [r7, #24]
 8007592:	f7ff fecb 	bl	800732c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00e      	beq.n	80075d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075c6:	2300      	movs	r3, #0
 80075c8:	2200      	movs	r2, #0
 80075ca:	2100      	movs	r1, #0
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f81d 	bl	800760c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	4603      	mov	r3, r0
 80075e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6939      	ldr	r1, [r7, #16]
 80075f2:	6978      	ldr	r0, [r7, #20]
 80075f4:	f7ff ff7a 	bl	80074ec <xQueueGenericCreate>
 80075f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff ffd3 	bl	80075a6 <prvInitialiseMutex>

		return xNewQueue;
 8007600:	68fb      	ldr	r3, [r7, #12]
	}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	; 0x38
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800761a:	2300      	movs	r3, #0
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <xQueueGenericSend+0x32>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <xQueueGenericSend+0x40>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueGenericSend+0x44>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueGenericSend+0x46>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <xQueueGenericSend+0x60>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d103      	bne.n	800767a <xQueueGenericSend+0x6e>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <xQueueGenericSend+0x72>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <xQueueGenericSend+0x74>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xQueueGenericSend+0x8e>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	623b      	str	r3, [r7, #32]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800769a:	f002 f959 	bl	8009950 <xTaskGetSchedulerState>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <xQueueGenericSend+0x9e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <xQueueGenericSend+0xa2>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <xQueueGenericSend+0xa4>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueGenericSend+0xbe>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	61fb      	str	r3, [r7, #28]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076ca:	f003 fa7b 	bl	800abc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d302      	bcc.n	80076e0 <xQueueGenericSend+0xd4>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d129      	bne.n	8007734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e6:	f000 fbbb 	bl	8007e60 <prvCopyDataToQueue>
 80076ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d010      	beq.n	8007716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fe5d 	bl	80093b8 <xTaskRemoveFromEventList>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d013      	beq.n	800772c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007704:	4b3f      	ldr	r3, [pc, #252]	; (8007804 <xQueueGenericSend+0x1f8>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	e00a      	b.n	800772c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800771c:	4b39      	ldr	r3, [pc, #228]	; (8007804 <xQueueGenericSend+0x1f8>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800772c:	f003 fa7a 	bl	800ac24 <vPortExitCritical>
				return pdPASS;
 8007730:	2301      	movs	r3, #1
 8007732:	e063      	b.n	80077fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800773a:	f003 fa73 	bl	800ac24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800773e:	2300      	movs	r3, #0
 8007740:	e05c      	b.n	80077fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007748:	f107 0314 	add.w	r3, r7, #20
 800774c:	4618      	mov	r0, r3
 800774e:	f001 febd 	bl	80094cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007756:	f003 fa65 	bl	800ac24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800775a:	f001 fb75 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800775e:	f003 fa31 	bl	800abc4 <vPortEnterCritical>
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007768:	b25b      	sxtb	r3, r3
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776e:	d103      	bne.n	8007778 <xQueueGenericSend+0x16c>
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777e:	b25b      	sxtb	r3, r3
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d103      	bne.n	800778e <xQueueGenericSend+0x182>
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800778e:	f003 fa49 	bl	800ac24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007792:	1d3a      	adds	r2, r7, #4
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	4611      	mov	r1, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f001 feac 	bl	80094f8 <xTaskCheckForTimeOut>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d124      	bne.n	80077f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077a8:	f000 fc52 	bl	8008050 <prvIsQueueFull>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	3310      	adds	r3, #16
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fdac 	bl	8009318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077c2:	f000 fbdd 	bl	8007f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077c6:	f001 fb4d 	bl	8008e64 <xTaskResumeAll>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f47f af7c 	bne.w	80076ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <xQueueGenericSend+0x1f8>)
 80077d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	e772      	b.n	80076ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077e6:	f000 fbcb 	bl	8007f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ea:	f001 fb3b 	bl	8008e64 <xTaskResumeAll>
 80077ee:	e76c      	b.n	80076ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f2:	f000 fbc5 	bl	8007f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077f6:	f001 fb35 	bl	8008e64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3738      	adds	r7, #56	; 0x38
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	e000ed04 	.word	0xe000ed04

08007808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b090      	sub	sp, #64	; 0x40
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d103      	bne.n	8007844 <xQueueGenericSendFromISR+0x3c>
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <xQueueGenericSendFromISR+0x40>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <xQueueGenericSendFromISR+0x42>
 8007848:	2300      	movs	r3, #0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d103      	bne.n	8007872 <xQueueGenericSendFromISR+0x6a>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <xQueueGenericSendFromISR+0x6e>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <xQueueGenericSendFromISR+0x70>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	623b      	str	r3, [r7, #32]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007892:	f003 fa79 	bl	800ad88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007896:	f3ef 8211 	mrs	r2, BASEPRI
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	61fa      	str	r2, [r7, #28]
 80078ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80078ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d302      	bcc.n	80078c4 <xQueueGenericSendFromISR+0xbc>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d12f      	bne.n	8007924 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078da:	f000 fac1 	bl	8007e60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d112      	bne.n	800790e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d016      	beq.n	800791e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 fd5f 	bl	80093b8 <xTaskRemoveFromEventList>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e007      	b.n	800791e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800790e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007912:	3301      	adds	r3, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	b25a      	sxtb	r2, r3
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800791e:	2301      	movs	r3, #1
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007922:	e001      	b.n	8007928 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007936:	4618      	mov	r0, r3
 8007938:	3740      	adds	r7, #64	; 0x40
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08e      	sub	sp, #56	; 0x38
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	623b      	str	r3, [r7, #32]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	61fb      	str	r3, [r7, #28]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d103      	bne.n	8007996 <xQueueGiveFromISR+0x58>
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <xQueueGiveFromISR+0x5c>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <xQueueGiveFromISR+0x5e>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	61bb      	str	r3, [r7, #24]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079b6:	f003 f9e7 	bl	800ad88 <vPortValidateInterruptPriority>
	__asm volatile
 80079ba:	f3ef 8211 	mrs	r2, BASEPRI
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	617a      	str	r2, [r7, #20]
 80079d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80079d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d22b      	bcs.n	8007a3e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d112      	bne.n	8007a28 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	3324      	adds	r3, #36	; 0x24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 fcd2 	bl	80093b8 <xTaskRemoveFromEventList>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e007      	b.n	8007a38 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	b25a      	sxtb	r2, r3
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3c:	e001      	b.n	8007a42 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f383 8811 	msr	BASEPRI, r3
}
 8007a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3738      	adds	r7, #56	; 0x38
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	; 0x30
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <xQueueReceive+0x30>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	623b      	str	r3, [r7, #32]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <xQueueReceive+0x3e>
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <xQueueReceive+0x42>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <xQueueReceive+0x44>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <xQueueReceive+0x5e>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	61fb      	str	r3, [r7, #28]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab6:	f001 ff4b 	bl	8009950 <xTaskGetSchedulerState>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <xQueueReceive+0x6e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <xQueueReceive+0x72>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <xQueueReceive+0x74>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <xQueueReceive+0x8e>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	61bb      	str	r3, [r7, #24]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ae6:	f003 f86d 	bl	800abc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01f      	beq.n	8007b36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afa:	f000 fa1b 	bl	8007f34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	1e5a      	subs	r2, r3, #1
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00f      	beq.n	8007b2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	3310      	adds	r3, #16
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 fc50 	bl	80093b8 <xTaskRemoveFromEventList>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b1e:	4b3d      	ldr	r3, [pc, #244]	; (8007c14 <xQueueReceive+0x1bc>)
 8007b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b2e:	f003 f879 	bl	800ac24 <vPortExitCritical>
				return pdPASS;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e069      	b.n	8007c0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b3c:	f003 f872 	bl	800ac24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b40:	2300      	movs	r3, #0
 8007b42:	e062      	b.n	8007c0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b4a:	f107 0310 	add.w	r3, r7, #16
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fcbc 	bl	80094cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b58:	f003 f864 	bl	800ac24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b5c:	f001 f974 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b60:	f003 f830 	bl	800abc4 <vPortEnterCritical>
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d103      	bne.n	8007b7a <xQueueReceive+0x122>
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b80:	b25b      	sxtb	r3, r3
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d103      	bne.n	8007b90 <xQueueReceive+0x138>
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b90:	f003 f848 	bl	800ac24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b94:	1d3a      	adds	r2, r7, #4
 8007b96:	f107 0310 	add.w	r3, r7, #16
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fcab 	bl	80094f8 <xTaskCheckForTimeOut>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d123      	bne.n	8007bf0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007baa:	f000 fa3b 	bl	8008024 <prvIsQueueEmpty>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d017      	beq.n	8007be4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fbab 	bl	8009318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc4:	f000 f9dc 	bl	8007f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bc8:	f001 f94c 	bl	8008e64 <xTaskResumeAll>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d189      	bne.n	8007ae6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007bd2:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <xQueueReceive+0x1bc>)
 8007bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	e780      	b.n	8007ae6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be6:	f000 f9cb 	bl	8007f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bea:	f001 f93b 	bl	8008e64 <xTaskResumeAll>
 8007bee:	e77a      	b.n	8007ae6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	f000 f9c5 	bl	8007f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bf6:	f001 f935 	bl	8008e64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bfc:	f000 fa12 	bl	8008024 <prvIsQueueEmpty>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f43f af6f 	beq.w	8007ae6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3730      	adds	r7, #48	; 0x30
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08e      	sub	sp, #56	; 0x38
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	623b      	str	r3, [r7, #32]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	61fb      	str	r3, [r7, #28]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c68:	f001 fe72 	bl	8009950 <xTaskGetSchedulerState>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <xQueueSemaphoreTake+0x60>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <xQueueSemaphoreTake+0x64>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e000      	b.n	8007c7e <xQueueSemaphoreTake+0x66>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	61bb      	str	r3, [r7, #24]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c98:	f002 ff94 	bl	800abc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d024      	beq.n	8007cf2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	1e5a      	subs	r2, r3, #1
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007cb8:	f002 f87c 	bl	8009db4 <pvTaskIncrementMutexHeldCount>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	3310      	adds	r3, #16
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 fb72 	bl	80093b8 <xTaskRemoveFromEventList>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cda:	4b54      	ldr	r3, [pc, #336]	; (8007e2c <xQueueSemaphoreTake+0x214>)
 8007cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cea:	f002 ff9b 	bl	800ac24 <vPortExitCritical>
				return pdPASS;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e097      	b.n	8007e22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d111      	bne.n	8007d1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	617b      	str	r3, [r7, #20]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d14:	f002 ff86 	bl	800ac24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e082      	b.n	8007e22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 fbd0 	bl	80094cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d30:	f002 ff78 	bl	800ac24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d34:	f001 f888 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d38:	f002 ff44 	bl	800abc4 <vPortEnterCritical>
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d42:	b25b      	sxtb	r3, r3
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d103      	bne.n	8007d52 <xQueueSemaphoreTake+0x13a>
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d103      	bne.n	8007d68 <xQueueSemaphoreTake+0x150>
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d68:	f002 ff5c 	bl	800ac24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	f107 030c 	add.w	r3, r7, #12
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fbbf 	bl	80094f8 <xTaskCheckForTimeOut>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d132      	bne.n	8007de6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d82:	f000 f94f 	bl	8008024 <prvIsQueueEmpty>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d026      	beq.n	8007dda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007d94:	f002 ff16 	bl	800abc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fdf5 	bl	800998c <xTaskPriorityInherit>
 8007da2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007da4:	f002 ff3e 	bl	800ac24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	3324      	adds	r3, #36	; 0x24
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 fab1 	bl	8009318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007db8:	f000 f8e2 	bl	8007f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dbc:	f001 f852 	bl	8008e64 <xTaskResumeAll>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f47f af68 	bne.w	8007c98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007dc8:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <xQueueSemaphoreTake+0x214>)
 8007dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	e75e      	b.n	8007c98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ddc:	f000 f8d0 	bl	8007f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de0:	f001 f840 	bl	8008e64 <xTaskResumeAll>
 8007de4:	e758      	b.n	8007c98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007de8:	f000 f8ca 	bl	8007f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dec:	f001 f83a 	bl	8008e64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df2:	f000 f917 	bl	8008024 <prvIsQueueEmpty>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f43f af4d 	beq.w	8007c98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00d      	beq.n	8007e20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007e04:	f002 fede 	bl	800abc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e0a:	f000 f811 	bl	8007e30 <prvGetDisinheritPriorityAfterTimeout>
 8007e0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fe8e 	bl	8009b38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007e1c:	f002 ff02 	bl	800ac24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3738      	adds	r7, #56	; 0x38
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d006      	beq.n	8007e4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	e001      	b.n	8007e52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e52:	68fb      	ldr	r3, [r7, #12]
	}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d14d      	bne.n	8007f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 fde6 	bl	8009a5c <xTaskPriorityDisinherit>
 8007e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	609a      	str	r2, [r3, #8]
 8007e98:	e043      	b.n	8007f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d119      	bne.n	8007ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6858      	ldr	r0, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	f003 ffc8 	bl	800be40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	441a      	add	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d32b      	bcc.n	8007f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	e026      	b.n	8007f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68d8      	ldr	r0, [r3, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	461a      	mov	r2, r3
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	f003 ffae 	bl	800be40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	425b      	negs	r3, r3
 8007eee:	441a      	add	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d207      	bcs.n	8007f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	425b      	negs	r3, r3
 8007f0a:	441a      	add	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d105      	bne.n	8007f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f2a:	697b      	ldr	r3, [r7, #20]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d018      	beq.n	8007f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	441a      	add	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d303      	bcc.n	8007f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68d9      	ldr	r1, [r3, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	461a      	mov	r2, r3
 8007f72:	6838      	ldr	r0, [r7, #0]
 8007f74:	f003 ff64 	bl	800be40 <memcpy>
	}
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f88:	f002 fe1c 	bl	800abc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f94:	e011      	b.n	8007fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d012      	beq.n	8007fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3324      	adds	r3, #36	; 0x24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fa08 	bl	80093b8 <xTaskRemoveFromEventList>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fae:	f001 fb05 	bl	80095bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dce9      	bgt.n	8007f96 <prvUnlockQueue+0x16>
 8007fc2:	e000      	b.n	8007fc6 <prvUnlockQueue+0x46>
					break;
 8007fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	22ff      	movs	r2, #255	; 0xff
 8007fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fce:	f002 fe29 	bl	800ac24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fd2:	f002 fdf7 	bl	800abc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fde:	e011      	b.n	8008004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d012      	beq.n	800800e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3310      	adds	r3, #16
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 f9e3 	bl	80093b8 <xTaskRemoveFromEventList>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ff8:	f001 fae0 	bl	80095bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008008:	2b00      	cmp	r3, #0
 800800a:	dce9      	bgt.n	8007fe0 <prvUnlockQueue+0x60>
 800800c:	e000      	b.n	8008010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800800e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	22ff      	movs	r2, #255	; 0xff
 8008014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008018:	f002 fe04 	bl	800ac24 <vPortExitCritical>
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800802c:	f002 fdca 	bl	800abc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008038:	2301      	movs	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e001      	b.n	8008042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008042:	f002 fdef 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 8008046:	68fb      	ldr	r3, [r7, #12]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008058:	f002 fdb4 	bl	800abc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008064:	429a      	cmp	r2, r3
 8008066:	d102      	bne.n	800806e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	e001      	b.n	8008072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008072:	f002 fdd7 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 8008076:	68fb      	ldr	r3, [r7, #12]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	e014      	b.n	80080ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008090:	4a0f      	ldr	r2, [pc, #60]	; (80080d0 <vQueueAddToRegistry+0x50>)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10b      	bne.n	80080b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800809c:	490c      	ldr	r1, [pc, #48]	; (80080d0 <vQueueAddToRegistry+0x50>)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080a6:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <vQueueAddToRegistry+0x50>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080b2:	e006      	b.n	80080c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b07      	cmp	r3, #7
 80080be:	d9e7      	bls.n	8008090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000a00 	.word	0x20000a00

080080d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080e4:	f002 fd6e 	bl	800abc4 <vPortEnterCritical>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ee:	b25b      	sxtb	r3, r3
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d103      	bne.n	80080fe <vQueueWaitForMessageRestricted+0x2a>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008104:	b25b      	sxtb	r3, r3
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d103      	bne.n	8008114 <vQueueWaitForMessageRestricted+0x40>
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008114:	f002 fd86 	bl	800ac24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d106      	bne.n	800812e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f001 f919 	bl	8009360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	f7ff ff26 	bl	8007f80 <prvUnlockQueue>
	}
 8008134:	bf00      	nop
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af02      	add	r7, sp, #8
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d110      	bne.n	8008170 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800814e:	2301      	movs	r3, #1
 8008150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b04      	cmp	r3, #4
 8008158:	d81b      	bhi.n	8008192 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	61fb      	str	r3, [r7, #28]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	61bb      	str	r3, [r7, #24]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	429a      	cmp	r2, r3
 8008198:	d90a      	bls.n	80081b0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	617b      	str	r3, [r7, #20]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3324      	adds	r3, #36	; 0x24
 80081c4:	4618      	mov	r0, r3
 80081c6:	f002 fe1f 	bl	800ae08 <pvPortMalloc>
 80081ca:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80081d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	6a38      	ldr	r0, [r7, #32]
 80081e4:	f000 fb6e 	bl	80088c4 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80081e8:	6a3b      	ldr	r3, [r7, #32]
	}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3728      	adds	r7, #40	; 0x28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80081f2:	b480      	push	{r7}
 80081f4:	b087      	sub	sp, #28
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	60fb      	str	r3, [r7, #12]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4413      	add	r3, r2
 8008224:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3b01      	subs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	429a      	cmp	r2, r3
 800823e:	d304      	bcc.n	800824a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800824a:	697b      	ldr	r3, [r7, #20]
}
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b090      	sub	sp, #64	; 0x40
 800825c:	af02      	add	r7, sp, #8
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xStreamBufferSend+0x36>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xStreamBufferSend+0x52>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	7f1b      	ldrb	r3, [r3, #28]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d011      	beq.n	80082da <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	3304      	adds	r3, #4
 80082ba:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d80a      	bhi.n	80082da <xStreamBufferSend+0x82>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	61fb      	str	r3, [r7, #28]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d03e      	beq.n	800835e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 f8cb 	bl	8009480 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80082ea:	f002 fc6b 	bl	800abc4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80082ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082f0:	f7ff ff7f 	bl	80081f2 <xStreamBufferSpacesAvailable>
 80082f4:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80082f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d217      	bcs.n	800832e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80082fe:	2000      	movs	r0, #0
 8008300:	f001 ff6e 	bl	800a1e0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <xStreamBufferSend+0xca>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	61bb      	str	r3, [r7, #24]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8008322:	f001 fb05 	bl	8009930 <xTaskGetCurrentTaskHandle>
 8008326:	4602      	mov	r2, r0
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	615a      	str	r2, [r3, #20]
 800832c:	e002      	b.n	8008334 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800832e:	f002 fc79 	bl	800ac24 <vPortExitCritical>
					break;
 8008332:	e014      	b.n	800835e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8008334:	f002 fc76 	bl	800ac24 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	2000      	movs	r0, #0
 8008340:	f001 fd4c 	bl	8009ddc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	2200      	movs	r2, #0
 8008348:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800834a:	463a      	mov	r2, r7
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f8d0 	bl	80094f8 <xTaskCheckForTimeOut>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c5      	beq.n	80082ea <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008366:	f7ff ff44 	bl	80081f2 <xStreamBufferSpacesAvailable>
 800836a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008378:	f000 f894 	bl	80084a4 <prvWriteMessageToBuffer>
 800837c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008386:	f000 fa7d 	bl	8008884 <prvBytesInBuffer>
 800838a:	4602      	mov	r2, r0
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	429a      	cmp	r2, r3
 8008392:	d311      	bcc.n	80083b8 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8008394:	f000 fd58 	bl	8008e48 <vTaskSuspendAll>
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <xStreamBufferSend+0x15c>
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	6918      	ldr	r0, [r3, #16]
 80083a4:	2300      	movs	r3, #0
 80083a6:	2200      	movs	r2, #0
 80083a8:	2100      	movs	r1, #0
 80083aa:	f001 fd77 	bl	8009e9c <xTaskGenericNotify>
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	2200      	movs	r2, #0
 80083b2:	611a      	str	r2, [r3, #16]
 80083b4:	f000 fd56 	bl	8008e64 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3738      	adds	r7, #56	; 0x38
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b090      	sub	sp, #64	; 0x40
 80083c6:	af02      	add	r7, sp, #8
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
 80083ce:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	623b      	str	r3, [r7, #32]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	61fb      	str	r3, [r7, #28]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	7f1b      	ldrb	r3, [r3, #28]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	3304      	adds	r3, #4
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008424:	f7ff fee5 	bl	80081f2 <xStreamBufferSpacesAvailable>
 8008428:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008436:	f000 f835 	bl	80084a4 <prvWriteMessageToBuffer>
 800843a:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d02b      	beq.n	800849a <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008444:	f000 fa1e 	bl	8008884 <prvBytesInBuffer>
 8008448:	4602      	mov	r2, r0
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	429a      	cmp	r2, r3
 8008450:	d323      	bcc.n	800849a <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8008452:	f3ef 8211 	mrs	r2, BASEPRI
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	61ba      	str	r2, [r7, #24]
 8008468:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800846a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00b      	beq.n	800848e <xStreamBufferSendFromISR+0xcc>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	6918      	ldr	r0, [r3, #16]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	2200      	movs	r2, #0
 8008482:	2100      	movs	r1, #0
 8008484:	f001 fdc8 	bl	800a018 <xTaskGenericNotifyFromISR>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	2200      	movs	r2, #0
 800848c:	611a      	str	r2, [r3, #16]
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f383 8811 	msr	BASEPRI, r3
}
 8008498:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800849c:	4618      	mov	r0, r3
 800849e:	3738      	adds	r7, #56	; 0x38
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e01d      	b.n	80084fa <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	7f1b      	ldrb	r3, [r3, #28]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d108      	bne.n	80084dc <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bf28      	it	cs
 80084d6:	4613      	movcs	r3, r2
 80084d8:	607b      	str	r3, [r7, #4]
 80084da:	e00e      	b.n	80084fa <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d308      	bcc.n	80084f6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	2204      	movs	r2, #4
 80084ec:	4619      	mov	r1, r3
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f8dc 	bl	80086ac <prvWriteBytesToBuffer>
 80084f4:	e001      	b.n	80084fa <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d007      	beq.n	8008510 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	461a      	mov	r2, r3
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f8d0 	bl	80086ac <prvWriteBytesToBuffer>
 800850c:	6138      	str	r0, [r7, #16]
 800850e:	e001      	b.n	8008514 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008514:	693b      	ldr	r3, [r7, #16]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b08e      	sub	sp, #56	; 0x38
 8008522:	af02      	add	r7, sp, #8
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
 800852a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008530:	2300      	movs	r3, #0
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <xStreamBufferReceive+0x32>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	61fb      	str	r3, [r7, #28]
}
 800854c:	bf00      	nop
 800854e:	e7fe      	b.n	800854e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <xStreamBufferReceive+0x4e>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	61bb      	str	r3, [r7, #24]
}
 8008568:	bf00      	nop
 800856a:	e7fe      	b.n	800856a <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	7f1b      	ldrb	r3, [r3, #28]
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008578:	2304      	movs	r3, #4
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
 800857c:	e001      	b.n	8008582 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d034      	beq.n	80085f2 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008588:	f002 fb1c 	bl	800abc4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800858c:	6a38      	ldr	r0, [r7, #32]
 800858e:	f000 f979 	bl	8008884 <prvBytesInBuffer>
 8008592:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	429a      	cmp	r2, r3
 800859a:	d816      	bhi.n	80085ca <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800859c:	2000      	movs	r0, #0
 800859e:	f001 fe1f 	bl	800a1e0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <xStreamBufferReceive+0xa2>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	617b      	str	r3, [r7, #20]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80085c0:	f001 f9b6 	bl	8009930 <xTaskGetCurrentTaskHandle>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80085ca:	f002 fb2b 	bl	800ac24 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80085ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d811      	bhi.n	80085fa <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	2000      	movs	r0, #0
 80085de:	f001 fbfd 	bl	8009ddc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	2200      	movs	r2, #0
 80085e6:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80085e8:	6a38      	ldr	r0, [r7, #32]
 80085ea:	f000 f94b 	bl	8008884 <prvBytesInBuffer>
 80085ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80085f0:	e003      	b.n	80085fa <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80085f2:	6a38      	ldr	r0, [r7, #32]
 80085f4:	f000 f946 	bl	8008884 <prvBytesInBuffer>
 80085f8:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80085fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	429a      	cmp	r2, r3
 8008600:	d91d      	bls.n	800863e <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	6a38      	ldr	r0, [r7, #32]
 800860e:	f000 f81b 	bl	8008648 <prvReadMessageFromBuffer>
 8008612:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d011      	beq.n	800863e <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800861a:	f000 fc15 	bl	8008e48 <vTaskSuspendAll>
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <xStreamBufferReceive+0x11c>
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	6958      	ldr	r0, [r3, #20]
 800862a:	2300      	movs	r3, #0
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	f001 fc34 	bl	8009e9c <xTaskGenericNotify>
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	2200      	movs	r2, #0
 8008638:	615a      	str	r2, [r3, #20]
 800863a:	f000 fc13 	bl	8008e64 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008640:	4618      	mov	r0, r3
 8008642:	3730      	adds	r7, #48	; 0x30
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	2b00      	cmp	r3, #0
 800865a:	d019      	beq.n	8008690 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008662:	f107 0110 	add.w	r1, r7, #16
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f890 	bl	8008790 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d907      	bls.n	8008694 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e001      	b.n	8008694 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f878 	bl	8008790 <prvReadBytesFromBuffer>
 80086a0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80086a2:	697b      	ldr	r3, [r7, #20]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	; 0x28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fb      	str	r3, [r7, #28]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689a      	ldr	r2, [r3, #8]
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	bf28      	it	cs
 80086e8:	4613      	movcs	r3, r2
 80086ea:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80086ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	441a      	add	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d90a      	bls.n	8008710 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	61bb      	str	r3, [r7, #24]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	4413      	add	r3, r2
 8008718:	6a3a      	ldr	r2, [r7, #32]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f003 fb8f 	bl	800be40 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	429a      	cmp	r2, r3
 8008728:	d91c      	bls.n	8008764 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d90a      	bls.n	800874e <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	617b      	str	r3, [r7, #20]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6998      	ldr	r0, [r3, #24]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	18d1      	adds	r1, r2, r3
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	461a      	mov	r2, r3
 8008760:	f003 fb6e 	bl	800be40 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8008764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4413      	add	r3, r2
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	429a      	cmp	r2, r3
 8008774:	d304      	bcc.n	8008780 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	605a      	str	r2, [r3, #4]

	return xCount;
 8008786:	687b      	ldr	r3, [r7, #4]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3728      	adds	r7, #40	; 0x28
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08a      	sub	sp, #40	; 0x28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4293      	cmp	r3, r2
 80087a4:	bf28      	it	cs
 80087a6:	4613      	movcs	r3, r2
 80087a8:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d064      	beq.n	800887a <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	6a3a      	ldr	r2, [r7, #32]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	bf28      	it	cs
 80087c4:	4613      	movcs	r3, r2
 80087c6:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d90a      	bls.n	80087e6 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	61bb      	str	r3, [r7, #24]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80087e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	441a      	add	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d90a      	bls.n	800880a <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	617b      	str	r3, [r7, #20]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	4413      	add	r3, r2
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	4619      	mov	r1, r3
 8008816:	68b8      	ldr	r0, [r7, #8]
 8008818:	f003 fb12 	bl	800be40 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800881c:	6a3a      	ldr	r2, [r7, #32]
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	429a      	cmp	r2, r3
 8008822:	d919      	bls.n	8008858 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8008824:	6a3a      	ldr	r2, [r7, #32]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	429a      	cmp	r2, r3
 800882a:	d90a      	bls.n	8008842 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	613b      	str	r3, [r7, #16]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	18d0      	adds	r0, r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6999      	ldr	r1, [r3, #24]
 800884c:	6a3a      	ldr	r2, [r7, #32]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	461a      	mov	r2, r3
 8008854:	f003 faf4 	bl	800be40 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	4413      	add	r3, r2
 800885e:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	429a      	cmp	r2, r3
 8008868:	d304      	bcc.n	8008874 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008878:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800887a:	6a3b      	ldr	r3, [r7, #32]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3728      	adds	r7, #40	; 0x28
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4413      	add	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d304      	bcc.n	80088b6 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80088d2:	2355      	movs	r3, #85	; 0x55
 80088d4:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6979      	ldr	r1, [r7, #20]
 80088da:	68b8      	ldr	r0, [r7, #8]
 80088dc:	f003 fabe 	bl	800be5c <memset>
 80088e0:	4602      	mov	r2, r0
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00a      	beq.n	80088fe <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	613b      	str	r3, [r7, #16]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80088fe:	2224      	movs	r2, #36	; 0x24
 8008900:	2100      	movs	r1, #0
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f003 faaa 	bl	800be5c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008920:	771a      	strb	r2, [r3, #28]
}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800892a:	b580      	push	{r7, lr}
 800892c:	b08e      	sub	sp, #56	; 0x38
 800892e:	af04      	add	r7, sp, #16
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <xTaskCreateStatic+0x2a>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	623b      	str	r3, [r7, #32]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <xTaskCreateStatic+0x46>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	61fb      	str	r3, [r7, #28]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008970:	23bc      	movs	r3, #188	; 0xbc
 8008972:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2bbc      	cmp	r3, #188	; 0xbc
 8008978:	d00a      	beq.n	8008990 <xTaskCreateStatic+0x66>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	61bb      	str	r3, [r7, #24]
}
 800898c:	bf00      	nop
 800898e:	e7fe      	b.n	800898e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008990:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01e      	beq.n	80089d6 <xTaskCreateStatic+0xac>
 8008998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01b      	beq.n	80089d6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089b0:	2300      	movs	r3, #0
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	9302      	str	r3, [sp, #8]
 80089b8:	f107 0314 	add.w	r3, r7, #20
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f851 	bl	8008a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d0:	f000 f8f4 	bl	8008bbc <prvAddNewTaskToReadyList>
 80089d4:	e001      	b.n	80089da <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089da:	697b      	ldr	r3, [r7, #20]
	}
 80089dc:	4618      	mov	r0, r3
 80089de:	3728      	adds	r7, #40	; 0x28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08c      	sub	sp, #48	; 0x30
 80089e8:	af04      	add	r7, sp, #16
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f002 fa05 	bl	800ae08 <pvPortMalloc>
 80089fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00e      	beq.n	8008a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a06:	20bc      	movs	r0, #188	; 0xbc
 8008a08:	f002 f9fe 	bl	800ae08 <pvPortMalloc>
 8008a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
 8008a1a:	e005      	b.n	8008a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a1c:	6978      	ldr	r0, [r7, #20]
 8008a1e:	f002 fabf 	bl	800afa0 <vPortFree>
 8008a22:	e001      	b.n	8008a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d017      	beq.n	8008a5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f80f 	bl	8008a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a52:	69f8      	ldr	r0, [r7, #28]
 8008a54:	f000 f8b2 	bl	8008bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e002      	b.n	8008a64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a64:	69bb      	ldr	r3, [r7, #24]
	}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	461a      	mov	r2, r3
 8008a88:	21a5      	movs	r1, #165	; 0xa5
 8008a8a:	f003 f9e7 	bl	800be5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	617b      	str	r3, [r7, #20]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d01f      	beq.n	8008b0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	e012      	b.n	8008afa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	7819      	ldrb	r1, [r3, #0]
 8008adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3334      	adds	r3, #52	; 0x34
 8008ae4:	460a      	mov	r2, r1
 8008ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	4413      	add	r3, r2
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d006      	beq.n	8008b02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	3301      	adds	r3, #1
 8008af8:	61fb      	str	r3, [r7, #28]
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	2b0f      	cmp	r3, #15
 8008afe:	d9e9      	bls.n	8008ad4 <prvInitialiseNewTask+0x64>
 8008b00:	e000      	b.n	8008b04 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b0c:	e003      	b.n	8008b16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	2b37      	cmp	r3, #55	; 0x37
 8008b1a:	d901      	bls.n	8008b20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b1c:	2337      	movs	r3, #55	; 0x37
 8008b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	2200      	movs	r2, #0
 8008b30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	3304      	adds	r3, #4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fb64 	bl	8007204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	3318      	adds	r3, #24
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fb5f 	bl	8007204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	3354      	adds	r3, #84	; 0x54
 8008b70:	2260      	movs	r2, #96	; 0x60
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f003 f971 	bl	800be5c <memset>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	4a0c      	ldr	r2, [pc, #48]	; (8008bb0 <prvInitialiseNewTask+0x140>)
 8008b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	4a0c      	ldr	r2, [pc, #48]	; (8008bb4 <prvInitialiseNewTask+0x144>)
 8008b84:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	4a0b      	ldr	r2, [pc, #44]	; (8008bb8 <prvInitialiseNewTask+0x148>)
 8008b8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	69b8      	ldr	r0, [r7, #24]
 8008b92:	f001 feed 	bl	800a970 <pxPortInitialiseStack>
 8008b96:	4602      	mov	r2, r0
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ba8:	bf00      	nop
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	0800cb80 	.word	0x0800cb80
 8008bb4:	0800cba0 	.word	0x0800cba0
 8008bb8:	0800cb60 	.word	0x0800cb60

08008bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc4:	f001 fffe 	bl	800abc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bc8:	4b2d      	ldr	r3, [pc, #180]	; (8008c80 <prvAddNewTaskToReadyList+0xc4>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	4a2c      	ldr	r2, [pc, #176]	; (8008c80 <prvAddNewTaskToReadyList+0xc4>)
 8008bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bd2:	4b2c      	ldr	r3, [pc, #176]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bda:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <prvAddNewTaskToReadyList+0xc4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d110      	bne.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008be8:	f000 fd0c 	bl	8009604 <prvInitialiseTaskLists>
 8008bec:	e00d      	b.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bee:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <prvAddNewTaskToReadyList+0xcc>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bf6:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d802      	bhi.n	8008c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c04:	4a1f      	ldr	r2, [pc, #124]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c0a:	4b20      	ldr	r3, [pc, #128]	; (8008c8c <prvAddNewTaskToReadyList+0xd0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	4a1e      	ldr	r2, [pc, #120]	; (8008c8c <prvAddNewTaskToReadyList+0xd0>)
 8008c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c14:	4b1d      	ldr	r3, [pc, #116]	; (8008c8c <prvAddNewTaskToReadyList+0xd0>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <prvAddNewTaskToReadyList+0xd4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d903      	bls.n	8008c30 <prvAddNewTaskToReadyList+0x74>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <prvAddNewTaskToReadyList+0xd4>)
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <prvAddNewTaskToReadyList+0xd8>)
 8008c3e:	441a      	add	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f7fe fae9 	bl	800721e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c4c:	f001 ffea 	bl	800ac24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c50:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <prvAddNewTaskToReadyList+0xcc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00e      	beq.n	8008c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <prvAddNewTaskToReadyList+0xc8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d207      	bcs.n	8008c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <prvAddNewTaskToReadyList+0xdc>)
 8008c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000f14 	.word	0x20000f14
 8008c84:	20000a40 	.word	0x20000a40
 8008c88:	20000f20 	.word	0x20000f20
 8008c8c:	20000f30 	.word	0x20000f30
 8008c90:	20000f1c 	.word	0x20000f1c
 8008c94:	20000a44 	.word	0x20000a44
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <eTaskGetState+0x28>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8008cc4:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <eTaskGetState+0xb8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d102      	bne.n	8008cd4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	e03a      	b.n	8008d4a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8008cd4:	f001 ff76 	bl	800abc4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008cde:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <eTaskGetState+0xbc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <eTaskGetState+0xc0>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008cea:	f001 ff9b 	bl	800ac24 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d003      	beq.n	8008cfe <eTaskGetState+0x62>
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d102      	bne.n	8008d04 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e022      	b.n	8008d4a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	4a16      	ldr	r2, [pc, #88]	; (8008d60 <eTaskGetState+0xc4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d112      	bne.n	8008d32 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10b      	bne.n	8008d2c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d102      	bne.n	8008d26 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8008d20:	2302      	movs	r3, #2
 8008d22:	77fb      	strb	r3, [r7, #31]
 8008d24:	e011      	b.n	8008d4a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8008d26:	2303      	movs	r3, #3
 8008d28:	77fb      	strb	r3, [r7, #31]
 8008d2a:	e00e      	b.n	8008d4a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e00b      	b.n	8008d4a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	4a0b      	ldr	r2, [pc, #44]	; (8008d64 <eTaskGetState+0xc8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d002      	beq.n	8008d40 <eTaskGetState+0xa4>
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008d40:	2304      	movs	r3, #4
 8008d42:	77fb      	strb	r3, [r7, #31]
 8008d44:	e001      	b.n	8008d4a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008d46:	2301      	movs	r3, #1
 8008d48:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008d4a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000a40 	.word	0x20000a40
 8008d58:	20000ecc 	.word	0x20000ecc
 8008d5c:	20000ed0 	.word	0x20000ed0
 8008d60:	20000f00 	.word	0x20000f00
 8008d64:	20000ee8 	.word	0x20000ee8

08008d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d76:	463a      	mov	r2, r7
 8008d78:	1d39      	adds	r1, r7, #4
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe f9ec 	bl	800715c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	9202      	str	r2, [sp, #8]
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	2300      	movs	r3, #0
 8008d94:	460a      	mov	r2, r1
 8008d96:	4924      	ldr	r1, [pc, #144]	; (8008e28 <vTaskStartScheduler+0xc0>)
 8008d98:	4824      	ldr	r0, [pc, #144]	; (8008e2c <vTaskStartScheduler+0xc4>)
 8008d9a:	f7ff fdc6 	bl	800892a <xTaskCreateStatic>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4a23      	ldr	r2, [pc, #140]	; (8008e30 <vTaskStartScheduler+0xc8>)
 8008da2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008da4:	4b22      	ldr	r3, [pc, #136]	; (8008e30 <vTaskStartScheduler+0xc8>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e001      	b.n	8008db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d102      	bne.n	8008dc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dbc:	f001 fa8a 	bl	800a2d4 <xTimerCreateTimerTask>
 8008dc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d11b      	bne.n	8008e00 <vTaskStartScheduler+0x98>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	613b      	str	r3, [r7, #16]
}
 8008dda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ddc:	4b15      	ldr	r3, [pc, #84]	; (8008e34 <vTaskStartScheduler+0xcc>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3354      	adds	r3, #84	; 0x54
 8008de2:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <vTaskStartScheduler+0xd0>)
 8008de4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <vTaskStartScheduler+0xd4>)
 8008de8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <vTaskStartScheduler+0xd8>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008df4:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <vTaskStartScheduler+0xdc>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dfa:	f001 fe41 	bl	800aa80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dfe:	e00e      	b.n	8008e1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d10a      	bne.n	8008e1e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <vTaskStartScheduler+0xb4>
}
 8008e1e:	bf00      	nop
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	0800ca74 	.word	0x0800ca74
 8008e2c:	080095d5 	.word	0x080095d5
 8008e30:	20000f38 	.word	0x20000f38
 8008e34:	20000a40 	.word	0x20000a40
 8008e38:	2000010c 	.word	0x2000010c
 8008e3c:	20000f34 	.word	0x20000f34
 8008e40:	20000f20 	.word	0x20000f20
 8008e44:	20000f18 	.word	0x20000f18

08008e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <vTaskSuspendAll+0x18>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <vTaskSuspendAll+0x18>)
 8008e54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e56:	bf00      	nop
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20000f3c 	.word	0x20000f3c

08008e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e72:	4b42      	ldr	r3, [pc, #264]	; (8008f7c <xTaskResumeAll+0x118>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	e7fe      	b.n	8008e8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e90:	f001 fe98 	bl	800abc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e94:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <xTaskResumeAll+0x118>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	4a38      	ldr	r2, [pc, #224]	; (8008f7c <xTaskResumeAll+0x118>)
 8008e9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e9e:	4b37      	ldr	r3, [pc, #220]	; (8008f7c <xTaskResumeAll+0x118>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d162      	bne.n	8008f6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ea6:	4b36      	ldr	r3, [pc, #216]	; (8008f80 <xTaskResumeAll+0x11c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d05e      	beq.n	8008f6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eae:	e02f      	b.n	8008f10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb0:	4b34      	ldr	r3, [pc, #208]	; (8008f84 <xTaskResumeAll+0x120>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3318      	adds	r3, #24
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fa0b 	bl	80072d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fa06 	bl	80072d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	4b2d      	ldr	r3, [pc, #180]	; (8008f88 <xTaskResumeAll+0x124>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d903      	bls.n	8008ee0 <xTaskResumeAll+0x7c>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <xTaskResumeAll+0x124>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4a27      	ldr	r2, [pc, #156]	; (8008f8c <xTaskResumeAll+0x128>)
 8008eee:	441a      	add	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe f991 	bl	800721e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	4b23      	ldr	r3, [pc, #140]	; (8008f90 <xTaskResumeAll+0x12c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f0a:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <xTaskResumeAll+0x130>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f10:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <xTaskResumeAll+0x120>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1cb      	bne.n	8008eb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f1e:	f000 fce7 	bl	80098f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f22:	4b1d      	ldr	r3, [pc, #116]	; (8008f98 <xTaskResumeAll+0x134>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d010      	beq.n	8008f50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f2e:	f000 f8d5 	bl	80090dc <xTaskIncrementTick>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f38:	4b16      	ldr	r3, [pc, #88]	; (8008f94 <xTaskResumeAll+0x130>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f1      	bne.n	8008f2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f4a:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <xTaskResumeAll+0x134>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f50:	4b10      	ldr	r3, [pc, #64]	; (8008f94 <xTaskResumeAll+0x130>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <xTaskResumeAll+0x138>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f6c:	f001 fe5a 	bl	800ac24 <vPortExitCritical>

	return xAlreadyYielded;
 8008f70:	68bb      	ldr	r3, [r7, #8]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000f3c 	.word	0x20000f3c
 8008f80:	20000f14 	.word	0x20000f14
 8008f84:	20000ed4 	.word	0x20000ed4
 8008f88:	20000f1c 	.word	0x20000f1c
 8008f8c:	20000a44 	.word	0x20000a44
 8008f90:	20000a40 	.word	0x20000a40
 8008f94:	20000f28 	.word	0x20000f28
 8008f98:	20000f24 	.word	0x20000f24
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <xTaskGetTickCount+0x1c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fac:	687b      	ldr	r3, [r7, #4]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	20000f18 	.word	0x20000f18

08008fc0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	2338      	movs	r3, #56	; 0x38
 8008fd2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8008fd4:	f7ff ff38 	bl	8008e48 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8008fd8:	4b3a      	ldr	r3, [pc, #232]	; (80090c4 <uxTaskGetSystemState+0x104>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d368      	bcc.n	80090b4 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4613      	mov	r3, r2
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	1898      	adds	r0, r3, r2
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4a31      	ldr	r2, [pc, #196]	; (80090c8 <uxTaskGetSystemState+0x108>)
 8009004:	4413      	add	r3, r2
 8009006:	2201      	movs	r2, #1
 8009008:	4619      	mov	r1, r3
 800900a:	f000 fbcf 	bl	80097ac <prvListTasksWithinSingleList>
 800900e:	4602      	mov	r2, r0
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4413      	add	r3, r2
 8009014:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e2      	bne.n	8008fe2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4613      	mov	r3, r2
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	461a      	mov	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	4a27      	ldr	r2, [pc, #156]	; (80090cc <uxTaskGetSystemState+0x10c>)
 800902e:	6811      	ldr	r1, [r2, #0]
 8009030:	2202      	movs	r2, #2
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fbba 	bl	80097ac <prvListTasksWithinSingleList>
 8009038:	4602      	mov	r2, r0
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	4413      	add	r3, r2
 800903e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4613      	mov	r3, r2
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	461a      	mov	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	4a1f      	ldr	r2, [pc, #124]	; (80090d0 <uxTaskGetSystemState+0x110>)
 8009052:	6811      	ldr	r1, [r2, #0]
 8009054:	2202      	movs	r2, #2
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fba8 	bl	80097ac <prvListTasksWithinSingleList>
 800905c:	4602      	mov	r2, r0
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4613      	mov	r3, r2
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	461a      	mov	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	2204      	movs	r2, #4
 8009076:	4917      	ldr	r1, [pc, #92]	; (80090d4 <uxTaskGetSystemState+0x114>)
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fb97 	bl	80097ac <prvListTasksWithinSingleList>
 800907e:	4602      	mov	r2, r0
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	4413      	add	r3, r2
 8009084:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4613      	mov	r3, r2
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	461a      	mov	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	2203      	movs	r2, #3
 8009098:	490f      	ldr	r1, [pc, #60]	; (80090d8 <uxTaskGetSystemState+0x118>)
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fb86 	bl	80097ac <prvListTasksWithinSingleList>
 80090a0:	4602      	mov	r2, r0
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	4413      	add	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80090b4:	f7ff fed6 	bl	8008e64 <xTaskResumeAll>

		return uxTask;
 80090b8:	697b      	ldr	r3, [r7, #20]
	}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000f14 	.word	0x20000f14
 80090c8:	20000a44 	.word	0x20000a44
 80090cc:	20000ecc 	.word	0x20000ecc
 80090d0:	20000ed0 	.word	0x20000ed0
 80090d4:	20000ee8 	.word	0x20000ee8
 80090d8:	20000f00 	.word	0x20000f00

080090dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090e6:	4b4f      	ldr	r3, [pc, #316]	; (8009224 <xTaskIncrementTick+0x148>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f040 808f 	bne.w	800920e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090f0:	4b4d      	ldr	r3, [pc, #308]	; (8009228 <xTaskIncrementTick+0x14c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090f8:	4a4b      	ldr	r2, [pc, #300]	; (8009228 <xTaskIncrementTick+0x14c>)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d120      	bne.n	8009146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009104:	4b49      	ldr	r3, [pc, #292]	; (800922c <xTaskIncrementTick+0x150>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <xTaskIncrementTick+0x48>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	603b      	str	r3, [r7, #0]
}
 8009120:	bf00      	nop
 8009122:	e7fe      	b.n	8009122 <xTaskIncrementTick+0x46>
 8009124:	4b41      	ldr	r3, [pc, #260]	; (800922c <xTaskIncrementTick+0x150>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]
 800912a:	4b41      	ldr	r3, [pc, #260]	; (8009230 <xTaskIncrementTick+0x154>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a3f      	ldr	r2, [pc, #252]	; (800922c <xTaskIncrementTick+0x150>)
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	4a3f      	ldr	r2, [pc, #252]	; (8009230 <xTaskIncrementTick+0x154>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	4b3e      	ldr	r3, [pc, #248]	; (8009234 <xTaskIncrementTick+0x158>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	4a3d      	ldr	r2, [pc, #244]	; (8009234 <xTaskIncrementTick+0x158>)
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	f000 fbd5 	bl	80098f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009146:	4b3c      	ldr	r3, [pc, #240]	; (8009238 <xTaskIncrementTick+0x15c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	429a      	cmp	r2, r3
 800914e:	d349      	bcc.n	80091e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009150:	4b36      	ldr	r3, [pc, #216]	; (800922c <xTaskIncrementTick+0x150>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800915a:	4b37      	ldr	r3, [pc, #220]	; (8009238 <xTaskIncrementTick+0x15c>)
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	601a      	str	r2, [r3, #0]
					break;
 8009162:	e03f      	b.n	80091e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009164:	4b31      	ldr	r3, [pc, #196]	; (800922c <xTaskIncrementTick+0x150>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	d203      	bcs.n	8009184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800917c:	4a2e      	ldr	r2, [pc, #184]	; (8009238 <xTaskIncrementTick+0x15c>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009182:	e02f      	b.n	80091e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	3304      	adds	r3, #4
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe f8a5 	bl	80072d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d004      	beq.n	80091a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	3318      	adds	r3, #24
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe f89c 	bl	80072d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	4b25      	ldr	r3, [pc, #148]	; (800923c <xTaskIncrementTick+0x160>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d903      	bls.n	80091b4 <xTaskIncrementTick+0xd8>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	4a22      	ldr	r2, [pc, #136]	; (800923c <xTaskIncrementTick+0x160>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <xTaskIncrementTick+0x164>)
 80091c2:	441a      	add	r2, r3
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe f827 	bl	800721e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d4:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <xTaskIncrementTick+0x168>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d3b8      	bcc.n	8009150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e2:	e7b5      	b.n	8009150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091e4:	4b17      	ldr	r3, [pc, #92]	; (8009244 <xTaskIncrementTick+0x168>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4915      	ldr	r1, [pc, #84]	; (8009240 <xTaskIncrementTick+0x164>)
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d901      	bls.n	8009200 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009200:	4b11      	ldr	r3, [pc, #68]	; (8009248 <xTaskIncrementTick+0x16c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e004      	b.n	8009218 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800920e:	4b0f      	ldr	r3, [pc, #60]	; (800924c <xTaskIncrementTick+0x170>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	4a0d      	ldr	r2, [pc, #52]	; (800924c <xTaskIncrementTick+0x170>)
 8009216:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009218:	697b      	ldr	r3, [r7, #20]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000f3c 	.word	0x20000f3c
 8009228:	20000f18 	.word	0x20000f18
 800922c:	20000ecc 	.word	0x20000ecc
 8009230:	20000ed0 	.word	0x20000ed0
 8009234:	20000f2c 	.word	0x20000f2c
 8009238:	20000f34 	.word	0x20000f34
 800923c:	20000f1c 	.word	0x20000f1c
 8009240:	20000a44 	.word	0x20000a44
 8009244:	20000a40 	.word	0x20000a40
 8009248:	20000f28 	.word	0x20000f28
 800924c:	20000f24 	.word	0x20000f24

08009250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009256:	4b2a      	ldr	r3, [pc, #168]	; (8009300 <vTaskSwitchContext+0xb0>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800925e:	4b29      	ldr	r3, [pc, #164]	; (8009304 <vTaskSwitchContext+0xb4>)
 8009260:	2201      	movs	r2, #1
 8009262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009264:	e046      	b.n	80092f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009266:	4b27      	ldr	r3, [pc, #156]	; (8009304 <vTaskSwitchContext+0xb4>)
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926c:	4b26      	ldr	r3, [pc, #152]	; (8009308 <vTaskSwitchContext+0xb8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e010      	b.n	8009296 <vTaskSwitchContext+0x46>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <vTaskSwitchContext+0x40>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	607b      	str	r3, [r7, #4]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <vTaskSwitchContext+0x3e>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3b01      	subs	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	491d      	ldr	r1, [pc, #116]	; (800930c <vTaskSwitchContext+0xbc>)
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0e4      	beq.n	8009274 <vTaskSwitchContext+0x24>
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4a15      	ldr	r2, [pc, #84]	; (800930c <vTaskSwitchContext+0xbc>)
 80092b6:	4413      	add	r3, r2
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	605a      	str	r2, [r3, #4]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	3308      	adds	r3, #8
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d104      	bne.n	80092da <vTaskSwitchContext+0x8a>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	605a      	str	r2, [r3, #4]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	4a0b      	ldr	r2, [pc, #44]	; (8009310 <vTaskSwitchContext+0xc0>)
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	4a08      	ldr	r2, [pc, #32]	; (8009308 <vTaskSwitchContext+0xb8>)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <vTaskSwitchContext+0xc0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3354      	adds	r3, #84	; 0x54
 80092f0:	4a08      	ldr	r2, [pc, #32]	; (8009314 <vTaskSwitchContext+0xc4>)
 80092f2:	6013      	str	r3, [r2, #0]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20000f3c 	.word	0x20000f3c
 8009304:	20000f28 	.word	0x20000f28
 8009308:	20000f1c 	.word	0x20000f1c
 800930c:	20000a44 	.word	0x20000a44
 8009310:	20000a40 	.word	0x20000a40
 8009314:	2000010c 	.word	0x2000010c

08009318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <vTaskPlaceOnEventList+0x44>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3318      	adds	r3, #24
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7fd ff8d 	bl	8007266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800934c:	2101      	movs	r1, #1
 800934e:	6838      	ldr	r0, [r7, #0]
 8009350:	f000 ff6c 	bl	800a22c <prvAddCurrentTaskToDelayedList>
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000a40 	.word	0x20000a40

08009360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3318      	adds	r3, #24
 800938e:	4619      	mov	r1, r3
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7fd ff44 	bl	800721e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800939c:	f04f 33ff 	mov.w	r3, #4294967295
 80093a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	68b8      	ldr	r0, [r7, #8]
 80093a6:	f000 ff41 	bl	800a22c <prvAddCurrentTaskToDelayedList>
	}
 80093aa:	bf00      	nop
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000a40 	.word	0x20000a40

080093b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	3318      	adds	r3, #24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fd ff75 	bl	80072d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ee:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <xTaskRemoveFromEventList+0xb0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d11d      	bne.n	8009432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fd ff6c 	bl	80072d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	4b19      	ldr	r3, [pc, #100]	; (800946c <xTaskRemoveFromEventList+0xb4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d903      	bls.n	8009414 <xTaskRemoveFromEventList+0x5c>
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a16      	ldr	r2, [pc, #88]	; (800946c <xTaskRemoveFromEventList+0xb4>)
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4a13      	ldr	r2, [pc, #76]	; (8009470 <xTaskRemoveFromEventList+0xb8>)
 8009422:	441a      	add	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3304      	adds	r3, #4
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f7fd fef7 	bl	800721e <vListInsertEnd>
 8009430:	e005      	b.n	800943e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3318      	adds	r3, #24
 8009436:	4619      	mov	r1, r3
 8009438:	480e      	ldr	r0, [pc, #56]	; (8009474 <xTaskRemoveFromEventList+0xbc>)
 800943a:	f7fd fef0 	bl	800721e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <xTaskRemoveFromEventList+0xc0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	429a      	cmp	r2, r3
 800944a:	d905      	bls.n	8009458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009450:	4b0a      	ldr	r3, [pc, #40]	; (800947c <xTaskRemoveFromEventList+0xc4>)
 8009452:	2201      	movs	r2, #1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e001      	b.n	800945c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800945c:	697b      	ldr	r3, [r7, #20]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20000f3c 	.word	0x20000f3c
 800946c:	20000f1c 	.word	0x20000f1c
 8009470:	20000a44 	.word	0x20000a44
 8009474:	20000ed4 	.word	0x20000ed4
 8009478:	20000a40 	.word	0x20000a40
 800947c:	20000f28 	.word	0x20000f28

08009480 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	60fb      	str	r3, [r7, #12]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80094a4:	f001 fb8e 	bl	800abc4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094a8:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <vTaskSetTimeOutState+0x44>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <vTaskSetTimeOutState+0x48>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80094b8:	f001 fbb4 	bl	800ac24 <vPortExitCritical>
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000f2c 	.word	0x20000f2c
 80094c8:	20000f18 	.word	0x20000f18

080094cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094d4:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <vTaskInternalSetTimeOutState+0x24>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094dc:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <vTaskInternalSetTimeOutState+0x28>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	605a      	str	r2, [r3, #4]
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	20000f2c 	.word	0x20000f2c
 80094f4:	20000f18 	.word	0x20000f18

080094f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	613b      	str	r3, [r7, #16]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	60fb      	str	r3, [r7, #12]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800953a:	f001 fb43 	bl	800abc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800953e:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <xTaskCheckForTimeOut+0xbc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d102      	bne.n	800955e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	61fb      	str	r3, [r7, #28]
 800955c:	e023      	b.n	80095a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <xTaskCheckForTimeOut+0xc0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d007      	beq.n	800957a <xTaskCheckForTimeOut+0x82>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	429a      	cmp	r2, r3
 8009572:	d302      	bcc.n	800957a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	61fb      	str	r3, [r7, #28]
 8009578:	e015      	b.n	80095a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	429a      	cmp	r2, r3
 8009582:	d20b      	bcs.n	800959c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	1ad2      	subs	r2, r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ff9b 	bl	80094cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009596:	2300      	movs	r3, #0
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	e004      	b.n	80095a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095a6:	f001 fb3d 	bl	800ac24 <vPortExitCritical>

	return xReturn;
 80095aa:	69fb      	ldr	r3, [r7, #28]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3720      	adds	r7, #32
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000f18 	.word	0x20000f18
 80095b8:	20000f2c 	.word	0x20000f2c

080095bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <vTaskMissedYield+0x14>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20000f28 	.word	0x20000f28

080095d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095dc:	f000 f852 	bl	8009684 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095e0:	4b06      	ldr	r3, [pc, #24]	; (80095fc <prvIdleTask+0x28>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d9f9      	bls.n	80095dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <prvIdleTask+0x2c>)
 80095ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095f8:	e7f0      	b.n	80095dc <prvIdleTask+0x8>
 80095fa:	bf00      	nop
 80095fc:	20000a44 	.word	0x20000a44
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800960a:	2300      	movs	r3, #0
 800960c:	607b      	str	r3, [r7, #4]
 800960e:	e00c      	b.n	800962a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <prvInitialiseTaskLists+0x60>)
 800961c:	4413      	add	r3, r2
 800961e:	4618      	mov	r0, r3
 8009620:	f7fd fdd0 	bl	80071c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3301      	adds	r3, #1
 8009628:	607b      	str	r3, [r7, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b37      	cmp	r3, #55	; 0x37
 800962e:	d9ef      	bls.n	8009610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009630:	480d      	ldr	r0, [pc, #52]	; (8009668 <prvInitialiseTaskLists+0x64>)
 8009632:	f7fd fdc7 	bl	80071c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009636:	480d      	ldr	r0, [pc, #52]	; (800966c <prvInitialiseTaskLists+0x68>)
 8009638:	f7fd fdc4 	bl	80071c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800963c:	480c      	ldr	r0, [pc, #48]	; (8009670 <prvInitialiseTaskLists+0x6c>)
 800963e:	f7fd fdc1 	bl	80071c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009642:	480c      	ldr	r0, [pc, #48]	; (8009674 <prvInitialiseTaskLists+0x70>)
 8009644:	f7fd fdbe 	bl	80071c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009648:	480b      	ldr	r0, [pc, #44]	; (8009678 <prvInitialiseTaskLists+0x74>)
 800964a:	f7fd fdbb 	bl	80071c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800964e:	4b0b      	ldr	r3, [pc, #44]	; (800967c <prvInitialiseTaskLists+0x78>)
 8009650:	4a05      	ldr	r2, [pc, #20]	; (8009668 <prvInitialiseTaskLists+0x64>)
 8009652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <prvInitialiseTaskLists+0x7c>)
 8009656:	4a05      	ldr	r2, [pc, #20]	; (800966c <prvInitialiseTaskLists+0x68>)
 8009658:	601a      	str	r2, [r3, #0]
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000a44 	.word	0x20000a44
 8009668:	20000ea4 	.word	0x20000ea4
 800966c:	20000eb8 	.word	0x20000eb8
 8009670:	20000ed4 	.word	0x20000ed4
 8009674:	20000ee8 	.word	0x20000ee8
 8009678:	20000f00 	.word	0x20000f00
 800967c:	20000ecc 	.word	0x20000ecc
 8009680:	20000ed0 	.word	0x20000ed0

08009684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800968a:	e019      	b.n	80096c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800968c:	f001 fa9a 	bl	800abc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009690:	4b10      	ldr	r3, [pc, #64]	; (80096d4 <prvCheckTasksWaitingTermination+0x50>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	4618      	mov	r0, r3
 800969e:	f7fd fe1b 	bl	80072d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <prvCheckTasksWaitingTermination+0x54>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <prvCheckTasksWaitingTermination+0x54>)
 80096aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096ac:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <prvCheckTasksWaitingTermination+0x58>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <prvCheckTasksWaitingTermination+0x58>)
 80096b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096b6:	f001 fab5 	bl	800ac24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f8e4 	bl	8009888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <prvCheckTasksWaitingTermination+0x58>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e1      	bne.n	800968c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000ee8 	.word	0x20000ee8
 80096d8:	20000f14 	.word	0x20000f14
 80096dc:	20000efc 	.word	0x20000efc

080096e0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <vTaskGetInfo+0x1a>
 80096f4:	4b2c      	ldr	r3, [pc, #176]	; (80097a8 <vTaskGetInfo+0xc8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	e000      	b.n	80096fc <vTaskGetInfo+0x1c>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2200      	movs	r2, #0
 8009732:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	2b05      	cmp	r3, #5
 8009738:	d01a      	beq.n	8009770 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800973a:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <vTaskGetInfo+0xc8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	429a      	cmp	r2, r3
 8009742:	d103      	bne.n	800974c <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2200      	movs	r2, #0
 8009748:	731a      	strb	r2, [r3, #12]
 800974a:	e018      	b.n	800977e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	2b03      	cmp	r3, #3
 8009756:	d112      	bne.n	800977e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8009758:	f7ff fb76 	bl	8008e48 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2202      	movs	r2, #2
 8009768:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800976a:	f7ff fb7b 	bl	8008e64 <xTaskResumeAll>
 800976e:	e006      	b.n	800977e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8009770:	6978      	ldr	r0, [r7, #20]
 8009772:	f7ff fa93 	bl	8008c9c <eTaskGetState>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f861 	bl	8009850 <prvTaskCheckFreeStackSpace>
 800978e:	4603      	mov	r3, r0
 8009790:	461a      	mov	r2, r3
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8009796:	e002      	b.n	800979e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	841a      	strh	r2, [r3, #32]
	}
 800979e:	bf00      	nop
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000a40 	.word	0x20000a40

080097ac <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d03f      	beq.n	8009846 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	623b      	str	r3, [r7, #32]
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	605a      	str	r2, [r3, #4]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	3308      	adds	r3, #8
 80097dc:	429a      	cmp	r2, r3
 80097de:	d104      	bne.n	80097ea <prvListTasksWithinSingleList+0x3e>
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	605a      	str	r2, [r3, #4]
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	3308      	adds	r3, #8
 8009808:	429a      	cmp	r2, r3
 800980a:	d104      	bne.n	8009816 <prvListTasksWithinSingleList+0x6a>
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800981e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009820:	4613      	mov	r3, r2
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	461a      	mov	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1899      	adds	r1, r3, r2
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	2201      	movs	r2, #1
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff ff54 	bl	80096e0 <vTaskGetInfo>
				uxTask++;
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	3301      	adds	r3, #1
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	429a      	cmp	r2, r3
 8009844:	d1d5      	bne.n	80097f2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009848:	4618      	mov	r0, r3
 800984a:	3728      	adds	r7, #40	; 0x28
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800985c:	e005      	b.n	800986a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3301      	adds	r3, #1
 8009862:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2ba5      	cmp	r3, #165	; 0xa5
 8009870:	d0f5      	beq.n	800985e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	b29b      	uxth	r3, r3
	}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3354      	adds	r3, #84	; 0x54
 8009894:	4618      	mov	r0, r3
 8009896:	f002 fb8b 	bl	800bfb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d108      	bne.n	80098b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 fb79 	bl	800afa0 <vPortFree>
				vPortFree( pxTCB );
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f001 fb76 	bl	800afa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098b4:	e018      	b.n	80098e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d103      	bne.n	80098c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f001 fb6d 	bl	800afa0 <vPortFree>
	}
 80098c6:	e00f      	b.n	80098e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d00a      	beq.n	80098e8 <prvDeleteTCB+0x60>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60fb      	str	r3, [r7, #12]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <prvDeleteTCB+0x5e>
	}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvResetNextTaskUnblockTime+0x38>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <prvResetNextTaskUnblockTime+0x3c>)
 8009902:	f04f 32ff 	mov.w	r2, #4294967295
 8009906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009908:	e008      	b.n	800991c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990a:	4b07      	ldr	r3, [pc, #28]	; (8009928 <prvResetNextTaskUnblockTime+0x38>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a04      	ldr	r2, [pc, #16]	; (800992c <prvResetNextTaskUnblockTime+0x3c>)
 800991a:	6013      	str	r3, [r2, #0]
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	20000ecc 	.word	0x20000ecc
 800992c:	20000f34 	.word	0x20000f34

08009930 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <xTaskGetCurrentTaskHandle+0x1c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800993c:	687b      	ldr	r3, [r7, #4]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000a40 	.word	0x20000a40

08009950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <xTaskGetSchedulerState+0x34>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d102      	bne.n	8009964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800995e:	2301      	movs	r3, #1
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	e008      	b.n	8009976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009964:	4b08      	ldr	r3, [pc, #32]	; (8009988 <xTaskGetSchedulerState+0x38>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800996c:	2302      	movs	r3, #2
 800996e:	607b      	str	r3, [r7, #4]
 8009970:	e001      	b.n	8009976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009972:	2300      	movs	r3, #0
 8009974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009976:	687b      	ldr	r3, [r7, #4]
	}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20000f20 	.word	0x20000f20
 8009988:	20000f3c 	.word	0x20000f3c

0800998c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d051      	beq.n	8009a46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a6:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <xTaskPriorityInherit+0xc4>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d241      	bcs.n	8009a34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	db06      	blt.n	80099c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <xTaskPriorityInherit+0xc4>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6959      	ldr	r1, [r3, #20]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a1f      	ldr	r2, [pc, #124]	; (8009a54 <xTaskPriorityInherit+0xc8>)
 80099d8:	4413      	add	r3, r2
 80099da:	4299      	cmp	r1, r3
 80099dc:	d122      	bne.n	8009a24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	3304      	adds	r3, #4
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fd fc78 	bl	80072d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099e8:	4b19      	ldr	r3, [pc, #100]	; (8009a50 <xTaskPriorityInherit+0xc4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f6:	4b18      	ldr	r3, [pc, #96]	; (8009a58 <xTaskPriorityInherit+0xcc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d903      	bls.n	8009a06 <xTaskPriorityInherit+0x7a>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <xTaskPriorityInherit+0xcc>)
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4a10      	ldr	r2, [pc, #64]	; (8009a54 <xTaskPriorityInherit+0xc8>)
 8009a14:	441a      	add	r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7fd fbfe 	bl	800721e <vListInsertEnd>
 8009a22:	e004      	b.n	8009a2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <xTaskPriorityInherit+0xc4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e008      	b.n	8009a46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <xTaskPriorityInherit+0xc4>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d201      	bcs.n	8009a46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a42:	2301      	movs	r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a46:	68fb      	ldr	r3, [r7, #12]
	}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20000a40 	.word	0x20000a40
 8009a54:	20000a44 	.word	0x20000a44
 8009a58:	20000f1c 	.word	0x20000f1c

08009a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d056      	beq.n	8009b20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a72:	4b2e      	ldr	r3, [pc, #184]	; (8009b2c <xTaskPriorityDisinherit+0xd0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d00a      	beq.n	8009a92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	60fb      	str	r3, [r7, #12]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	60bb      	str	r3, [r7, #8]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab4:	1e5a      	subs	r2, r3, #1
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d02c      	beq.n	8009b20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d128      	bne.n	8009b20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fd fc00 	bl	80072d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <xTaskPriorityDisinherit+0xd4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d903      	bls.n	8009b00 <xTaskPriorityDisinherit+0xa4>
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	4a0c      	ldr	r2, [pc, #48]	; (8009b30 <xTaskPriorityDisinherit+0xd4>)
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4a09      	ldr	r2, [pc, #36]	; (8009b34 <xTaskPriorityDisinherit+0xd8>)
 8009b0e:	441a      	add	r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7fd fb81 	bl	800721e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b20:	697b      	ldr	r3, [r7, #20]
	}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000a40 	.word	0x20000a40
 8009b30:	20000f1c 	.word	0x20000f1c
 8009b34:	20000a44 	.word	0x20000a44

08009b38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b46:	2301      	movs	r3, #1
 8009b48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d06a      	beq.n	8009c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	60fb      	str	r3, [r7, #12]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d902      	bls.n	8009b7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	61fb      	str	r3, [r7, #28]
 8009b7c:	e002      	b.n	8009b84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d04b      	beq.n	8009c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d146      	bne.n	8009c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b98:	4b25      	ldr	r3, [pc, #148]	; (8009c30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d10a      	bne.n	8009bb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60bb      	str	r3, [r7, #8]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	db04      	blt.n	8009bd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	6959      	ldr	r1, [r3, #20]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4a13      	ldr	r2, [pc, #76]	; (8009c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009be6:	4413      	add	r3, r2
 8009be8:	4299      	cmp	r1, r3
 8009bea:	d11c      	bne.n	8009c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fd fb71 	bl	80072d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfa:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d903      	bls.n	8009c0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	4a0c      	ldr	r2, [pc, #48]	; (8009c38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4a07      	ldr	r2, [pc, #28]	; (8009c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c18:	441a      	add	r2, r3
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4610      	mov	r0, r2
 8009c22:	f7fd fafc 	bl	800721e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c26:	bf00      	nop
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000a40 	.word	0x20000a40
 8009c34:	20000a44 	.word	0x20000a44
 8009c38:	20000f1c 	.word	0x20000f1c

08009c3c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f002 fa3d 	bl	800c0c8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7f6 fabe 	bl	80001d0 <strlen>
 8009c54:	60f8      	str	r0, [r7, #12]
 8009c56:	e007      	b.n	8009c68 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	2220      	movs	r2, #32
 8009c60:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b0e      	cmp	r3, #14
 8009c6c:	d9f4      	bls.n	8009c58 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4413      	add	r3, r2
	}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8009c88:	b590      	push	{r4, r7, lr}
 8009c8a:	b089      	sub	sp, #36	; 0x24
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8009c96:	4b45      	ldr	r3, [pc, #276]	; (8009dac <vTaskList+0x124>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8009c9c:	4b43      	ldr	r3, [pc, #268]	; (8009dac <vTaskList+0x124>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f001 f8ad 	bl	800ae08 <pvPortMalloc>
 8009cae:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d076      	beq.n	8009da4 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	68f9      	ldr	r1, [r7, #12]
 8009cba:	68b8      	ldr	r0, [r7, #8]
 8009cbc:	f7ff f980 	bl	8008fc0 <uxTaskGetSystemState>
 8009cc0:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	e066      	b.n	8009d96 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	7b1b      	ldrb	r3, [r3, #12]
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d81b      	bhi.n	8009d16 <vTaskList+0x8e>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <vTaskList+0x5c>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009cf9 	.word	0x08009cf9
 8009ce8:	08009cff 	.word	0x08009cff
 8009cec:	08009d05 	.word	0x08009d05
 8009cf0:	08009d0b 	.word	0x08009d0b
 8009cf4:	08009d11 	.word	0x08009d11
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8009cf8:	2358      	movs	r3, #88	; 0x58
 8009cfa:	74fb      	strb	r3, [r7, #19]
										break;
 8009cfc:	e00e      	b.n	8009d1c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8009cfe:	2352      	movs	r3, #82	; 0x52
 8009d00:	74fb      	strb	r3, [r7, #19]
										break;
 8009d02:	e00b      	b.n	8009d1c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8009d04:	2342      	movs	r3, #66	; 0x42
 8009d06:	74fb      	strb	r3, [r7, #19]
										break;
 8009d08:	e008      	b.n	8009d1c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8009d0a:	2353      	movs	r3, #83	; 0x53
 8009d0c:	74fb      	strb	r3, [r7, #19]
										break;
 8009d0e:	e005      	b.n	8009d1c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8009d10:	2344      	movs	r3, #68	; 0x44
 8009d12:	74fb      	strb	r3, [r7, #19]
										break;
 8009d14:	e002      	b.n	8009d1c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8009d16:	2300      	movs	r3, #0
 8009d18:	74fb      	strb	r3, [r7, #19]
										break;
 8009d1a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	461a      	mov	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff ff83 	bl	8009c3c <prvWriteNameToBuffer>
 8009d36:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8009d38:	7cf9      	ldrb	r1, [r7, #19]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	461a      	mov	r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4413      	add	r3, r2
 8009d4a:	6918      	ldr	r0, [r3, #16]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	4413      	add	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	461a      	mov	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	8c1b      	ldrh	r3, [r3, #32]
 8009d5e:	461c      	mov	r4, r3
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4613      	mov	r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	4413      	add	r3, r2
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	9400      	str	r4, [sp, #0]
 8009d76:	4603      	mov	r3, r0
 8009d78:	460a      	mov	r2, r1
 8009d7a:	490d      	ldr	r1, [pc, #52]	; (8009db0 <vTaskList+0x128>)
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f002 f983 	bl	800c088 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7f6 fa24 	bl	80001d0 <strlen>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	3301      	adds	r3, #1
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d394      	bcc.n	8009cc8 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8009d9e:	68b8      	ldr	r0, [r7, #8]
 8009da0:	f001 f8fe 	bl	800afa0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009da4:	bf00      	nop
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd90      	pop	{r4, r7, pc}
 8009dac:	20000f14 	.word	0x20000f14
 8009db0:	0800ca7c 	.word	0x0800ca7c

08009db4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009db4:	b480      	push	{r7}
 8009db6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009db8:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009dc0:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dc6:	3201      	adds	r2, #1
 8009dc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009dca:	4b03      	ldr	r3, [pc, #12]	; (8009dd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
	}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	20000a40 	.word	0x20000a40

08009ddc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009dea:	f000 feeb 	bl	800abc4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009dee:	4b29      	ldr	r3, [pc, #164]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d01c      	beq.n	8009e36 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009dfc:	4b25      	ldr	r3, [pc, #148]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	43d2      	mvns	r2, r2
 8009e08:	400a      	ands	r2, r1
 8009e0a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009e0e:	4b21      	ldr	r3, [pc, #132]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e1e:	2101      	movs	r1, #1
 8009e20:	6838      	ldr	r0, [r7, #0]
 8009e22:	f000 fa03 	bl	800a22c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009e26:	4b1c      	ldr	r3, [pc, #112]	; (8009e98 <xTaskNotifyWait+0xbc>)
 8009e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e36:	f000 fef5 	bl	800ac24 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009e3a:	f000 fec3 	bl	800abc4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d005      	beq.n	8009e50 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009e44:	4b13      	ldr	r3, [pc, #76]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009e50:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d002      	beq.n	8009e64 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	e00a      	b.n	8009e7a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	43d2      	mvns	r2, r2
 8009e70:	400a      	ands	r2, r1
 8009e72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009e76:	2301      	movs	r3, #1
 8009e78:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e7a:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <xTaskNotifyWait+0xb8>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009e84:	f000 fece 	bl	800ac24 <vPortExitCritical>

		return xReturn;
 8009e88:	697b      	ldr	r3, [r7, #20]
	}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20000a40 	.word	0x20000a40
 8009e98:	e000ed04 	.word	0xe000ed04

08009e9c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	; 0x28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009eac:	2301      	movs	r3, #1
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <xTaskGenericNotify+0x30>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	61bb      	str	r3, [r7, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009ed0:	f000 fe78 	bl	800abc4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009eea:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009ef4:	79fb      	ldrb	r3, [r7, #7]
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d82d      	bhi.n	8009f56 <xTaskGenericNotify+0xba>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <xTaskGenericNotify+0x64>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f79 	.word	0x08009f79
 8009f04:	08009f15 	.word	0x08009f15
 8009f08:	08009f27 	.word	0x08009f27
 8009f0c:	08009f37 	.word	0x08009f37
 8009f10:	08009f41 	.word	0x08009f41
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009f24:	e02b      	b.n	8009f7e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009f34:	e023      	b.n	8009f7e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009f3e:	e01e      	b.n	8009f7e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009f40:	7ffb      	ldrb	r3, [r7, #31]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d004      	beq.n	8009f50 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009f4e:	e016      	b.n	8009f7e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009f54:	e013      	b.n	8009f7e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d00c      	beq.n	8009f7c <xTaskGenericNotify+0xe0>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	617b      	str	r3, [r7, #20]
}
 8009f74:	bf00      	nop
 8009f76:	e7fe      	b.n	8009f76 <xTaskGenericNotify+0xda>
					break;
 8009f78:	bf00      	nop
 8009f7a:	e000      	b.n	8009f7e <xTaskGenericNotify+0xe2>

					break;
 8009f7c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f7e:	7ffb      	ldrb	r3, [r7, #31]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d13a      	bne.n	8009ffa <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fd f9a5 	bl	80072d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f92:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <xTaskGenericNotify+0x16c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d903      	bls.n	8009fa2 <xTaskGenericNotify+0x106>
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	4a1a      	ldr	r2, [pc, #104]	; (800a008 <xTaskGenericNotify+0x16c>)
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4a17      	ldr	r2, [pc, #92]	; (800a00c <xTaskGenericNotify+0x170>)
 8009fb0:	441a      	add	r2, r3
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fd f930 	bl	800721e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <xTaskGenericNotify+0x140>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	613b      	str	r3, [r7, #16]
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <xTaskGenericNotify+0x174>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d907      	bls.n	8009ffa <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009fea:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <xTaskGenericNotify+0x178>)
 8009fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009ffa:	f000 fe13 	bl	800ac24 <vPortExitCritical>

		return xReturn;
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a000:	4618      	mov	r0, r3
 800a002:	3728      	adds	r7, #40	; 0x28
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000f1c 	.word	0x20000f1c
 800a00c:	20000a44 	.word	0x20000a44
 800a010:	20000a40 	.word	0x20000a40
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08e      	sub	sp, #56	; 0x38
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a028:	2301      	movs	r3, #1
 800a02a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a048:	f000 fe9e 	bl	800ad88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a050:	f3ef 8211 	mrs	r2, BASEPRI
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	623a      	str	r2, [r7, #32]
 800a066:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a068:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	2202      	movs	r2, #2
 800a08a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	2b04      	cmp	r3, #4
 800a092:	d82f      	bhi.n	800a0f4 <xTaskGenericNotifyFromISR+0xdc>
 800a094:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <xTaskGenericNotifyFromISR+0x84>)
 800a096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a117 	.word	0x0800a117
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0c3 	.word	0x0800a0c3
 800a0a8:	0800a0d3 	.word	0x0800a0d3
 800a0ac:	0800a0dd 	.word	0x0800a0dd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a0c0:	e02c      	b.n	800a11c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a0d0:	e024      	b.n	800a11c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a0da:	e01f      	b.n	800a11c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a0dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d004      	beq.n	800a0ee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a0ec:	e016      	b.n	800a11c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a0f2:	e013      	b.n	800a11c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	d00c      	beq.n	800a11a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	61bb      	str	r3, [r7, #24]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a116:	bf00      	nop
 800a118:	e000      	b.n	800a11c <xTaskGenericNotifyFromISR+0x104>
					break;
 800a11a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a11c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a120:	2b01      	cmp	r3, #1
 800a122:	d146      	bne.n	800a1b2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	617b      	str	r3, [r7, #20]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a142:	4b21      	ldr	r3, [pc, #132]	; (800a1c8 <xTaskGenericNotifyFromISR+0x1b0>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11d      	bne.n	800a186 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	3304      	adds	r3, #4
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fd f8c2 	bl	80072d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a158:	4b1c      	ldr	r3, [pc, #112]	; (800a1cc <xTaskGenericNotifyFromISR+0x1b4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d903      	bls.n	800a168 <xTaskGenericNotifyFromISR+0x150>
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	4a19      	ldr	r2, [pc, #100]	; (800a1cc <xTaskGenericNotifyFromISR+0x1b4>)
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16c:	4613      	mov	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4a16      	ldr	r2, [pc, #88]	; (800a1d0 <xTaskGenericNotifyFromISR+0x1b8>)
 800a176:	441a      	add	r2, r3
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	3304      	adds	r3, #4
 800a17c:	4619      	mov	r1, r3
 800a17e:	4610      	mov	r0, r2
 800a180:	f7fd f84d 	bl	800721e <vListInsertEnd>
 800a184:	e005      	b.n	800a192 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	3318      	adds	r3, #24
 800a18a:	4619      	mov	r1, r3
 800a18c:	4811      	ldr	r0, [pc, #68]	; (800a1d4 <xTaskGenericNotifyFromISR+0x1bc>)
 800a18e:	f7fd f846 	bl	800721e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <xTaskGenericNotifyFromISR+0x1c0>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d908      	bls.n	800a1b2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <xTaskGenericNotifyFromISR+0x1c4>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f383 8811 	msr	BASEPRI, r3
}
 800a1bc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3738      	adds	r7, #56	; 0x38
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000f3c 	.word	0x20000f3c
 800a1cc:	20000f1c 	.word	0x20000f1c
 800a1d0:	20000a44 	.word	0x20000a44
 800a1d4:	20000ed4 	.word	0x20000ed4
 800a1d8:	20000a40 	.word	0x20000a40
 800a1dc:	20000f28 	.word	0x20000f28

0800a1e0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <xTaskNotifyStateClear+0x14>
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <xTaskNotifyStateClear+0x48>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	e000      	b.n	800a1f6 <xTaskNotifyStateClear+0x16>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a1f8:	f000 fce4 	bl	800abc4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d106      	bne.n	800a216 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800a210:	2301      	movs	r3, #1
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e001      	b.n	800a21a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a216:	2300      	movs	r3, #0
 800a218:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a21a:	f000 fd03 	bl	800ac24 <vPortExitCritical>

		return xReturn;
 800a21e:	68fb      	ldr	r3, [r7, #12]
	}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000a40 	.word	0x20000a40

0800a22c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a236:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a23c:	4b20      	ldr	r3, [pc, #128]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3304      	adds	r3, #4
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd f848 	bl	80072d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d10a      	bne.n	800a266 <prvAddCurrentTaskToDelayedList+0x3a>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d007      	beq.n	800a266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a256:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4819      	ldr	r0, [pc, #100]	; (800a2c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a260:	f7fc ffdd 	bl	800721e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a264:	e026      	b.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4413      	add	r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a26e:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d209      	bcs.n	800a292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b0f      	ldr	r3, [pc, #60]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fc ffeb 	bl	8007266 <vListInsert>
}
 800a290:	e010      	b.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a292:	4b0e      	ldr	r3, [pc, #56]	; (800a2cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fc ffe1 	bl	8007266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	; (800a2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d202      	bcs.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2ae:	4a08      	ldr	r2, [pc, #32]	; (800a2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6013      	str	r3, [r2, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000f18 	.word	0x20000f18
 800a2c0:	20000a40 	.word	0x20000a40
 800a2c4:	20000f00 	.word	0x20000f00
 800a2c8:	20000ed0 	.word	0x20000ed0
 800a2cc:	20000ecc 	.word	0x20000ecc
 800a2d0:	20000f34 	.word	0x20000f34

0800a2d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2de:	f000 fb07 	bl	800a8f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2e2:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <xTimerCreateTimerTask+0x80>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d021      	beq.n	800a32e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2f2:	1d3a      	adds	r2, r7, #4
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	f107 030c 	add.w	r3, r7, #12
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fc ff47 	bl	8007190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	9202      	str	r2, [sp, #8]
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	2302      	movs	r3, #2
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2300      	movs	r3, #0
 800a312:	460a      	mov	r2, r1
 800a314:	4910      	ldr	r1, [pc, #64]	; (800a358 <xTimerCreateTimerTask+0x84>)
 800a316:	4811      	ldr	r0, [pc, #68]	; (800a35c <xTimerCreateTimerTask+0x88>)
 800a318:	f7fe fb07 	bl	800892a <xTaskCreateStatic>
 800a31c:	4603      	mov	r3, r0
 800a31e:	4a10      	ldr	r2, [pc, #64]	; (800a360 <xTimerCreateTimerTask+0x8c>)
 800a320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a322:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <xTimerCreateTimerTask+0x8c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a32a:	2301      	movs	r3, #1
 800a32c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	613b      	str	r3, [r7, #16]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a34a:	697b      	ldr	r3, [r7, #20]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000f70 	.word	0x20000f70
 800a358:	0800ca8c 	.word	0x0800ca8c
 800a35c:	0800a499 	.word	0x0800a499
 800a360:	20000f74 	.word	0x20000f74

0800a364 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08a      	sub	sp, #40	; 0x28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a372:	2300      	movs	r3, #0
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	623b      	str	r3, [r7, #32]
}
 800a38e:	bf00      	nop
 800a390:	e7fe      	b.n	800a390 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a392:	4b1a      	ldr	r3, [pc, #104]	; (800a3fc <xTimerGenericCommand+0x98>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d02a      	beq.n	800a3f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b05      	cmp	r3, #5
 800a3aa:	dc18      	bgt.n	800a3de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3ac:	f7ff fad0 	bl	8009950 <xTaskGetSchedulerState>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d109      	bne.n	800a3ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3b6:	4b11      	ldr	r3, [pc, #68]	; (800a3fc <xTimerGenericCommand+0x98>)
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f107 0110 	add.w	r1, r7, #16
 800a3be:	2300      	movs	r3, #0
 800a3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c2:	f7fd f923 	bl	800760c <xQueueGenericSend>
 800a3c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a3c8:	e012      	b.n	800a3f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3ca:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <xTimerGenericCommand+0x98>)
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	f107 0110 	add.w	r1, r7, #16
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f7fd f919 	bl	800760c <xQueueGenericSend>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24
 800a3dc:	e008      	b.n	800a3f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3de:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <xTimerGenericCommand+0x98>)
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	f107 0110 	add.w	r1, r7, #16
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	f7fd fa0d 	bl	8007808 <xQueueGenericSendFromISR>
 800a3ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3728      	adds	r7, #40	; 0x28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000f70 	.word	0x20000f70

0800a400 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af02      	add	r7, sp, #8
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40a:	4b22      	ldr	r3, [pc, #136]	; (800a494 <prvProcessExpiredTimer+0x94>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	3304      	adds	r3, #4
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fc ff5d 	bl	80072d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d022      	beq.n	800a472 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	699a      	ldr	r2, [r3, #24]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	18d1      	adds	r1, r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	6978      	ldr	r0, [r7, #20]
 800a43a:	f000 f8d1 	bl	800a5e0 <prvInsertTimerInActiveList>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d01f      	beq.n	800a484 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a444:	2300      	movs	r3, #0
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	2300      	movs	r3, #0
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	2100      	movs	r1, #0
 800a44e:	6978      	ldr	r0, [r7, #20]
 800a450:	f7ff ff88 	bl	800a364 <xTimerGenericCommand>
 800a454:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d113      	bne.n	800a484 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	60fb      	str	r3, [r7, #12]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a478:	f023 0301 	bic.w	r3, r3, #1
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	6978      	ldr	r0, [r7, #20]
 800a48a:	4798      	blx	r3
}
 800a48c:	bf00      	nop
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000f68 	.word	0x20000f68

0800a498 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4a0:	f107 0308 	add.w	r3, r7, #8
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 f857 	bl	800a558 <prvGetNextExpireTime>
 800a4aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 f803 	bl	800a4bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4b6:	f000 f8d5 	bl	800a664 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4ba:	e7f1      	b.n	800a4a0 <prvTimerTask+0x8>

0800a4bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4c6:	f7fe fcbf 	bl	8008e48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ca:	f107 0308 	add.w	r3, r7, #8
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f866 	bl	800a5a0 <prvSampleTimeNow>
 800a4d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d130      	bne.n	800a53e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <prvProcessTimerOrBlockTask+0x3c>
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d806      	bhi.n	800a4f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4ea:	f7fe fcbb 	bl	8008e64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff ff85 	bl	800a400 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4f6:	e024      	b.n	800a542 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <prvProcessTimerOrBlockTask+0x90>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <prvProcessTimerOrBlockTask+0x50>
 800a508:	2301      	movs	r3, #1
 800a50a:	e000      	b.n	800a50e <prvProcessTimerOrBlockTask+0x52>
 800a50c:	2300      	movs	r3, #0
 800a50e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a510:	4b0f      	ldr	r3, [pc, #60]	; (800a550 <prvProcessTimerOrBlockTask+0x94>)
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4619      	mov	r1, r3
 800a51e:	f7fd fdd9 	bl	80080d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a522:	f7fe fc9f 	bl	8008e64 <xTaskResumeAll>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a52c:	4b09      	ldr	r3, [pc, #36]	; (800a554 <prvProcessTimerOrBlockTask+0x98>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	f3bf 8f6f 	isb	sy
}
 800a53c:	e001      	b.n	800a542 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a53e:	f7fe fc91 	bl	8008e64 <xTaskResumeAll>
}
 800a542:	bf00      	nop
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000f6c 	.word	0x20000f6c
 800a550:	20000f70 	.word	0x20000f70
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a560:	4b0e      	ldr	r3, [pc, #56]	; (800a59c <prvGetNextExpireTime+0x44>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <prvGetNextExpireTime+0x16>
 800a56a:	2201      	movs	r2, #1
 800a56c:	e000      	b.n	800a570 <prvGetNextExpireTime+0x18>
 800a56e:	2200      	movs	r2, #0
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d105      	bne.n	800a588 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a57c:	4b07      	ldr	r3, [pc, #28]	; (800a59c <prvGetNextExpireTime+0x44>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	e001      	b.n	800a58c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a58c:	68fb      	ldr	r3, [r7, #12]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000f68 	.word	0x20000f68

0800a5a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5a8:	f7fe fcfa 	bl	8008fa0 <xTaskGetTickCount>
 800a5ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <prvSampleTimeNow+0x3c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d205      	bcs.n	800a5c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5b8:	f000 f936 	bl	800a828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	e002      	b.n	800a5ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5ca:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <prvSampleTimeNow+0x3c>)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000f78 	.word	0x20000f78

0800a5e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	429a      	cmp	r2, r3
 800a604:	d812      	bhi.n	800a62c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	1ad2      	subs	r2, r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	429a      	cmp	r2, r3
 800a612:	d302      	bcc.n	800a61a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e01b      	b.n	800a652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a61a:	4b10      	ldr	r3, [pc, #64]	; (800a65c <prvInsertTimerInActiveList+0x7c>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fc fe1e 	bl	8007266 <vListInsert>
 800a62a:	e012      	b.n	800a652 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d206      	bcs.n	800a642 <prvInsertTimerInActiveList+0x62>
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d302      	bcc.n	800a642 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e007      	b.n	800a652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a642:	4b07      	ldr	r3, [pc, #28]	; (800a660 <prvInsertTimerInActiveList+0x80>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3304      	adds	r3, #4
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f7fc fe0a 	bl	8007266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a652:	697b      	ldr	r3, [r7, #20]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20000f6c 	.word	0x20000f6c
 800a660:	20000f68 	.word	0x20000f68

0800a664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08e      	sub	sp, #56	; 0x38
 800a668:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a66a:	e0ca      	b.n	800a802 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	da18      	bge.n	800a6a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a672:	1d3b      	adds	r3, r7, #4
 800a674:	3304      	adds	r3, #4
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	61fb      	str	r3, [r7, #28]
}
 800a690:	bf00      	nop
 800a692:	e7fe      	b.n	800a692 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a69a:	6850      	ldr	r0, [r2, #4]
 800a69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a69e:	6892      	ldr	r2, [r2, #8]
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f2c0 80aa 	blt.w	800a800 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d004      	beq.n	800a6c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fc fe0b 	bl	80072d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff ff6b 	bl	800a5a0 <prvSampleTimeNow>
 800a6ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b09      	cmp	r3, #9
 800a6d0:	f200 8097 	bhi.w	800a802 <prvProcessReceivedCommands+0x19e>
 800a6d4:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <prvProcessReceivedCommands+0x78>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a705 	.word	0x0800a705
 800a6e0:	0800a705 	.word	0x0800a705
 800a6e4:	0800a705 	.word	0x0800a705
 800a6e8:	0800a779 	.word	0x0800a779
 800a6ec:	0800a78d 	.word	0x0800a78d
 800a6f0:	0800a7d7 	.word	0x0800a7d7
 800a6f4:	0800a705 	.word	0x0800a705
 800a6f8:	0800a705 	.word	0x0800a705
 800a6fc:	0800a779 	.word	0x0800a779
 800a700:	0800a78d 	.word	0x0800a78d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	18d1      	adds	r1, r2, r3
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a724:	f7ff ff5c 	bl	800a5e0 <prvInsertTimerInActiveList>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d069      	beq.n	800a802 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a734:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d05e      	beq.n	800a802 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	441a      	add	r2, r3
 800a74c:	2300      	movs	r3, #0
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	2100      	movs	r1, #0
 800a754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a756:	f7ff fe05 	bl	800a364 <xTimerGenericCommand>
 800a75a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d14f      	bne.n	800a802 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	61bb      	str	r3, [r7, #24]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a77e:	f023 0301 	bic.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a78a:	e03a      	b.n	800a802 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	617b      	str	r3, [r7, #20]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	18d1      	adds	r1, r2, r3
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d0:	f7ff ff06 	bl	800a5e0 <prvInsertTimerInActiveList>
					break;
 800a7d4:	e015      	b.n	800a802 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d103      	bne.n	800a7ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e6:	f000 fbdb 	bl	800afa0 <vPortFree>
 800a7ea:	e00a      	b.n	800a802 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f2:	f023 0301 	bic.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7fe:	e000      	b.n	800a802 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a802:	4b08      	ldr	r3, [pc, #32]	; (800a824 <prvProcessReceivedCommands+0x1c0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	1d39      	adds	r1, r7, #4
 800a808:	2200      	movs	r2, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fd f924 	bl	8007a58 <xQueueReceive>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	f47f af2a 	bne.w	800a66c <prvProcessReceivedCommands+0x8>
	}
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	3730      	adds	r7, #48	; 0x30
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20000f70 	.word	0x20000f70

0800a828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a82e:	e048      	b.n	800a8c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a830:	4b2d      	ldr	r3, [pc, #180]	; (800a8e8 <prvSwitchTimerLists+0xc0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a83a:	4b2b      	ldr	r3, [pc, #172]	; (800a8e8 <prvSwitchTimerLists+0xc0>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3304      	adds	r3, #4
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fc fd45 	bl	80072d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	d02e      	beq.n	800a8c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	4413      	add	r3, r2
 800a86c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	429a      	cmp	r2, r3
 800a874:	d90e      	bls.n	800a894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a882:	4b19      	ldr	r3, [pc, #100]	; (800a8e8 <prvSwitchTimerLists+0xc0>)
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7fc fcea 	bl	8007266 <vListInsert>
 800a892:	e016      	b.n	800a8c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a894:	2300      	movs	r3, #0
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	2300      	movs	r3, #0
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	2100      	movs	r1, #0
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fd60 	bl	800a364 <xTimerGenericCommand>
 800a8a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	603b      	str	r3, [r7, #0]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <prvSwitchTimerLists+0xc0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1b1      	bne.n	800a830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8cc:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <prvSwitchTimerLists+0xc0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8d2:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <prvSwitchTimerLists+0xc4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a04      	ldr	r2, [pc, #16]	; (800a8e8 <prvSwitchTimerLists+0xc0>)
 800a8d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8da:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <prvSwitchTimerLists+0xc4>)
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	6013      	str	r3, [r2, #0]
}
 800a8e0:	bf00      	nop
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	20000f68 	.word	0x20000f68
 800a8ec:	20000f6c 	.word	0x20000f6c

0800a8f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8f6:	f000 f965 	bl	800abc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8fa:	4b15      	ldr	r3, [pc, #84]	; (800a950 <prvCheckForValidListAndQueue+0x60>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d120      	bne.n	800a944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a902:	4814      	ldr	r0, [pc, #80]	; (800a954 <prvCheckForValidListAndQueue+0x64>)
 800a904:	f7fc fc5e 	bl	80071c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a908:	4813      	ldr	r0, [pc, #76]	; (800a958 <prvCheckForValidListAndQueue+0x68>)
 800a90a:	f7fc fc5b 	bl	80071c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <prvCheckForValidListAndQueue+0x6c>)
 800a910:	4a10      	ldr	r2, [pc, #64]	; (800a954 <prvCheckForValidListAndQueue+0x64>)
 800a912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a914:	4b12      	ldr	r3, [pc, #72]	; (800a960 <prvCheckForValidListAndQueue+0x70>)
 800a916:	4a10      	ldr	r2, [pc, #64]	; (800a958 <prvCheckForValidListAndQueue+0x68>)
 800a918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a91a:	2300      	movs	r3, #0
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <prvCheckForValidListAndQueue+0x74>)
 800a920:	4a11      	ldr	r2, [pc, #68]	; (800a968 <prvCheckForValidListAndQueue+0x78>)
 800a922:	2110      	movs	r1, #16
 800a924:	200a      	movs	r0, #10
 800a926:	f7fc fd69 	bl	80073fc <xQueueGenericCreateStatic>
 800a92a:	4603      	mov	r3, r0
 800a92c:	4a08      	ldr	r2, [pc, #32]	; (800a950 <prvCheckForValidListAndQueue+0x60>)
 800a92e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <prvCheckForValidListAndQueue+0x60>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a938:	4b05      	ldr	r3, [pc, #20]	; (800a950 <prvCheckForValidListAndQueue+0x60>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	490b      	ldr	r1, [pc, #44]	; (800a96c <prvCheckForValidListAndQueue+0x7c>)
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fd fb9e 	bl	8008080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a944:	f000 f96e 	bl	800ac24 <vPortExitCritical>
}
 800a948:	bf00      	nop
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20000f70 	.word	0x20000f70
 800a954:	20000f40 	.word	0x20000f40
 800a958:	20000f54 	.word	0x20000f54
 800a95c:	20000f68 	.word	0x20000f68
 800a960:	20000f6c 	.word	0x20000f6c
 800a964:	2000101c 	.word	0x2000101c
 800a968:	20000f7c 	.word	0x20000f7c
 800a96c:	0800ca94 	.word	0x0800ca94

0800a970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3b04      	subs	r3, #4
 800a980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3b04      	subs	r3, #4
 800a98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f023 0201 	bic.w	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3b04      	subs	r3, #4
 800a99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9a0:	4a0c      	ldr	r2, [pc, #48]	; (800a9d4 <pxPortInitialiseStack+0x64>)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3b14      	subs	r3, #20
 800a9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3b04      	subs	r3, #4
 800a9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f06f 0202 	mvn.w	r2, #2
 800a9be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3b20      	subs	r3, #32
 800a9c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	0800a9d9 	.word	0x0800a9d9

0800a9d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9e2:	4b12      	ldr	r3, [pc, #72]	; (800aa2c <prvTaskExitError+0x54>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ea:	d00a      	beq.n	800aa02 <prvTaskExitError+0x2a>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	60fb      	str	r3, [r7, #12]
}
 800a9fe:	bf00      	nop
 800aa00:	e7fe      	b.n	800aa00 <prvTaskExitError+0x28>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	60bb      	str	r3, [r7, #8]
}
 800aa14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa16:	bf00      	nop
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0fc      	beq.n	800aa18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	200000a4 	.word	0x200000a4

0800aa30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <pxCurrentTCBConst2>)
 800aa32:	6819      	ldr	r1, [r3, #0]
 800aa34:	6808      	ldr	r0, [r1, #0]
 800aa36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	f380 8809 	msr	PSP, r0
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f380 8811 	msr	BASEPRI, r0
 800aa4a:	4770      	bx	lr
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst2>:
 800aa50:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa58:	4808      	ldr	r0, [pc, #32]	; (800aa7c <prvPortStartFirstTask+0x24>)
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	6800      	ldr	r0, [r0, #0]
 800aa5e:	f380 8808 	msr	MSP, r0
 800aa62:	f04f 0000 	mov.w	r0, #0
 800aa66:	f380 8814 	msr	CONTROL, r0
 800aa6a:	b662      	cpsie	i
 800aa6c:	b661      	cpsie	f
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	df00      	svc	0
 800aa78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa7a:	bf00      	nop
 800aa7c:	e000ed08 	.word	0xe000ed08

0800aa80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa86:	4b46      	ldr	r3, [pc, #280]	; (800aba0 <xPortStartScheduler+0x120>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a46      	ldr	r2, [pc, #280]	; (800aba4 <xPortStartScheduler+0x124>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d10a      	bne.n	800aaa6 <xPortStartScheduler+0x26>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	613b      	str	r3, [r7, #16]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aaa6:	4b3e      	ldr	r3, [pc, #248]	; (800aba0 <xPortStartScheduler+0x120>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a3f      	ldr	r2, [pc, #252]	; (800aba8 <xPortStartScheduler+0x128>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d10a      	bne.n	800aac6 <xPortStartScheduler+0x46>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	60fb      	str	r3, [r7, #12]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aac6:	4b39      	ldr	r3, [pc, #228]	; (800abac <xPortStartScheduler+0x12c>)
 800aac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	22ff      	movs	r2, #255	; 0xff
 800aad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	4b31      	ldr	r3, [pc, #196]	; (800abb0 <xPortStartScheduler+0x130>)
 800aaec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaee:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <xPortStartScheduler+0x134>)
 800aaf0:	2207      	movs	r2, #7
 800aaf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaf4:	e009      	b.n	800ab0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aaf6:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <xPortStartScheduler+0x134>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	4a2d      	ldr	r2, [pc, #180]	; (800abb4 <xPortStartScheduler+0x134>)
 800aafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab12:	2b80      	cmp	r3, #128	; 0x80
 800ab14:	d0ef      	beq.n	800aaf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab16:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f1c3 0307 	rsb	r3, r3, #7
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d00a      	beq.n	800ab38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	60bb      	str	r3, [r7, #8]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	021b      	lsls	r3, r3, #8
 800ab3e:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab42:	4b1c      	ldr	r3, [pc, #112]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab4a:	4a1a      	ldr	r2, [pc, #104]	; (800abb4 <xPortStartScheduler+0x134>)
 800ab4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab56:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a17      	ldr	r2, [pc, #92]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab62:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a14      	ldr	r2, [pc, #80]	; (800abb8 <xPortStartScheduler+0x138>)
 800ab68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab6e:	f000 f8dd 	bl	800ad2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab72:	4b12      	ldr	r3, [pc, #72]	; (800abbc <xPortStartScheduler+0x13c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab78:	f000 f8fc 	bl	800ad74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab7c:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <xPortStartScheduler+0x140>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a0f      	ldr	r2, [pc, #60]	; (800abc0 <xPortStartScheduler+0x140>)
 800ab82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab88:	f7ff ff66 	bl	800aa58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab8c:	f7fe fb60 	bl	8009250 <vTaskSwitchContext>
	prvTaskExitError();
 800ab90:	f7ff ff22 	bl	800a9d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	e000ed00 	.word	0xe000ed00
 800aba4:	410fc271 	.word	0x410fc271
 800aba8:	410fc270 	.word	0x410fc270
 800abac:	e000e400 	.word	0xe000e400
 800abb0:	2000106c 	.word	0x2000106c
 800abb4:	20001070 	.word	0x20001070
 800abb8:	e000ed20 	.word	0xe000ed20
 800abbc:	200000a4 	.word	0x200000a4
 800abc0:	e000ef34 	.word	0xe000ef34

0800abc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	607b      	str	r3, [r7, #4]
}
 800abdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <vPortEnterCritical+0x58>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a0d      	ldr	r2, [pc, #52]	; (800ac1c <vPortEnterCritical+0x58>)
 800abe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abe8:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <vPortEnterCritical+0x58>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d10f      	bne.n	800ac10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <vPortEnterCritical+0x5c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <vPortEnterCritical+0x4c>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	603b      	str	r3, [r7, #0]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <vPortEnterCritical+0x4a>
	}
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	200000a4 	.word	0x200000a4
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac2a:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <vPortExitCritical+0x50>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <vPortExitCritical+0x24>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	607b      	str	r3, [r7, #4]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <vPortExitCritical+0x50>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <vPortExitCritical+0x50>)
 800ac50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac52:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <vPortExitCritical+0x50>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d105      	bne.n	800ac66 <vPortExitCritical+0x42>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	f383 8811 	msr	BASEPRI, r3
}
 800ac64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac66:	bf00      	nop
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	200000a4 	.word	0x200000a4
	...

0800ac80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac80:	f3ef 8009 	mrs	r0, PSP
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <pxCurrentTCBConst>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f01e 0f10 	tst.w	lr, #16
 800ac90:	bf08      	it	eq
 800ac92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aca4:	f380 8811 	msr	BASEPRI, r0
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f7fe face 	bl	8009250 <vTaskSwitchContext>
 800acb4:	f04f 0000 	mov.w	r0, #0
 800acb8:	f380 8811 	msr	BASEPRI, r0
 800acbc:	bc09      	pop	{r0, r3}
 800acbe:	6819      	ldr	r1, [r3, #0]
 800acc0:	6808      	ldr	r0, [r1, #0]
 800acc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc6:	f01e 0f10 	tst.w	lr, #16
 800acca:	bf08      	it	eq
 800accc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acd0:	f380 8809 	msr	PSP, r0
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	f3af 8000 	nop.w

0800ace0 <pxCurrentTCBConst>:
 800ace0:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	607b      	str	r3, [r7, #4]
}
 800ad00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad02:	f7fe f9eb 	bl	80090dc <xTaskIncrementTick>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad0c:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <xPortSysTickHandler+0x40>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	2300      	movs	r3, #0
 800ad16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	f383 8811 	msr	BASEPRI, r3
}
 800ad1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortSetupTimerInterrupt+0x38>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <vPortSetupTimerInterrupt+0x3c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <vPortSetupTimerInterrupt+0x40>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	099b      	lsrs	r3, r3, #6
 800ad48:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <vPortSetupTimerInterrupt+0x44>)
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad4e:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad50:	2207      	movs	r2, #7
 800ad52:	601a      	str	r2, [r3, #0]
}
 800ad54:	bf00      	nop
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	e000e010 	.word	0xe000e010
 800ad64:	e000e018 	.word	0xe000e018
 800ad68:	2000000c 	.word	0x2000000c
 800ad6c:	10624dd3 	.word	0x10624dd3
 800ad70:	e000e014 	.word	0xe000e014

0800ad74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad84 <vPortEnableVFP+0x10>
 800ad78:	6801      	ldr	r1, [r0, #0]
 800ad7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad7e:	6001      	str	r1, [r0, #0]
 800ad80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad82:	bf00      	nop
 800ad84:	e000ed88 	.word	0xe000ed88

0800ad88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad8e:	f3ef 8305 	mrs	r3, IPSR
 800ad92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d914      	bls.n	800adc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad9a:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <vPortValidateInterruptPriority+0x70>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ada4:	4b15      	ldr	r3, [pc, #84]	; (800adfc <vPortValidateInterruptPriority+0x74>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	7afa      	ldrb	r2, [r7, #11]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d20a      	bcs.n	800adc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	607b      	str	r3, [r7, #4]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adc4:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <vPortValidateInterruptPriority+0x78>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adcc:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <vPortValidateInterruptPriority+0x7c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d90a      	bls.n	800adea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	603b      	str	r3, [r7, #0]
}
 800ade6:	bf00      	nop
 800ade8:	e7fe      	b.n	800ade8 <vPortValidateInterruptPriority+0x60>
	}
 800adea:	bf00      	nop
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	e000e3f0 	.word	0xe000e3f0
 800adfc:	2000106c 	.word	0x2000106c
 800ae00:	e000ed0c 	.word	0xe000ed0c
 800ae04:	20001070 	.word	0x20001070

0800ae08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae14:	f7fe f818 	bl	8008e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae18:	4b5b      	ldr	r3, [pc, #364]	; (800af88 <pvPortMalloc+0x180>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae20:	f000 f920 	bl	800b064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae24:	4b59      	ldr	r3, [pc, #356]	; (800af8c <pvPortMalloc+0x184>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8093 	bne.w	800af58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01d      	beq.n	800ae74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae38:	2208      	movs	r2, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d014      	beq.n	800ae74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f023 0307 	bic.w	r3, r3, #7
 800ae50:	3308      	adds	r3, #8
 800ae52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <pvPortMalloc+0x6c>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	617b      	str	r3, [r7, #20]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d06e      	beq.n	800af58 <pvPortMalloc+0x150>
 800ae7a:	4b45      	ldr	r3, [pc, #276]	; (800af90 <pvPortMalloc+0x188>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d869      	bhi.n	800af58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae84:	4b43      	ldr	r3, [pc, #268]	; (800af94 <pvPortMalloc+0x18c>)
 800ae86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae88:	4b42      	ldr	r3, [pc, #264]	; (800af94 <pvPortMalloc+0x18c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae8e:	e004      	b.n	800ae9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d903      	bls.n	800aeac <pvPortMalloc+0xa4>
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f1      	bne.n	800ae90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aeac:	4b36      	ldr	r3, [pc, #216]	; (800af88 <pvPortMalloc+0x180>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d050      	beq.n	800af58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2208      	movs	r2, #8
 800aebc:	4413      	add	r3, r2
 800aebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	2308      	movs	r3, #8
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d91f      	bls.n	800af18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <pvPortMalloc+0xf8>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	613b      	str	r3, [r7, #16]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1ad2      	subs	r2, r2, r3
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af12:	69b8      	ldr	r0, [r7, #24]
 800af14:	f000 f908 	bl	800b128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af18:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <pvPortMalloc+0x188>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	4a1b      	ldr	r2, [pc, #108]	; (800af90 <pvPortMalloc+0x188>)
 800af24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af26:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <pvPortMalloc+0x188>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	4b1b      	ldr	r3, [pc, #108]	; (800af98 <pvPortMalloc+0x190>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d203      	bcs.n	800af3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af32:	4b17      	ldr	r3, [pc, #92]	; (800af90 <pvPortMalloc+0x188>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a18      	ldr	r2, [pc, #96]	; (800af98 <pvPortMalloc+0x190>)
 800af38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <pvPortMalloc+0x184>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	431a      	orrs	r2, r3
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <pvPortMalloc+0x194>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <pvPortMalloc+0x194>)
 800af56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af58:	f7fd ff84 	bl	8008e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <pvPortMalloc+0x174>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	60fb      	str	r3, [r7, #12]
}
 800af78:	bf00      	nop
 800af7a:	e7fe      	b.n	800af7a <pvPortMalloc+0x172>
	return pvReturn;
 800af7c:	69fb      	ldr	r3, [r7, #28]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3728      	adds	r7, #40	; 0x28
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	2000907c 	.word	0x2000907c
 800af8c:	20009090 	.word	0x20009090
 800af90:	20009080 	.word	0x20009080
 800af94:	20009074 	.word	0x20009074
 800af98:	20009084 	.word	0x20009084
 800af9c:	20009088 	.word	0x20009088

0800afa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d04d      	beq.n	800b04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afb2:	2308      	movs	r3, #8
 800afb4:	425b      	negs	r3, r3
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	4413      	add	r3, r2
 800afba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	4b24      	ldr	r3, [pc, #144]	; (800b058 <vPortFree+0xb8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4013      	ands	r3, r2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10a      	bne.n	800afe4 <vPortFree+0x44>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	60fb      	str	r3, [r7, #12]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00a      	beq.n	800b002 <vPortFree+0x62>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	60bb      	str	r3, [r7, #8]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <vPortFree+0xb8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d01e      	beq.n	800b04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d11a      	bne.n	800b04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <vPortFree+0xb8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b028:	f7fd ff0e 	bl	8008e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <vPortFree+0xbc>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <vPortFree+0xbc>)
 800b038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f000 f874 	bl	800b128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <vPortFree+0xc0>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a06      	ldr	r2, [pc, #24]	; (800b060 <vPortFree+0xc0>)
 800b048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b04a:	f7fd ff0b 	bl	8008e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b04e:	bf00      	nop
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20009090 	.word	0x20009090
 800b05c:	20009080 	.word	0x20009080
 800b060:	2000908c 	.word	0x2000908c

0800b064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b070:	4b27      	ldr	r3, [pc, #156]	; (800b110 <prvHeapInit+0xac>)
 800b072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00c      	beq.n	800b098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3307      	adds	r3, #7
 800b082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0307 	bic.w	r3, r3, #7
 800b08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <prvHeapInit+0xac>)
 800b094:	4413      	add	r3, r2
 800b096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b09c:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <prvHeapInit+0xb0>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <prvHeapInit+0xb0>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a15      	ldr	r2, [pc, #84]	; (800b118 <prvHeapInit+0xb4>)
 800b0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <prvHeapInit+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ce:	4b12      	ldr	r3, [pc, #72]	; (800b118 <prvHeapInit+0xb4>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <prvHeapInit+0xb4>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <prvHeapInit+0xb8>)
 800b0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4a09      	ldr	r2, [pc, #36]	; (800b120 <prvHeapInit+0xbc>)
 800b0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0fc:	4b09      	ldr	r3, [pc, #36]	; (800b124 <prvHeapInit+0xc0>)
 800b0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b102:	601a      	str	r2, [r3, #0]
}
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	20001074 	.word	0x20001074
 800b114:	20009074 	.word	0x20009074
 800b118:	2000907c 	.word	0x2000907c
 800b11c:	20009084 	.word	0x20009084
 800b120:	20009080 	.word	0x20009080
 800b124:	20009090 	.word	0x20009090

0800b128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b130:	4b28      	ldr	r3, [pc, #160]	; (800b1d4 <prvInsertBlockIntoFreeList+0xac>)
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e002      	b.n	800b13c <prvInsertBlockIntoFreeList+0x14>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d8f7      	bhi.n	800b136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	4413      	add	r3, r2
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d108      	bne.n	800b16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	441a      	add	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	441a      	add	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d118      	bne.n	800b1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d00d      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	441a      	add	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	e008      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e003      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d002      	beq.n	800b1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20009074 	.word	0x20009074
 800b1d8:	2000907c 	.word	0x2000907c

0800b1dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4912      	ldr	r1, [pc, #72]	; (800b22c <MX_USB_DEVICE_Init+0x50>)
 800b1e4:	4812      	ldr	r0, [pc, #72]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1e6:	f7fa fba7 	bl	8005938 <USBD_Init>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1f0:	f7f5 fc76 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1f4:	490f      	ldr	r1, [pc, #60]	; (800b234 <MX_USB_DEVICE_Init+0x58>)
 800b1f6:	480e      	ldr	r0, [pc, #56]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1f8:	f7fa fbce 	bl	8005998 <USBD_RegisterClass>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b202:	f7f5 fc6d 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b206:	490c      	ldr	r1, [pc, #48]	; (800b238 <MX_USB_DEVICE_Init+0x5c>)
 800b208:	4809      	ldr	r0, [pc, #36]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b20a:	f7fa fabf 	bl	800578c <USBD_CDC_RegisterInterface>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b214:	f7f5 fc64 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b218:	4805      	ldr	r0, [pc, #20]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b21a:	f7fa fbf3 	bl	8005a04 <USBD_Start>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b224:	f7f5 fc5c 	bl	8000ae0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b228:	bf00      	nop
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	200000bc 	.word	0x200000bc
 800b230:	20009094 	.word	0x20009094
 800b234:	20000024 	.word	0x20000024
 800b238:	200000a8 	.word	0x200000a8

0800b23c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b240:	2200      	movs	r2, #0
 800b242:	4905      	ldr	r1, [pc, #20]	; (800b258 <CDC_Init_FS+0x1c>)
 800b244:	4805      	ldr	r0, [pc, #20]	; (800b25c <CDC_Init_FS+0x20>)
 800b246:	f7fa fabb 	bl	80057c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b24a:	4905      	ldr	r1, [pc, #20]	; (800b260 <CDC_Init_FS+0x24>)
 800b24c:	4803      	ldr	r0, [pc, #12]	; (800b25c <CDC_Init_FS+0x20>)
 800b24e:	f7fa fad9 	bl	8005804 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b254:	4618      	mov	r0, r3
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20009b80 	.word	0x20009b80
 800b25c:	20009094 	.word	0x20009094
 800b260:	20009380 	.word	0x20009380

0800b264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
 800b280:	4613      	mov	r3, r2
 800b282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	2b23      	cmp	r3, #35	; 0x23
 800b288:	d84a      	bhi.n	800b320 <CDC_Control_FS+0xac>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <CDC_Control_FS+0x1c>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b321 	.word	0x0800b321
 800b294:	0800b321 	.word	0x0800b321
 800b298:	0800b321 	.word	0x0800b321
 800b29c:	0800b321 	.word	0x0800b321
 800b2a0:	0800b321 	.word	0x0800b321
 800b2a4:	0800b321 	.word	0x0800b321
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b321 	.word	0x0800b321
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b321 	.word	0x0800b321
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b321 	.word	0x0800b321
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b321 	.word	0x0800b321
 800b2dc:	0800b321 	.word	0x0800b321
 800b2e0:	0800b321 	.word	0x0800b321
 800b2e4:	0800b321 	.word	0x0800b321
 800b2e8:	0800b321 	.word	0x0800b321
 800b2ec:	0800b321 	.word	0x0800b321
 800b2f0:	0800b321 	.word	0x0800b321
 800b2f4:	0800b321 	.word	0x0800b321
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b321 	.word	0x0800b321
 800b308:	0800b321 	.word	0x0800b321
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b321 	.word	0x0800b321
 800b318:	0800b321 	.word	0x0800b321
 800b31c:	0800b321 	.word	0x0800b321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b320:	bf00      	nop
  }

  return (USBD_OK);
 800b322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <CDC_Receive_FS>:
  */
  /* USER CODE BEGIN 6 */
void Print_Task(void *param);
//void queue_print(char* data, int size);
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	portBASE_TYPE yield = pdFALSE;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60bb      	str	r3, [r7, #8]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	4810      	ldr	r0, [pc, #64]	; (800b384 <CDC_Receive_FS+0x54>)
 800b342:	f7fa fa5f 	bl	8005804 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b346:	480f      	ldr	r0, [pc, #60]	; (800b384 <CDC_Receive_FS+0x54>)
 800b348:	f7fa fac0 	bl	80058cc <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	60fb      	str	r3, [r7, #12]
  xMessageBufferSendFromISR(rMessageBuffer, Buf, len, &yield);
 800b352:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <CDC_Receive_FS+0x58>)
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	f7fd f830 	bl	80083c2 <xStreamBufferSendFromISR>
  portYIELD_FROM_ISR(yield);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d007      	beq.n	800b378 <CDC_Receive_FS+0x48>
 800b368:	4b08      	ldr	r3, [pc, #32]	; (800b38c <CDC_Receive_FS+0x5c>)
 800b36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800b378:	2300      	movs	r3, #0
	}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	20009094 	.word	0x20009094
 800b388:	20009374 	.word	0x20009374
 800b38c:	e000ed04 	.word	0xe000ed04

0800b390 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  //if (xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3a0:	4b10      	ldr	r3, [pc, #64]	; (800b3e4 <CDC_Transmit_FS+0x54>)
 800b3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3a6:	60bb      	str	r3, [r7, #8]
	  if (hcdc->TxState != 0){
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <CDC_Transmit_FS+0x26>
	//	xSemaphoreGive(mutex_usb);
		return USBD_BUSY;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e011      	b.n	800b3da <CDC_Transmit_FS+0x4a>
	  }
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3b6:	887b      	ldrh	r3, [r7, #2]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	4809      	ldr	r0, [pc, #36]	; (800b3e4 <CDC_Transmit_FS+0x54>)
 800b3be:	f7fa f9ff 	bl	80057c0 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3c2:	4808      	ldr	r0, [pc, #32]	; (800b3e4 <CDC_Transmit_FS+0x54>)
 800b3c4:	f7fa fa3c 	bl	8005840 <USBD_CDC_TransmitPacket>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800b3cc:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <CDC_Transmit_FS+0x58>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f04f 31ff 	mov.w	r1, #4294967295
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fc fc1f 	bl	8007c18 <xQueueSemaphoreTake>
  //}
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20009094 	.word	0x20009094
 800b3e8:	20009378 	.word	0x20009378

0800b3ec <CDC_Receiveq_FS>:

 BaseType_t CDC_Receiveq_FS(char* data, int size, TickType_t timeout){
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
	  return xMessageBufferReceive(rMessageBuffer, (void *)data, size ,portMAX_DELAY);
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <CDC_Receiveq_FS+0x28>)
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b402:	68f9      	ldr	r1, [r7, #12]
 800b404:	f7fd f88b 	bl	800851e <xStreamBufferReceive>
 800b408:	4603      	mov	r3, r0

  }
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20009374 	.word	0x20009374

0800b418 <queue_print>:
  void queue_print(char* data, int size){
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	  if(xSemaphoreTake(mutex_usb, portMAX_DELAY)==pdTRUE){
 800b422:	4b0e      	ldr	r3, [pc, #56]	; (800b45c <queue_print+0x44>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f04f 31ff 	mov.w	r1, #4294967295
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fc fbf4 	bl	8007c18 <xQueueSemaphoreTake>
 800b430:	4603      	mov	r3, r0
 800b432:	2b01      	cmp	r3, #1
 800b434:	d10e      	bne.n	800b454 <queue_print+0x3c>
		 xMessageBufferSend(xMessageBuffer, data, size, portMAX_DELAY);
 800b436:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <queue_print+0x48>)
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	f7fc ff09 	bl	8008258 <xStreamBufferSend>
		 xSemaphoreGive(mutex_usb);
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <queue_print+0x44>)
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	2300      	movs	r3, #0
 800b44c:	2200      	movs	r2, #0
 800b44e:	2100      	movs	r1, #0
 800b450:	f7fc f8dc 	bl	800760c <xQueueGenericSend>
	  }
  }
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000937c 	.word	0x2000937c
 800b460:	20009370 	.word	0x20009370

0800b464 <Print_Task>:

  void Print_Task(void *param){
 800b464:	b580      	push	{r7, lr}
 800b466:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800b470:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800b474:	6018      	str	r0, [r3, #0]

	  char buffer[768];
	  uint8_t qtd = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	  while(1){
		  qtd = xMessageBufferReceive(xMessageBuffer, (void*)buffer, sizeof(buffer),portMAX_DELAY);
 800b47c:	4b0b      	ldr	r3, [pc, #44]	; (800b4ac <Print_Task+0x48>)
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	f107 010c 	add.w	r1, r7, #12
 800b484:	f04f 33ff 	mov.w	r3, #4294967295
 800b488:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b48c:	f7fd f847 	bl	800851e <xStreamBufferReceive>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
		  (void) qtd;
		  CDC_Transmit_FS((uint8_t*) buffer,qtd);
 800b496:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	f107 030c 	add.w	r3, r7, #12
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff ff74 	bl	800b390 <CDC_Transmit_FS>
		  qtd = xMessageBufferReceive(xMessageBuffer, (void*)buffer, sizeof(buffer),portMAX_DELAY);
 800b4a8:	e7e8      	b.n	800b47c <Print_Task+0x18>
 800b4aa:	bf00      	nop
 800b4ac:	20009370 	.word	0x20009370

0800b4b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <CDC_TransmitCplt_FS+0x48>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f107 0210 	add.w	r2, r7, #16
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fc fa34 	bl	800793e <xQueueGiveFromISR>
  portYIELD_FROM_ISR(tmp);
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <CDC_TransmitCplt_FS+0x3c>
 800b4dc:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <CDC_TransmitCplt_FS+0x4c>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800b4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20009378 	.word	0x20009378
 800b4fc:	e000ed04 	.word	0xe000ed04

0800b500 <init_usb_rtos_obj>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
volatile uint32_t usb_is_on = 0;
void Print_Task(void *param);
void init_usb_rtos_obj(void){
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af02      	add	r7, sp, #8

	sem_usb_tx = xSemaphoreCreateBinary();
 800b506:	2203      	movs	r2, #3
 800b508:	2100      	movs	r1, #0
 800b50a:	2001      	movs	r0, #1
 800b50c:	f7fb ffee 	bl	80074ec <xQueueGenericCreate>
 800b510:	4603      	mov	r3, r0
 800b512:	4a15      	ldr	r2, [pc, #84]	; (800b568 <init_usb_rtos_obj+0x68>)
 800b514:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 800b516:	2001      	movs	r0, #1
 800b518:	f7fc f85f 	bl	80075da <xQueueCreateMutex>
 800b51c:	4603      	mov	r3, r0
 800b51e:	4a13      	ldr	r2, [pc, #76]	; (800b56c <init_usb_rtos_obj+0x6c>)
 800b520:	6013      	str	r3, [r2, #0]
	xMessageBuffer = xMessageBufferCreate(768);
 800b522:	2201      	movs	r2, #1
 800b524:	2100      	movs	r1, #0
 800b526:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b52a:	f7fc fe07 	bl	800813c <xStreamBufferGenericCreate>
 800b52e:	4603      	mov	r3, r0
 800b530:	4a0f      	ldr	r2, [pc, #60]	; (800b570 <init_usb_rtos_obj+0x70>)
 800b532:	6013      	str	r3, [r2, #0]
	rMessageBuffer = xMessageBufferCreate(768);
 800b534:	2201      	movs	r2, #1
 800b536:	2100      	movs	r1, #0
 800b538:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b53c:	f7fc fdfe 	bl	800813c <xStreamBufferGenericCreate>
 800b540:	4603      	mov	r3, r0
 800b542:	4a0c      	ldr	r2, [pc, #48]	; (800b574 <init_usb_rtos_obj+0x74>)
 800b544:	6013      	str	r3, [r2, #0]
	xTaskCreate(Print_Task, "print Task", 768, NULL, 1, NULL);
 800b546:	2300      	movs	r3, #0
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	2301      	movs	r3, #1
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	2300      	movs	r3, #0
 800b550:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b554:	4908      	ldr	r1, [pc, #32]	; (800b578 <init_usb_rtos_obj+0x78>)
 800b556:	4809      	ldr	r0, [pc, #36]	; (800b57c <init_usb_rtos_obj+0x7c>)
 800b558:	f7fd fa44 	bl	80089e4 <xTaskCreate>
	usb_is_on = 1;
 800b55c:	4b08      	ldr	r3, [pc, #32]	; (800b580 <init_usb_rtos_obj+0x80>)
 800b55e:	2201      	movs	r2, #1
 800b560:	601a      	str	r2, [r3, #0]
}
 800b562:	bf00      	nop
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20009378 	.word	0x20009378
 800b56c:	2000937c 	.word	0x2000937c
 800b570:	20009370 	.word	0x20009370
 800b574:	20009374 	.word	0x20009374
 800b578:	0800ca9c 	.word	0x0800ca9c
 800b57c:	0800b465 	.word	0x0800b465
 800b580:	2000a380 	.word	0x2000a380

0800b584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2212      	movs	r2, #18
 800b594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b596:	4b03      	ldr	r3, [pc, #12]	; (800b5a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	200000d8 	.word	0x200000d8

0800b5a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ba:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	200000ec 	.word	0x200000ec

0800b5cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d105      	bne.n	800b5ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	4907      	ldr	r1, [pc, #28]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5e2:	4808      	ldr	r0, [pc, #32]	; (800b604 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5e4:	f7fb fbba 	bl	8006d5c <USBD_GetString>
 800b5e8:	e004      	b.n	800b5f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4904      	ldr	r1, [pc, #16]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5ee:	4805      	ldr	r0, [pc, #20]	; (800b604 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f0:	f7fb fbb4 	bl	8006d5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	2000a384 	.word	0x2000a384
 800b604:	0800caa8 	.word	0x0800caa8

0800b608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	6039      	str	r1, [r7, #0]
 800b612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	4904      	ldr	r1, [pc, #16]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b618:	4804      	ldr	r0, [pc, #16]	; (800b62c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b61a:	f7fb fb9f 	bl	8006d5c <USBD_GetString>
  return USBD_StrDesc;
 800b61e:	4b02      	ldr	r3, [pc, #8]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	2000a384 	.word	0x2000a384
 800b62c:	0800cac0 	.word	0x0800cac0

0800b630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	221a      	movs	r2, #26
 800b640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b642:	f000 f843 	bl	800b6cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b646:	4b02      	ldr	r3, [pc, #8]	; (800b650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	200000f0 	.word	0x200000f0

0800b654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d105      	bne.n	800b672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4907      	ldr	r1, [pc, #28]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b66a:	4808      	ldr	r0, [pc, #32]	; (800b68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b66c:	f7fb fb76 	bl	8006d5c <USBD_GetString>
 800b670:	e004      	b.n	800b67c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4904      	ldr	r1, [pc, #16]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b676:	4805      	ldr	r0, [pc, #20]	; (800b68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b678:	f7fb fb70 	bl	8006d5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	2000a384 	.word	0x2000a384
 800b68c:	0800cad4 	.word	0x0800cad4

0800b690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4907      	ldr	r1, [pc, #28]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6a6:	4808      	ldr	r0, [pc, #32]	; (800b6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6a8:	f7fb fb58 	bl	8006d5c <USBD_GetString>
 800b6ac:	e004      	b.n	800b6b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4904      	ldr	r1, [pc, #16]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b2:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b4:	f7fb fb52 	bl	8006d5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	2000a384 	.word	0x2000a384
 800b6c8:	0800cae0 	.word	0x0800cae0

0800b6cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6d2:	4b0f      	ldr	r3, [pc, #60]	; (800b710 <Get_SerialNum+0x44>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <Get_SerialNum+0x48>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6de:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <Get_SerialNum+0x4c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d009      	beq.n	800b706 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	4909      	ldr	r1, [pc, #36]	; (800b71c <Get_SerialNum+0x50>)
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f000 f814 	bl	800b724 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	4908      	ldr	r1, [pc, #32]	; (800b720 <Get_SerialNum+0x54>)
 800b700:	68b8      	ldr	r0, [r7, #8]
 800b702:	f000 f80f 	bl	800b724 <IntToUnicode>
  }
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	1fff7a10 	.word	0x1fff7a10
 800b714:	1fff7a14 	.word	0x1fff7a14
 800b718:	1fff7a18 	.word	0x1fff7a18
 800b71c:	200000f2 	.word	0x200000f2
 800b720:	20000102 	.word	0x20000102

0800b724 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
 800b73a:	e027      	b.n	800b78c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	0f1b      	lsrs	r3, r3, #28
 800b740:	2b09      	cmp	r3, #9
 800b742:	d80b      	bhi.n	800b75c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	0f1b      	lsrs	r3, r3, #28
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4619      	mov	r1, r3
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	440b      	add	r3, r1
 800b754:	3230      	adds	r2, #48	; 0x30
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	e00a      	b.n	800b772 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	0f1b      	lsrs	r3, r3, #28
 800b760:	b2da      	uxtb	r2, r3
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4619      	mov	r1, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	440b      	add	r3, r1
 800b76c:	3237      	adds	r2, #55	; 0x37
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	3301      	adds	r3, #1
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	3301      	adds	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
 800b78c:	7dfa      	ldrb	r2, [r7, #23]
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	429a      	cmp	r2, r3
 800b792:	d3d3      	bcc.n	800b73c <IntToUnicode+0x18>
  }
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08a      	sub	sp, #40	; 0x28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	605a      	str	r2, [r3, #4]
 800b7b6:	609a      	str	r2, [r3, #8]
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7c4:	d147      	bne.n	800b856 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	4b25      	ldr	r3, [pc, #148]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ce:	4a24      	ldr	r2, [pc, #144]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b7d0:	f043 0301 	orr.w	r3, r3, #1
 800b7d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7d6:	4b22      	ldr	r3, [pc, #136]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800b7e2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b7e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7f4:	230a      	movs	r3, #10
 800b7f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4819      	ldr	r0, [pc, #100]	; (800b864 <HAL_PCD_MspInit+0xc0>)
 800b800:	f7f5 fbf8 	bl	8000ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b804:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b80e:	2300      	movs	r3, #0
 800b810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b812:	f107 0314 	add.w	r3, r7, #20
 800b816:	4619      	mov	r1, r3
 800b818:	4812      	ldr	r0, [pc, #72]	; (800b864 <HAL_PCD_MspInit+0xc0>)
 800b81a:	f7f5 fbeb 	bl	8000ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b81e:	4b10      	ldr	r3, [pc, #64]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b822:	4a0f      	ldr	r2, [pc, #60]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b828:	6353      	str	r3, [r2, #52]	; 0x34
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b832:	4a0b      	ldr	r2, [pc, #44]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b838:	6453      	str	r3, [r2, #68]	; 0x44
 800b83a:	4b09      	ldr	r3, [pc, #36]	; (800b860 <HAL_PCD_MspInit+0xbc>)
 800b83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b842:	60fb      	str	r3, [r7, #12]
 800b844:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b846:	2200      	movs	r2, #0
 800b848:	2105      	movs	r1, #5
 800b84a:	2043      	movs	r0, #67	; 0x43
 800b84c:	f7f5 fba8 	bl	8000fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b850:	2043      	movs	r0, #67	; 0x43
 800b852:	f7f5 fbc1 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b856:	bf00      	nop
 800b858:	3728      	adds	r7, #40	; 0x28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	40023800 	.word	0x40023800
 800b864:	40020000 	.word	0x40020000

0800b868 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fa f90d 	bl	8005a9e <USBD_LL_SetupStage>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	00db      	lsls	r3, r3, #3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	78fb      	ldrb	r3, [r7, #3]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	f7fa f947 	bl	8005b48 <USBD_LL_DataOutStage>
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b082      	sub	sp, #8
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8d4:	78fa      	ldrb	r2, [r7, #3]
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	4413      	add	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	440b      	add	r3, r1
 800b8e2:	334c      	adds	r3, #76	; 0x4c
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	78fb      	ldrb	r3, [r7, #3]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	f7fa f9e0 	bl	8005cae <USBD_LL_DataInStage>
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b904:	4618      	mov	r0, r3
 800b906:	f7fa fb14 	bl	8005f32 <USBD_LL_SOF>
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b91a:	2301      	movs	r3, #1
 800b91c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d102      	bne.n	800b92c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]
 800b92a:	e008      	b.n	800b93e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	2b02      	cmp	r3, #2
 800b932:	d102      	bne.n	800b93a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b934:	2301      	movs	r3, #1
 800b936:	73fb      	strb	r3, [r7, #15]
 800b938:	e001      	b.n	800b93e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b93a:	f7f5 f8d1 	bl	8000ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b944:	7bfa      	ldrb	r2, [r7, #15]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fa fab4 	bl	8005eb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b954:	4618      	mov	r0, r3
 800b956:	f7fa fa5c 	bl	8005e12 <USBD_LL_Reset>
}
 800b95a:	bf00      	nop
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
	...

0800b964 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b972:	4618      	mov	r0, r3
 800b974:	f7fa faaf 	bl	8005ed6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	6812      	ldr	r2, [r2, #0]
 800b986:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b98a:	f043 0301 	orr.w	r3, r3, #1
 800b98e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d005      	beq.n	800b9a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <HAL_PCD_SuspendCallback+0x48>)
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	4a03      	ldr	r2, [pc, #12]	; (800b9ac <HAL_PCD_SuspendCallback+0x48>)
 800b99e:	f043 0306 	orr.w	r3, r3, #6
 800b9a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	e000ed00 	.word	0xe000ed00

0800b9b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fa fa9f 	bl	8005f02 <USBD_LL_Resume>
}
 800b9c4:	bf00      	nop
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9de:	78fa      	ldrb	r2, [r7, #3]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fa faf7 	bl	8005fd6 <USBD_LL_IsoOUTIncomplete>
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba02:	78fa      	ldrb	r2, [r7, #3]
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fa fab3 	bl	8005f72 <USBD_LL_IsoINIncomplete>
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fa fb09 	bl	800603a <USBD_LL_DevConnected>
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fa fb06 	bl	8006050 <USBD_LL_DevDisconnected>
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d13c      	bne.n	800bad6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba5c:	4a20      	ldr	r2, [pc, #128]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a1e      	ldr	r2, [pc, #120]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba74:	4b1a      	ldr	r3, [pc, #104]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba76:	2204      	movs	r2, #4
 800ba78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba7a:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba80:	4b17      	ldr	r3, [pc, #92]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba86:	4b16      	ldr	r3, [pc, #88]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba88:	2202      	movs	r2, #2
 800ba8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ba8c:	4b14      	ldr	r3, [pc, #80]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba92:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <USBD_LL_Init+0x94>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ba9e:	4b10      	ldr	r3, [pc, #64]	; (800bae0 <USBD_LL_Init+0x94>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800baa4:	4b0e      	ldr	r3, [pc, #56]	; (800bae0 <USBD_LL_Init+0x94>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800baaa:	480d      	ldr	r0, [pc, #52]	; (800bae0 <USBD_LL_Init+0x94>)
 800baac:	f7f5 fc3e 	bl	800132c <HAL_PCD_Init>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bab6:	f7f5 f813 	bl	8000ae0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800baba:	2180      	movs	r1, #128	; 0x80
 800babc:	4808      	ldr	r0, [pc, #32]	; (800bae0 <USBD_LL_Init+0x94>)
 800babe:	f7f6 fe96 	bl	80027ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bac2:	2240      	movs	r2, #64	; 0x40
 800bac4:	2100      	movs	r1, #0
 800bac6:	4806      	ldr	r0, [pc, #24]	; (800bae0 <USBD_LL_Init+0x94>)
 800bac8:	f7f6 fe4a 	bl	8002760 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bacc:	2280      	movs	r2, #128	; 0x80
 800bace:	2101      	movs	r1, #1
 800bad0:	4803      	ldr	r0, [pc, #12]	; (800bae0 <USBD_LL_Init+0x94>)
 800bad2:	f7f6 fe45 	bl	8002760 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	2000a584 	.word	0x2000a584

0800bae4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f5 fd33 	bl	8001566 <HAL_PCD_Start>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f942 	bl	800bd90 <USBD_Get_USB_Status>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	4608      	mov	r0, r1
 800bb24:	4611      	mov	r1, r2
 800bb26:	461a      	mov	r2, r3
 800bb28:	4603      	mov	r3, r0
 800bb2a:	70fb      	strb	r3, [r7, #3]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	70bb      	strb	r3, [r7, #2]
 800bb30:	4613      	mov	r3, r2
 800bb32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb42:	78bb      	ldrb	r3, [r7, #2]
 800bb44:	883a      	ldrh	r2, [r7, #0]
 800bb46:	78f9      	ldrb	r1, [r7, #3]
 800bb48:	f7f6 fa04 	bl	8001f54 <HAL_PCD_EP_Open>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 f91c 	bl	800bd90 <USBD_Get_USB_Status>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb80:	78fa      	ldrb	r2, [r7, #3]
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7f6 fa4d 	bl	8002024 <HAL_PCD_EP_Close>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 f8fd 	bl	800bd90 <USBD_Get_USB_Status>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbbe:	78fa      	ldrb	r2, [r7, #3]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f6 fb25 	bl	8002212 <HAL_PCD_EP_SetStall>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f8de 	bl	800bd90 <USBD_Get_USB_Status>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f6 fb6a 	bl	80022da <HAL_PCD_EP_ClrStall>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f8bf 	bl	800bd90 <USBD_Get_USB_Status>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	da0b      	bge.n	800bc54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc3c:	78fb      	ldrb	r3, [r7, #3]
 800bc3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc42:	68f9      	ldr	r1, [r7, #12]
 800bc44:	4613      	mov	r3, r2
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	333e      	adds	r3, #62	; 0x3e
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	e00b      	b.n	800bc6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc5a:	68f9      	ldr	r1, [r7, #12]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4413      	add	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	440b      	add	r3, r1
 800bc66:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc92:	78fa      	ldrb	r2, [r7, #3]
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f6 f937 	bl	8001f0a <HAL_PCD_SetAddress>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 f874 	bl	800bd90 <USBD_Get_USB_Status>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b086      	sub	sp, #24
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	60f8      	str	r0, [r7, #12]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcd4:	7af9      	ldrb	r1, [r7, #11]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	f7f6 fa50 	bl	800217e <HAL_PCD_EP_Transmit>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 f853 	bl	800bd90 <USBD_Get_USB_Status>
 800bcea:	4603      	mov	r3, r0
 800bcec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcee:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	607a      	str	r2, [r7, #4]
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	460b      	mov	r3, r1
 800bd06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd16:	7af9      	ldrb	r1, [r7, #11]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	f7f6 f9cc 	bl	80020b8 <HAL_PCD_EP_Receive>
 800bd20:	4603      	mov	r3, r0
 800bd22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 f832 	bl	800bd90 <USBD_Get_USB_Status>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd30:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd4c:	78fa      	ldrb	r2, [r7, #3]
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7f6 f9fc 	bl	800214e <HAL_PCD_EP_GetRxCount>
 800bd56:	4603      	mov	r3, r0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <USBD_static_malloc+0x18>)
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	2000aa90 	.word	0x2000aa90

0800bd7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]

}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d817      	bhi.n	800bdd4 <USBD_Get_USB_Status+0x44>
 800bda4:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <USBD_Get_USB_Status+0x1c>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800bdc3 	.word	0x0800bdc3
 800bdb4:	0800bdc9 	.word	0x0800bdc9
 800bdb8:	0800bdcf 	.word	0x0800bdcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc0:	e00b      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc6:	e008      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	73fb      	strb	r3, [r7, #15]
    break;
 800bdcc:	e005      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd2:	e002      	b.n	800bdda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd8:	bf00      	nop
  }
  return usb_status;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <__errno>:
 800bde8:	4b01      	ldr	r3, [pc, #4]	; (800bdf0 <__errno+0x8>)
 800bdea:	6818      	ldr	r0, [r3, #0]
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	2000010c 	.word	0x2000010c

0800bdf4 <__libc_init_array>:
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	4d0d      	ldr	r5, [pc, #52]	; (800be2c <__libc_init_array+0x38>)
 800bdf8:	4c0d      	ldr	r4, [pc, #52]	; (800be30 <__libc_init_array+0x3c>)
 800bdfa:	1b64      	subs	r4, r4, r5
 800bdfc:	10a4      	asrs	r4, r4, #2
 800bdfe:	2600      	movs	r6, #0
 800be00:	42a6      	cmp	r6, r4
 800be02:	d109      	bne.n	800be18 <__libc_init_array+0x24>
 800be04:	4d0b      	ldr	r5, [pc, #44]	; (800be34 <__libc_init_array+0x40>)
 800be06:	4c0c      	ldr	r4, [pc, #48]	; (800be38 <__libc_init_array+0x44>)
 800be08:	f000 fd28 	bl	800c85c <_init>
 800be0c:	1b64      	subs	r4, r4, r5
 800be0e:	10a4      	asrs	r4, r4, #2
 800be10:	2600      	movs	r6, #0
 800be12:	42a6      	cmp	r6, r4
 800be14:	d105      	bne.n	800be22 <__libc_init_array+0x2e>
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	f855 3b04 	ldr.w	r3, [r5], #4
 800be1c:	4798      	blx	r3
 800be1e:	3601      	adds	r6, #1
 800be20:	e7ee      	b.n	800be00 <__libc_init_array+0xc>
 800be22:	f855 3b04 	ldr.w	r3, [r5], #4
 800be26:	4798      	blx	r3
 800be28:	3601      	adds	r6, #1
 800be2a:	e7f2      	b.n	800be12 <__libc_init_array+0x1e>
 800be2c:	0800cbfc 	.word	0x0800cbfc
 800be30:	0800cbfc 	.word	0x0800cbfc
 800be34:	0800cbfc 	.word	0x0800cbfc
 800be38:	0800cc00 	.word	0x0800cc00

0800be3c <__retarget_lock_acquire_recursive>:
 800be3c:	4770      	bx	lr

0800be3e <__retarget_lock_release_recursive>:
 800be3e:	4770      	bx	lr

0800be40 <memcpy>:
 800be40:	440a      	add	r2, r1
 800be42:	4291      	cmp	r1, r2
 800be44:	f100 33ff 	add.w	r3, r0, #4294967295
 800be48:	d100      	bne.n	800be4c <memcpy+0xc>
 800be4a:	4770      	bx	lr
 800be4c:	b510      	push	{r4, lr}
 800be4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be56:	4291      	cmp	r1, r2
 800be58:	d1f9      	bne.n	800be4e <memcpy+0xe>
 800be5a:	bd10      	pop	{r4, pc}

0800be5c <memset>:
 800be5c:	4402      	add	r2, r0
 800be5e:	4603      	mov	r3, r0
 800be60:	4293      	cmp	r3, r2
 800be62:	d100      	bne.n	800be66 <memset+0xa>
 800be64:	4770      	bx	lr
 800be66:	f803 1b01 	strb.w	r1, [r3], #1
 800be6a:	e7f9      	b.n	800be60 <memset+0x4>

0800be6c <sbrk_aligned>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	4e0e      	ldr	r6, [pc, #56]	; (800bea8 <sbrk_aligned+0x3c>)
 800be70:	460c      	mov	r4, r1
 800be72:	6831      	ldr	r1, [r6, #0]
 800be74:	4605      	mov	r5, r0
 800be76:	b911      	cbnz	r1, 800be7e <sbrk_aligned+0x12>
 800be78:	f000 f8f6 	bl	800c068 <_sbrk_r>
 800be7c:	6030      	str	r0, [r6, #0]
 800be7e:	4621      	mov	r1, r4
 800be80:	4628      	mov	r0, r5
 800be82:	f000 f8f1 	bl	800c068 <_sbrk_r>
 800be86:	1c43      	adds	r3, r0, #1
 800be88:	d00a      	beq.n	800bea0 <sbrk_aligned+0x34>
 800be8a:	1cc4      	adds	r4, r0, #3
 800be8c:	f024 0403 	bic.w	r4, r4, #3
 800be90:	42a0      	cmp	r0, r4
 800be92:	d007      	beq.n	800bea4 <sbrk_aligned+0x38>
 800be94:	1a21      	subs	r1, r4, r0
 800be96:	4628      	mov	r0, r5
 800be98:	f000 f8e6 	bl	800c068 <_sbrk_r>
 800be9c:	3001      	adds	r0, #1
 800be9e:	d101      	bne.n	800bea4 <sbrk_aligned+0x38>
 800bea0:	f04f 34ff 	mov.w	r4, #4294967295
 800bea4:	4620      	mov	r0, r4
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
 800bea8:	2000acb8 	.word	0x2000acb8

0800beac <_malloc_r>:
 800beac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb0:	1ccd      	adds	r5, r1, #3
 800beb2:	f025 0503 	bic.w	r5, r5, #3
 800beb6:	3508      	adds	r5, #8
 800beb8:	2d0c      	cmp	r5, #12
 800beba:	bf38      	it	cc
 800bebc:	250c      	movcc	r5, #12
 800bebe:	2d00      	cmp	r5, #0
 800bec0:	4607      	mov	r7, r0
 800bec2:	db01      	blt.n	800bec8 <_malloc_r+0x1c>
 800bec4:	42a9      	cmp	r1, r5
 800bec6:	d905      	bls.n	800bed4 <_malloc_r+0x28>
 800bec8:	230c      	movs	r3, #12
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	2600      	movs	r6, #0
 800bece:	4630      	mov	r0, r6
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed4:	4e2e      	ldr	r6, [pc, #184]	; (800bf90 <_malloc_r+0xe4>)
 800bed6:	f000 f927 	bl	800c128 <__malloc_lock>
 800beda:	6833      	ldr	r3, [r6, #0]
 800bedc:	461c      	mov	r4, r3
 800bede:	bb34      	cbnz	r4, 800bf2e <_malloc_r+0x82>
 800bee0:	4629      	mov	r1, r5
 800bee2:	4638      	mov	r0, r7
 800bee4:	f7ff ffc2 	bl	800be6c <sbrk_aligned>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	4604      	mov	r4, r0
 800beec:	d14d      	bne.n	800bf8a <_malloc_r+0xde>
 800beee:	6834      	ldr	r4, [r6, #0]
 800bef0:	4626      	mov	r6, r4
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	d140      	bne.n	800bf78 <_malloc_r+0xcc>
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	4631      	mov	r1, r6
 800befa:	4638      	mov	r0, r7
 800befc:	eb04 0803 	add.w	r8, r4, r3
 800bf00:	f000 f8b2 	bl	800c068 <_sbrk_r>
 800bf04:	4580      	cmp	r8, r0
 800bf06:	d13a      	bne.n	800bf7e <_malloc_r+0xd2>
 800bf08:	6821      	ldr	r1, [r4, #0]
 800bf0a:	3503      	adds	r5, #3
 800bf0c:	1a6d      	subs	r5, r5, r1
 800bf0e:	f025 0503 	bic.w	r5, r5, #3
 800bf12:	3508      	adds	r5, #8
 800bf14:	2d0c      	cmp	r5, #12
 800bf16:	bf38      	it	cc
 800bf18:	250c      	movcc	r5, #12
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f7ff ffa5 	bl	800be6c <sbrk_aligned>
 800bf22:	3001      	adds	r0, #1
 800bf24:	d02b      	beq.n	800bf7e <_malloc_r+0xd2>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	442b      	add	r3, r5
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	e00e      	b.n	800bf4c <_malloc_r+0xa0>
 800bf2e:	6822      	ldr	r2, [r4, #0]
 800bf30:	1b52      	subs	r2, r2, r5
 800bf32:	d41e      	bmi.n	800bf72 <_malloc_r+0xc6>
 800bf34:	2a0b      	cmp	r2, #11
 800bf36:	d916      	bls.n	800bf66 <_malloc_r+0xba>
 800bf38:	1961      	adds	r1, r4, r5
 800bf3a:	42a3      	cmp	r3, r4
 800bf3c:	6025      	str	r5, [r4, #0]
 800bf3e:	bf18      	it	ne
 800bf40:	6059      	strne	r1, [r3, #4]
 800bf42:	6863      	ldr	r3, [r4, #4]
 800bf44:	bf08      	it	eq
 800bf46:	6031      	streq	r1, [r6, #0]
 800bf48:	5162      	str	r2, [r4, r5]
 800bf4a:	604b      	str	r3, [r1, #4]
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	f104 060b 	add.w	r6, r4, #11
 800bf52:	f000 f8ef 	bl	800c134 <__malloc_unlock>
 800bf56:	f026 0607 	bic.w	r6, r6, #7
 800bf5a:	1d23      	adds	r3, r4, #4
 800bf5c:	1af2      	subs	r2, r6, r3
 800bf5e:	d0b6      	beq.n	800bece <_malloc_r+0x22>
 800bf60:	1b9b      	subs	r3, r3, r6
 800bf62:	50a3      	str	r3, [r4, r2]
 800bf64:	e7b3      	b.n	800bece <_malloc_r+0x22>
 800bf66:	6862      	ldr	r2, [r4, #4]
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	bf0c      	ite	eq
 800bf6c:	6032      	streq	r2, [r6, #0]
 800bf6e:	605a      	strne	r2, [r3, #4]
 800bf70:	e7ec      	b.n	800bf4c <_malloc_r+0xa0>
 800bf72:	4623      	mov	r3, r4
 800bf74:	6864      	ldr	r4, [r4, #4]
 800bf76:	e7b2      	b.n	800bede <_malloc_r+0x32>
 800bf78:	4634      	mov	r4, r6
 800bf7a:	6876      	ldr	r6, [r6, #4]
 800bf7c:	e7b9      	b.n	800bef2 <_malloc_r+0x46>
 800bf7e:	230c      	movs	r3, #12
 800bf80:	603b      	str	r3, [r7, #0]
 800bf82:	4638      	mov	r0, r7
 800bf84:	f000 f8d6 	bl	800c134 <__malloc_unlock>
 800bf88:	e7a1      	b.n	800bece <_malloc_r+0x22>
 800bf8a:	6025      	str	r5, [r4, #0]
 800bf8c:	e7de      	b.n	800bf4c <_malloc_r+0xa0>
 800bf8e:	bf00      	nop
 800bf90:	2000acb4 	.word	0x2000acb4

0800bf94 <cleanup_glue>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	460c      	mov	r4, r1
 800bf98:	6809      	ldr	r1, [r1, #0]
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	b109      	cbz	r1, 800bfa2 <cleanup_glue+0xe>
 800bf9e:	f7ff fff9 	bl	800bf94 <cleanup_glue>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfaa:	f000 b8c9 	b.w	800c140 <_free_r>
	...

0800bfb0 <_reclaim_reent>:
 800bfb0:	4b2c      	ldr	r3, [pc, #176]	; (800c064 <_reclaim_reent+0xb4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4283      	cmp	r3, r0
 800bfb6:	b570      	push	{r4, r5, r6, lr}
 800bfb8:	4604      	mov	r4, r0
 800bfba:	d051      	beq.n	800c060 <_reclaim_reent+0xb0>
 800bfbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfbe:	b143      	cbz	r3, 800bfd2 <_reclaim_reent+0x22>
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d14a      	bne.n	800c05c <_reclaim_reent+0xac>
 800bfc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	b111      	cbz	r1, 800bfd2 <_reclaim_reent+0x22>
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 f8b7 	bl	800c140 <_free_r>
 800bfd2:	6961      	ldr	r1, [r4, #20]
 800bfd4:	b111      	cbz	r1, 800bfdc <_reclaim_reent+0x2c>
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 f8b2 	bl	800c140 <_free_r>
 800bfdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfde:	b111      	cbz	r1, 800bfe6 <_reclaim_reent+0x36>
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f000 f8ad 	bl	800c140 <_free_r>
 800bfe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bfe8:	b111      	cbz	r1, 800bff0 <_reclaim_reent+0x40>
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 f8a8 	bl	800c140 <_free_r>
 800bff0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bff2:	b111      	cbz	r1, 800bffa <_reclaim_reent+0x4a>
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 f8a3 	bl	800c140 <_free_r>
 800bffa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bffc:	b111      	cbz	r1, 800c004 <_reclaim_reent+0x54>
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 f89e 	bl	800c140 <_free_r>
 800c004:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c006:	b111      	cbz	r1, 800c00e <_reclaim_reent+0x5e>
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 f899 	bl	800c140 <_free_r>
 800c00e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c010:	b111      	cbz	r1, 800c018 <_reclaim_reent+0x68>
 800c012:	4620      	mov	r0, r4
 800c014:	f000 f894 	bl	800c140 <_free_r>
 800c018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c01a:	b111      	cbz	r1, 800c022 <_reclaim_reent+0x72>
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 f88f 	bl	800c140 <_free_r>
 800c022:	69a3      	ldr	r3, [r4, #24]
 800c024:	b1e3      	cbz	r3, 800c060 <_reclaim_reent+0xb0>
 800c026:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c028:	4620      	mov	r0, r4
 800c02a:	4798      	blx	r3
 800c02c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c02e:	b1b9      	cbz	r1, 800c060 <_reclaim_reent+0xb0>
 800c030:	4620      	mov	r0, r4
 800c032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c036:	f7ff bfad 	b.w	800bf94 <cleanup_glue>
 800c03a:	5949      	ldr	r1, [r1, r5]
 800c03c:	b941      	cbnz	r1, 800c050 <_reclaim_reent+0xa0>
 800c03e:	3504      	adds	r5, #4
 800c040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c042:	2d80      	cmp	r5, #128	; 0x80
 800c044:	68d9      	ldr	r1, [r3, #12]
 800c046:	d1f8      	bne.n	800c03a <_reclaim_reent+0x8a>
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 f879 	bl	800c140 <_free_r>
 800c04e:	e7ba      	b.n	800bfc6 <_reclaim_reent+0x16>
 800c050:	680e      	ldr	r6, [r1, #0]
 800c052:	4620      	mov	r0, r4
 800c054:	f000 f874 	bl	800c140 <_free_r>
 800c058:	4631      	mov	r1, r6
 800c05a:	e7ef      	b.n	800c03c <_reclaim_reent+0x8c>
 800c05c:	2500      	movs	r5, #0
 800c05e:	e7ef      	b.n	800c040 <_reclaim_reent+0x90>
 800c060:	bd70      	pop	{r4, r5, r6, pc}
 800c062:	bf00      	nop
 800c064:	2000010c 	.word	0x2000010c

0800c068 <_sbrk_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d06      	ldr	r5, [pc, #24]	; (800c084 <_sbrk_r+0x1c>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	602b      	str	r3, [r5, #0]
 800c074:	f7f4 fe04 	bl	8000c80 <_sbrk>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_sbrk_r+0x1a>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_sbrk_r+0x1a>
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	2000acbc 	.word	0x2000acbc

0800c088 <siprintf>:
 800c088:	b40e      	push	{r1, r2, r3}
 800c08a:	b500      	push	{lr}
 800c08c:	b09c      	sub	sp, #112	; 0x70
 800c08e:	ab1d      	add	r3, sp, #116	; 0x74
 800c090:	9002      	str	r0, [sp, #8]
 800c092:	9006      	str	r0, [sp, #24]
 800c094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c098:	4809      	ldr	r0, [pc, #36]	; (800c0c0 <siprintf+0x38>)
 800c09a:	9107      	str	r1, [sp, #28]
 800c09c:	9104      	str	r1, [sp, #16]
 800c09e:	4909      	ldr	r1, [pc, #36]	; (800c0c4 <siprintf+0x3c>)
 800c0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a4:	9105      	str	r1, [sp, #20]
 800c0a6:	6800      	ldr	r0, [r0, #0]
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	a902      	add	r1, sp, #8
 800c0ac:	f000 f8f0 	bl	800c290 <_svfiprintf_r>
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
 800c0b6:	b01c      	add	sp, #112	; 0x70
 800c0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0bc:	b003      	add	sp, #12
 800c0be:	4770      	bx	lr
 800c0c0:	2000010c 	.word	0x2000010c
 800c0c4:	ffff0208 	.word	0xffff0208

0800c0c8 <strcpy>:
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0ce:	f803 2b01 	strb.w	r2, [r3], #1
 800c0d2:	2a00      	cmp	r2, #0
 800c0d4:	d1f9      	bne.n	800c0ca <strcpy+0x2>
 800c0d6:	4770      	bx	lr

0800c0d8 <strncmp>:
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	b17a      	cbz	r2, 800c0fc <strncmp+0x24>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	3901      	subs	r1, #1
 800c0e0:	1884      	adds	r4, r0, r2
 800c0e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0ea:	4290      	cmp	r0, r2
 800c0ec:	d101      	bne.n	800c0f2 <strncmp+0x1a>
 800c0ee:	42a3      	cmp	r3, r4
 800c0f0:	d101      	bne.n	800c0f6 <strncmp+0x1e>
 800c0f2:	1a80      	subs	r0, r0, r2
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d1f3      	bne.n	800c0e2 <strncmp+0xa>
 800c0fa:	e7fa      	b.n	800c0f2 <strncmp+0x1a>
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	e7f9      	b.n	800c0f4 <strncmp+0x1c>

0800c100 <strncpy>:
 800c100:	b510      	push	{r4, lr}
 800c102:	3901      	subs	r1, #1
 800c104:	4603      	mov	r3, r0
 800c106:	b132      	cbz	r2, 800c116 <strncpy+0x16>
 800c108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c10c:	f803 4b01 	strb.w	r4, [r3], #1
 800c110:	3a01      	subs	r2, #1
 800c112:	2c00      	cmp	r4, #0
 800c114:	d1f7      	bne.n	800c106 <strncpy+0x6>
 800c116:	441a      	add	r2, r3
 800c118:	2100      	movs	r1, #0
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d100      	bne.n	800c120 <strncpy+0x20>
 800c11e:	bd10      	pop	{r4, pc}
 800c120:	f803 1b01 	strb.w	r1, [r3], #1
 800c124:	e7f9      	b.n	800c11a <strncpy+0x1a>
	...

0800c128 <__malloc_lock>:
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__malloc_lock+0x8>)
 800c12a:	f7ff be87 	b.w	800be3c <__retarget_lock_acquire_recursive>
 800c12e:	bf00      	nop
 800c130:	2000acb0 	.word	0x2000acb0

0800c134 <__malloc_unlock>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__malloc_unlock+0x8>)
 800c136:	f7ff be82 	b.w	800be3e <__retarget_lock_release_recursive>
 800c13a:	bf00      	nop
 800c13c:	2000acb0 	.word	0x2000acb0

0800c140 <_free_r>:
 800c140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c142:	2900      	cmp	r1, #0
 800c144:	d044      	beq.n	800c1d0 <_free_r+0x90>
 800c146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c14a:	9001      	str	r0, [sp, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f1a1 0404 	sub.w	r4, r1, #4
 800c152:	bfb8      	it	lt
 800c154:	18e4      	addlt	r4, r4, r3
 800c156:	f7ff ffe7 	bl	800c128 <__malloc_lock>
 800c15a:	4a1e      	ldr	r2, [pc, #120]	; (800c1d4 <_free_r+0x94>)
 800c15c:	9801      	ldr	r0, [sp, #4]
 800c15e:	6813      	ldr	r3, [r2, #0]
 800c160:	b933      	cbnz	r3, 800c170 <_free_r+0x30>
 800c162:	6063      	str	r3, [r4, #4]
 800c164:	6014      	str	r4, [r2, #0]
 800c166:	b003      	add	sp, #12
 800c168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c16c:	f7ff bfe2 	b.w	800c134 <__malloc_unlock>
 800c170:	42a3      	cmp	r3, r4
 800c172:	d908      	bls.n	800c186 <_free_r+0x46>
 800c174:	6825      	ldr	r5, [r4, #0]
 800c176:	1961      	adds	r1, r4, r5
 800c178:	428b      	cmp	r3, r1
 800c17a:	bf01      	itttt	eq
 800c17c:	6819      	ldreq	r1, [r3, #0]
 800c17e:	685b      	ldreq	r3, [r3, #4]
 800c180:	1949      	addeq	r1, r1, r5
 800c182:	6021      	streq	r1, [r4, #0]
 800c184:	e7ed      	b.n	800c162 <_free_r+0x22>
 800c186:	461a      	mov	r2, r3
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	b10b      	cbz	r3, 800c190 <_free_r+0x50>
 800c18c:	42a3      	cmp	r3, r4
 800c18e:	d9fa      	bls.n	800c186 <_free_r+0x46>
 800c190:	6811      	ldr	r1, [r2, #0]
 800c192:	1855      	adds	r5, r2, r1
 800c194:	42a5      	cmp	r5, r4
 800c196:	d10b      	bne.n	800c1b0 <_free_r+0x70>
 800c198:	6824      	ldr	r4, [r4, #0]
 800c19a:	4421      	add	r1, r4
 800c19c:	1854      	adds	r4, r2, r1
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	6011      	str	r1, [r2, #0]
 800c1a2:	d1e0      	bne.n	800c166 <_free_r+0x26>
 800c1a4:	681c      	ldr	r4, [r3, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	6053      	str	r3, [r2, #4]
 800c1aa:	4421      	add	r1, r4
 800c1ac:	6011      	str	r1, [r2, #0]
 800c1ae:	e7da      	b.n	800c166 <_free_r+0x26>
 800c1b0:	d902      	bls.n	800c1b8 <_free_r+0x78>
 800c1b2:	230c      	movs	r3, #12
 800c1b4:	6003      	str	r3, [r0, #0]
 800c1b6:	e7d6      	b.n	800c166 <_free_r+0x26>
 800c1b8:	6825      	ldr	r5, [r4, #0]
 800c1ba:	1961      	adds	r1, r4, r5
 800c1bc:	428b      	cmp	r3, r1
 800c1be:	bf04      	itt	eq
 800c1c0:	6819      	ldreq	r1, [r3, #0]
 800c1c2:	685b      	ldreq	r3, [r3, #4]
 800c1c4:	6063      	str	r3, [r4, #4]
 800c1c6:	bf04      	itt	eq
 800c1c8:	1949      	addeq	r1, r1, r5
 800c1ca:	6021      	streq	r1, [r4, #0]
 800c1cc:	6054      	str	r4, [r2, #4]
 800c1ce:	e7ca      	b.n	800c166 <_free_r+0x26>
 800c1d0:	b003      	add	sp, #12
 800c1d2:	bd30      	pop	{r4, r5, pc}
 800c1d4:	2000acb4 	.word	0x2000acb4

0800c1d8 <__ssputs_r>:
 800c1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1dc:	688e      	ldr	r6, [r1, #8]
 800c1de:	429e      	cmp	r6, r3
 800c1e0:	4682      	mov	sl, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	4690      	mov	r8, r2
 800c1e6:	461f      	mov	r7, r3
 800c1e8:	d838      	bhi.n	800c25c <__ssputs_r+0x84>
 800c1ea:	898a      	ldrh	r2, [r1, #12]
 800c1ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1f0:	d032      	beq.n	800c258 <__ssputs_r+0x80>
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	6909      	ldr	r1, [r1, #16]
 800c1f6:	eba5 0901 	sub.w	r9, r5, r1
 800c1fa:	6965      	ldr	r5, [r4, #20]
 800c1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c204:	3301      	adds	r3, #1
 800c206:	444b      	add	r3, r9
 800c208:	106d      	asrs	r5, r5, #1
 800c20a:	429d      	cmp	r5, r3
 800c20c:	bf38      	it	cc
 800c20e:	461d      	movcc	r5, r3
 800c210:	0553      	lsls	r3, r2, #21
 800c212:	d531      	bpl.n	800c278 <__ssputs_r+0xa0>
 800c214:	4629      	mov	r1, r5
 800c216:	f7ff fe49 	bl	800beac <_malloc_r>
 800c21a:	4606      	mov	r6, r0
 800c21c:	b950      	cbnz	r0, 800c234 <__ssputs_r+0x5c>
 800c21e:	230c      	movs	r3, #12
 800c220:	f8ca 3000 	str.w	r3, [sl]
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c234:	6921      	ldr	r1, [r4, #16]
 800c236:	464a      	mov	r2, r9
 800c238:	f7ff fe02 	bl	800be40 <memcpy>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	6126      	str	r6, [r4, #16]
 800c24a:	6165      	str	r5, [r4, #20]
 800c24c:	444e      	add	r6, r9
 800c24e:	eba5 0509 	sub.w	r5, r5, r9
 800c252:	6026      	str	r6, [r4, #0]
 800c254:	60a5      	str	r5, [r4, #8]
 800c256:	463e      	mov	r6, r7
 800c258:	42be      	cmp	r6, r7
 800c25a:	d900      	bls.n	800c25e <__ssputs_r+0x86>
 800c25c:	463e      	mov	r6, r7
 800c25e:	6820      	ldr	r0, [r4, #0]
 800c260:	4632      	mov	r2, r6
 800c262:	4641      	mov	r1, r8
 800c264:	f000 faa8 	bl	800c7b8 <memmove>
 800c268:	68a3      	ldr	r3, [r4, #8]
 800c26a:	1b9b      	subs	r3, r3, r6
 800c26c:	60a3      	str	r3, [r4, #8]
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	4433      	add	r3, r6
 800c272:	6023      	str	r3, [r4, #0]
 800c274:	2000      	movs	r0, #0
 800c276:	e7db      	b.n	800c230 <__ssputs_r+0x58>
 800c278:	462a      	mov	r2, r5
 800c27a:	f000 fab7 	bl	800c7ec <_realloc_r>
 800c27e:	4606      	mov	r6, r0
 800c280:	2800      	cmp	r0, #0
 800c282:	d1e1      	bne.n	800c248 <__ssputs_r+0x70>
 800c284:	6921      	ldr	r1, [r4, #16]
 800c286:	4650      	mov	r0, sl
 800c288:	f7ff ff5a 	bl	800c140 <_free_r>
 800c28c:	e7c7      	b.n	800c21e <__ssputs_r+0x46>
	...

0800c290 <_svfiprintf_r>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	4698      	mov	r8, r3
 800c296:	898b      	ldrh	r3, [r1, #12]
 800c298:	061b      	lsls	r3, r3, #24
 800c29a:	b09d      	sub	sp, #116	; 0x74
 800c29c:	4607      	mov	r7, r0
 800c29e:	460d      	mov	r5, r1
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	d50e      	bpl.n	800c2c2 <_svfiprintf_r+0x32>
 800c2a4:	690b      	ldr	r3, [r1, #16]
 800c2a6:	b963      	cbnz	r3, 800c2c2 <_svfiprintf_r+0x32>
 800c2a8:	2140      	movs	r1, #64	; 0x40
 800c2aa:	f7ff fdff 	bl	800beac <_malloc_r>
 800c2ae:	6028      	str	r0, [r5, #0]
 800c2b0:	6128      	str	r0, [r5, #16]
 800c2b2:	b920      	cbnz	r0, 800c2be <_svfiprintf_r+0x2e>
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2bc:	e0d1      	b.n	800c462 <_svfiprintf_r+0x1d2>
 800c2be:	2340      	movs	r3, #64	; 0x40
 800c2c0:	616b      	str	r3, [r5, #20]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c6:	2320      	movs	r3, #32
 800c2c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d0:	2330      	movs	r3, #48	; 0x30
 800c2d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c47c <_svfiprintf_r+0x1ec>
 800c2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2da:	f04f 0901 	mov.w	r9, #1
 800c2de:	4623      	mov	r3, r4
 800c2e0:	469a      	mov	sl, r3
 800c2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e6:	b10a      	cbz	r2, 800c2ec <_svfiprintf_r+0x5c>
 800c2e8:	2a25      	cmp	r2, #37	; 0x25
 800c2ea:	d1f9      	bne.n	800c2e0 <_svfiprintf_r+0x50>
 800c2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c2f0:	d00b      	beq.n	800c30a <_svfiprintf_r+0x7a>
 800c2f2:	465b      	mov	r3, fp
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff ff6d 	bl	800c1d8 <__ssputs_r>
 800c2fe:	3001      	adds	r0, #1
 800c300:	f000 80aa 	beq.w	800c458 <_svfiprintf_r+0x1c8>
 800c304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c306:	445a      	add	r2, fp
 800c308:	9209      	str	r2, [sp, #36]	; 0x24
 800c30a:	f89a 3000 	ldrb.w	r3, [sl]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f000 80a2 	beq.w	800c458 <_svfiprintf_r+0x1c8>
 800c314:	2300      	movs	r3, #0
 800c316:	f04f 32ff 	mov.w	r2, #4294967295
 800c31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c31e:	f10a 0a01 	add.w	sl, sl, #1
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	9307      	str	r3, [sp, #28]
 800c326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c32a:	931a      	str	r3, [sp, #104]	; 0x68
 800c32c:	4654      	mov	r4, sl
 800c32e:	2205      	movs	r2, #5
 800c330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c334:	4851      	ldr	r0, [pc, #324]	; (800c47c <_svfiprintf_r+0x1ec>)
 800c336:	f7f3 ff53 	bl	80001e0 <memchr>
 800c33a:	9a04      	ldr	r2, [sp, #16]
 800c33c:	b9d8      	cbnz	r0, 800c376 <_svfiprintf_r+0xe6>
 800c33e:	06d0      	lsls	r0, r2, #27
 800c340:	bf44      	itt	mi
 800c342:	2320      	movmi	r3, #32
 800c344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c348:	0711      	lsls	r1, r2, #28
 800c34a:	bf44      	itt	mi
 800c34c:	232b      	movmi	r3, #43	; 0x2b
 800c34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c352:	f89a 3000 	ldrb.w	r3, [sl]
 800c356:	2b2a      	cmp	r3, #42	; 0x2a
 800c358:	d015      	beq.n	800c386 <_svfiprintf_r+0xf6>
 800c35a:	9a07      	ldr	r2, [sp, #28]
 800c35c:	4654      	mov	r4, sl
 800c35e:	2000      	movs	r0, #0
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4621      	mov	r1, r4
 800c366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c36a:	3b30      	subs	r3, #48	; 0x30
 800c36c:	2b09      	cmp	r3, #9
 800c36e:	d94e      	bls.n	800c40e <_svfiprintf_r+0x17e>
 800c370:	b1b0      	cbz	r0, 800c3a0 <_svfiprintf_r+0x110>
 800c372:	9207      	str	r2, [sp, #28]
 800c374:	e014      	b.n	800c3a0 <_svfiprintf_r+0x110>
 800c376:	eba0 0308 	sub.w	r3, r0, r8
 800c37a:	fa09 f303 	lsl.w	r3, r9, r3
 800c37e:	4313      	orrs	r3, r2
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	46a2      	mov	sl, r4
 800c384:	e7d2      	b.n	800c32c <_svfiprintf_r+0x9c>
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	1d19      	adds	r1, r3, #4
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	9103      	str	r1, [sp, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bfbb      	ittet	lt
 800c392:	425b      	neglt	r3, r3
 800c394:	f042 0202 	orrlt.w	r2, r2, #2
 800c398:	9307      	strge	r3, [sp, #28]
 800c39a:	9307      	strlt	r3, [sp, #28]
 800c39c:	bfb8      	it	lt
 800c39e:	9204      	strlt	r2, [sp, #16]
 800c3a0:	7823      	ldrb	r3, [r4, #0]
 800c3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a4:	d10c      	bne.n	800c3c0 <_svfiprintf_r+0x130>
 800c3a6:	7863      	ldrb	r3, [r4, #1]
 800c3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3aa:	d135      	bne.n	800c418 <_svfiprintf_r+0x188>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	1d1a      	adds	r2, r3, #4
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	9203      	str	r2, [sp, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bfb8      	it	lt
 800c3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3bc:	3402      	adds	r4, #2
 800c3be:	9305      	str	r3, [sp, #20]
 800c3c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c48c <_svfiprintf_r+0x1fc>
 800c3c4:	7821      	ldrb	r1, [r4, #0]
 800c3c6:	2203      	movs	r2, #3
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	f7f3 ff09 	bl	80001e0 <memchr>
 800c3ce:	b140      	cbz	r0, 800c3e2 <_svfiprintf_r+0x152>
 800c3d0:	2340      	movs	r3, #64	; 0x40
 800c3d2:	eba0 000a 	sub.w	r0, r0, sl
 800c3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c3da:	9b04      	ldr	r3, [sp, #16]
 800c3dc:	4303      	orrs	r3, r0
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e6:	4826      	ldr	r0, [pc, #152]	; (800c480 <_svfiprintf_r+0x1f0>)
 800c3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	f7f3 fef7 	bl	80001e0 <memchr>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d038      	beq.n	800c468 <_svfiprintf_r+0x1d8>
 800c3f6:	4b23      	ldr	r3, [pc, #140]	; (800c484 <_svfiprintf_r+0x1f4>)
 800c3f8:	bb1b      	cbnz	r3, 800c442 <_svfiprintf_r+0x1b2>
 800c3fa:	9b03      	ldr	r3, [sp, #12]
 800c3fc:	3307      	adds	r3, #7
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	3308      	adds	r3, #8
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	4433      	add	r3, r6
 800c40a:	9309      	str	r3, [sp, #36]	; 0x24
 800c40c:	e767      	b.n	800c2de <_svfiprintf_r+0x4e>
 800c40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c412:	460c      	mov	r4, r1
 800c414:	2001      	movs	r0, #1
 800c416:	e7a5      	b.n	800c364 <_svfiprintf_r+0xd4>
 800c418:	2300      	movs	r3, #0
 800c41a:	3401      	adds	r4, #1
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	4619      	mov	r1, r3
 800c420:	f04f 0c0a 	mov.w	ip, #10
 800c424:	4620      	mov	r0, r4
 800c426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c42a:	3a30      	subs	r2, #48	; 0x30
 800c42c:	2a09      	cmp	r2, #9
 800c42e:	d903      	bls.n	800c438 <_svfiprintf_r+0x1a8>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d0c5      	beq.n	800c3c0 <_svfiprintf_r+0x130>
 800c434:	9105      	str	r1, [sp, #20]
 800c436:	e7c3      	b.n	800c3c0 <_svfiprintf_r+0x130>
 800c438:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43c:	4604      	mov	r4, r0
 800c43e:	2301      	movs	r3, #1
 800c440:	e7f0      	b.n	800c424 <_svfiprintf_r+0x194>
 800c442:	ab03      	add	r3, sp, #12
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	462a      	mov	r2, r5
 800c448:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <_svfiprintf_r+0x1f8>)
 800c44a:	a904      	add	r1, sp, #16
 800c44c:	4638      	mov	r0, r7
 800c44e:	f3af 8000 	nop.w
 800c452:	1c42      	adds	r2, r0, #1
 800c454:	4606      	mov	r6, r0
 800c456:	d1d6      	bne.n	800c406 <_svfiprintf_r+0x176>
 800c458:	89ab      	ldrh	r3, [r5, #12]
 800c45a:	065b      	lsls	r3, r3, #25
 800c45c:	f53f af2c 	bmi.w	800c2b8 <_svfiprintf_r+0x28>
 800c460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c462:	b01d      	add	sp, #116	; 0x74
 800c464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c468:	ab03      	add	r3, sp, #12
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	462a      	mov	r2, r5
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <_svfiprintf_r+0x1f8>)
 800c470:	a904      	add	r1, sp, #16
 800c472:	4638      	mov	r0, r7
 800c474:	f000 f87a 	bl	800c56c <_printf_i>
 800c478:	e7eb      	b.n	800c452 <_svfiprintf_r+0x1c2>
 800c47a:	bf00      	nop
 800c47c:	0800cbc0 	.word	0x0800cbc0
 800c480:	0800cbca 	.word	0x0800cbca
 800c484:	00000000 	.word	0x00000000
 800c488:	0800c1d9 	.word	0x0800c1d9
 800c48c:	0800cbc6 	.word	0x0800cbc6

0800c490 <_printf_common>:
 800c490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c494:	4616      	mov	r6, r2
 800c496:	4699      	mov	r9, r3
 800c498:	688a      	ldr	r2, [r1, #8]
 800c49a:	690b      	ldr	r3, [r1, #16]
 800c49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	bfb8      	it	lt
 800c4a4:	4613      	movlt	r3, r2
 800c4a6:	6033      	str	r3, [r6, #0]
 800c4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4ac:	4607      	mov	r7, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	b10a      	cbz	r2, 800c4b6 <_printf_common+0x26>
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	6033      	str	r3, [r6, #0]
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	0699      	lsls	r1, r3, #26
 800c4ba:	bf42      	ittt	mi
 800c4bc:	6833      	ldrmi	r3, [r6, #0]
 800c4be:	3302      	addmi	r3, #2
 800c4c0:	6033      	strmi	r3, [r6, #0]
 800c4c2:	6825      	ldr	r5, [r4, #0]
 800c4c4:	f015 0506 	ands.w	r5, r5, #6
 800c4c8:	d106      	bne.n	800c4d8 <_printf_common+0x48>
 800c4ca:	f104 0a19 	add.w	sl, r4, #25
 800c4ce:	68e3      	ldr	r3, [r4, #12]
 800c4d0:	6832      	ldr	r2, [r6, #0]
 800c4d2:	1a9b      	subs	r3, r3, r2
 800c4d4:	42ab      	cmp	r3, r5
 800c4d6:	dc26      	bgt.n	800c526 <_printf_common+0x96>
 800c4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4dc:	1e13      	subs	r3, r2, #0
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	bf18      	it	ne
 800c4e2:	2301      	movne	r3, #1
 800c4e4:	0692      	lsls	r2, r2, #26
 800c4e6:	d42b      	bmi.n	800c540 <_printf_common+0xb0>
 800c4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	47c0      	blx	r8
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	d01e      	beq.n	800c534 <_printf_common+0xa4>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	68e5      	ldr	r5, [r4, #12]
 800c4fa:	6832      	ldr	r2, [r6, #0]
 800c4fc:	f003 0306 	and.w	r3, r3, #6
 800c500:	2b04      	cmp	r3, #4
 800c502:	bf08      	it	eq
 800c504:	1aad      	subeq	r5, r5, r2
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	6922      	ldr	r2, [r4, #16]
 800c50a:	bf0c      	ite	eq
 800c50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c510:	2500      	movne	r5, #0
 800c512:	4293      	cmp	r3, r2
 800c514:	bfc4      	itt	gt
 800c516:	1a9b      	subgt	r3, r3, r2
 800c518:	18ed      	addgt	r5, r5, r3
 800c51a:	2600      	movs	r6, #0
 800c51c:	341a      	adds	r4, #26
 800c51e:	42b5      	cmp	r5, r6
 800c520:	d11a      	bne.n	800c558 <_printf_common+0xc8>
 800c522:	2000      	movs	r0, #0
 800c524:	e008      	b.n	800c538 <_printf_common+0xa8>
 800c526:	2301      	movs	r3, #1
 800c528:	4652      	mov	r2, sl
 800c52a:	4649      	mov	r1, r9
 800c52c:	4638      	mov	r0, r7
 800c52e:	47c0      	blx	r8
 800c530:	3001      	adds	r0, #1
 800c532:	d103      	bne.n	800c53c <_printf_common+0xac>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295
 800c538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53c:	3501      	adds	r5, #1
 800c53e:	e7c6      	b.n	800c4ce <_printf_common+0x3e>
 800c540:	18e1      	adds	r1, r4, r3
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	2030      	movs	r0, #48	; 0x30
 800c546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c54a:	4422      	add	r2, r4
 800c54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c554:	3302      	adds	r3, #2
 800c556:	e7c7      	b.n	800c4e8 <_printf_common+0x58>
 800c558:	2301      	movs	r3, #1
 800c55a:	4622      	mov	r2, r4
 800c55c:	4649      	mov	r1, r9
 800c55e:	4638      	mov	r0, r7
 800c560:	47c0      	blx	r8
 800c562:	3001      	adds	r0, #1
 800c564:	d0e6      	beq.n	800c534 <_printf_common+0xa4>
 800c566:	3601      	adds	r6, #1
 800c568:	e7d9      	b.n	800c51e <_printf_common+0x8e>
	...

0800c56c <_printf_i>:
 800c56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	7e0f      	ldrb	r7, [r1, #24]
 800c572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c574:	2f78      	cmp	r7, #120	; 0x78
 800c576:	4691      	mov	r9, r2
 800c578:	4680      	mov	r8, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	469a      	mov	sl, r3
 800c57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c582:	d807      	bhi.n	800c594 <_printf_i+0x28>
 800c584:	2f62      	cmp	r7, #98	; 0x62
 800c586:	d80a      	bhi.n	800c59e <_printf_i+0x32>
 800c588:	2f00      	cmp	r7, #0
 800c58a:	f000 80d8 	beq.w	800c73e <_printf_i+0x1d2>
 800c58e:	2f58      	cmp	r7, #88	; 0x58
 800c590:	f000 80a3 	beq.w	800c6da <_printf_i+0x16e>
 800c594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c59c:	e03a      	b.n	800c614 <_printf_i+0xa8>
 800c59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5a2:	2b15      	cmp	r3, #21
 800c5a4:	d8f6      	bhi.n	800c594 <_printf_i+0x28>
 800c5a6:	a101      	add	r1, pc, #4	; (adr r1, 800c5ac <_printf_i+0x40>)
 800c5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5ac:	0800c605 	.word	0x0800c605
 800c5b0:	0800c619 	.word	0x0800c619
 800c5b4:	0800c595 	.word	0x0800c595
 800c5b8:	0800c595 	.word	0x0800c595
 800c5bc:	0800c595 	.word	0x0800c595
 800c5c0:	0800c595 	.word	0x0800c595
 800c5c4:	0800c619 	.word	0x0800c619
 800c5c8:	0800c595 	.word	0x0800c595
 800c5cc:	0800c595 	.word	0x0800c595
 800c5d0:	0800c595 	.word	0x0800c595
 800c5d4:	0800c595 	.word	0x0800c595
 800c5d8:	0800c725 	.word	0x0800c725
 800c5dc:	0800c649 	.word	0x0800c649
 800c5e0:	0800c707 	.word	0x0800c707
 800c5e4:	0800c595 	.word	0x0800c595
 800c5e8:	0800c595 	.word	0x0800c595
 800c5ec:	0800c747 	.word	0x0800c747
 800c5f0:	0800c595 	.word	0x0800c595
 800c5f4:	0800c649 	.word	0x0800c649
 800c5f8:	0800c595 	.word	0x0800c595
 800c5fc:	0800c595 	.word	0x0800c595
 800c600:	0800c70f 	.word	0x0800c70f
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	1d1a      	adds	r2, r3, #4
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	602a      	str	r2, [r5, #0]
 800c60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c614:	2301      	movs	r3, #1
 800c616:	e0a3      	b.n	800c760 <_printf_i+0x1f4>
 800c618:	6820      	ldr	r0, [r4, #0]
 800c61a:	6829      	ldr	r1, [r5, #0]
 800c61c:	0606      	lsls	r6, r0, #24
 800c61e:	f101 0304 	add.w	r3, r1, #4
 800c622:	d50a      	bpl.n	800c63a <_printf_i+0xce>
 800c624:	680e      	ldr	r6, [r1, #0]
 800c626:	602b      	str	r3, [r5, #0]
 800c628:	2e00      	cmp	r6, #0
 800c62a:	da03      	bge.n	800c634 <_printf_i+0xc8>
 800c62c:	232d      	movs	r3, #45	; 0x2d
 800c62e:	4276      	negs	r6, r6
 800c630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c634:	485e      	ldr	r0, [pc, #376]	; (800c7b0 <_printf_i+0x244>)
 800c636:	230a      	movs	r3, #10
 800c638:	e019      	b.n	800c66e <_printf_i+0x102>
 800c63a:	680e      	ldr	r6, [r1, #0]
 800c63c:	602b      	str	r3, [r5, #0]
 800c63e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c642:	bf18      	it	ne
 800c644:	b236      	sxthne	r6, r6
 800c646:	e7ef      	b.n	800c628 <_printf_i+0xbc>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	6820      	ldr	r0, [r4, #0]
 800c64c:	1d19      	adds	r1, r3, #4
 800c64e:	6029      	str	r1, [r5, #0]
 800c650:	0601      	lsls	r1, r0, #24
 800c652:	d501      	bpl.n	800c658 <_printf_i+0xec>
 800c654:	681e      	ldr	r6, [r3, #0]
 800c656:	e002      	b.n	800c65e <_printf_i+0xf2>
 800c658:	0646      	lsls	r6, r0, #25
 800c65a:	d5fb      	bpl.n	800c654 <_printf_i+0xe8>
 800c65c:	881e      	ldrh	r6, [r3, #0]
 800c65e:	4854      	ldr	r0, [pc, #336]	; (800c7b0 <_printf_i+0x244>)
 800c660:	2f6f      	cmp	r7, #111	; 0x6f
 800c662:	bf0c      	ite	eq
 800c664:	2308      	moveq	r3, #8
 800c666:	230a      	movne	r3, #10
 800c668:	2100      	movs	r1, #0
 800c66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c66e:	6865      	ldr	r5, [r4, #4]
 800c670:	60a5      	str	r5, [r4, #8]
 800c672:	2d00      	cmp	r5, #0
 800c674:	bfa2      	ittt	ge
 800c676:	6821      	ldrge	r1, [r4, #0]
 800c678:	f021 0104 	bicge.w	r1, r1, #4
 800c67c:	6021      	strge	r1, [r4, #0]
 800c67e:	b90e      	cbnz	r6, 800c684 <_printf_i+0x118>
 800c680:	2d00      	cmp	r5, #0
 800c682:	d04d      	beq.n	800c720 <_printf_i+0x1b4>
 800c684:	4615      	mov	r5, r2
 800c686:	fbb6 f1f3 	udiv	r1, r6, r3
 800c68a:	fb03 6711 	mls	r7, r3, r1, r6
 800c68e:	5dc7      	ldrb	r7, [r0, r7]
 800c690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c694:	4637      	mov	r7, r6
 800c696:	42bb      	cmp	r3, r7
 800c698:	460e      	mov	r6, r1
 800c69a:	d9f4      	bls.n	800c686 <_printf_i+0x11a>
 800c69c:	2b08      	cmp	r3, #8
 800c69e:	d10b      	bne.n	800c6b8 <_printf_i+0x14c>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	07de      	lsls	r6, r3, #31
 800c6a4:	d508      	bpl.n	800c6b8 <_printf_i+0x14c>
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	6861      	ldr	r1, [r4, #4]
 800c6aa:	4299      	cmp	r1, r3
 800c6ac:	bfde      	ittt	le
 800c6ae:	2330      	movle	r3, #48	; 0x30
 800c6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6b8:	1b52      	subs	r2, r2, r5
 800c6ba:	6122      	str	r2, [r4, #16]
 800c6bc:	f8cd a000 	str.w	sl, [sp]
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	aa03      	add	r2, sp, #12
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	f7ff fee2 	bl	800c490 <_printf_common>
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	d14c      	bne.n	800c76a <_printf_i+0x1fe>
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	b004      	add	sp, #16
 800c6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6da:	4835      	ldr	r0, [pc, #212]	; (800c7b0 <_printf_i+0x244>)
 800c6dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6e0:	6829      	ldr	r1, [r5, #0]
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6e8:	6029      	str	r1, [r5, #0]
 800c6ea:	061d      	lsls	r5, r3, #24
 800c6ec:	d514      	bpl.n	800c718 <_printf_i+0x1ac>
 800c6ee:	07df      	lsls	r7, r3, #31
 800c6f0:	bf44      	itt	mi
 800c6f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c6f6:	6023      	strmi	r3, [r4, #0]
 800c6f8:	b91e      	cbnz	r6, 800c702 <_printf_i+0x196>
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	f023 0320 	bic.w	r3, r3, #32
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	2310      	movs	r3, #16
 800c704:	e7b0      	b.n	800c668 <_printf_i+0xfc>
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	f043 0320 	orr.w	r3, r3, #32
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	2378      	movs	r3, #120	; 0x78
 800c710:	4828      	ldr	r0, [pc, #160]	; (800c7b4 <_printf_i+0x248>)
 800c712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c716:	e7e3      	b.n	800c6e0 <_printf_i+0x174>
 800c718:	0659      	lsls	r1, r3, #25
 800c71a:	bf48      	it	mi
 800c71c:	b2b6      	uxthmi	r6, r6
 800c71e:	e7e6      	b.n	800c6ee <_printf_i+0x182>
 800c720:	4615      	mov	r5, r2
 800c722:	e7bb      	b.n	800c69c <_printf_i+0x130>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	6826      	ldr	r6, [r4, #0]
 800c728:	6961      	ldr	r1, [r4, #20]
 800c72a:	1d18      	adds	r0, r3, #4
 800c72c:	6028      	str	r0, [r5, #0]
 800c72e:	0635      	lsls	r5, r6, #24
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	d501      	bpl.n	800c738 <_printf_i+0x1cc>
 800c734:	6019      	str	r1, [r3, #0]
 800c736:	e002      	b.n	800c73e <_printf_i+0x1d2>
 800c738:	0670      	lsls	r0, r6, #25
 800c73a:	d5fb      	bpl.n	800c734 <_printf_i+0x1c8>
 800c73c:	8019      	strh	r1, [r3, #0]
 800c73e:	2300      	movs	r3, #0
 800c740:	6123      	str	r3, [r4, #16]
 800c742:	4615      	mov	r5, r2
 800c744:	e7ba      	b.n	800c6bc <_printf_i+0x150>
 800c746:	682b      	ldr	r3, [r5, #0]
 800c748:	1d1a      	adds	r2, r3, #4
 800c74a:	602a      	str	r2, [r5, #0]
 800c74c:	681d      	ldr	r5, [r3, #0]
 800c74e:	6862      	ldr	r2, [r4, #4]
 800c750:	2100      	movs	r1, #0
 800c752:	4628      	mov	r0, r5
 800c754:	f7f3 fd44 	bl	80001e0 <memchr>
 800c758:	b108      	cbz	r0, 800c75e <_printf_i+0x1f2>
 800c75a:	1b40      	subs	r0, r0, r5
 800c75c:	6060      	str	r0, [r4, #4]
 800c75e:	6863      	ldr	r3, [r4, #4]
 800c760:	6123      	str	r3, [r4, #16]
 800c762:	2300      	movs	r3, #0
 800c764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c768:	e7a8      	b.n	800c6bc <_printf_i+0x150>
 800c76a:	6923      	ldr	r3, [r4, #16]
 800c76c:	462a      	mov	r2, r5
 800c76e:	4649      	mov	r1, r9
 800c770:	4640      	mov	r0, r8
 800c772:	47d0      	blx	sl
 800c774:	3001      	adds	r0, #1
 800c776:	d0ab      	beq.n	800c6d0 <_printf_i+0x164>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	079b      	lsls	r3, r3, #30
 800c77c:	d413      	bmi.n	800c7a6 <_printf_i+0x23a>
 800c77e:	68e0      	ldr	r0, [r4, #12]
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	4298      	cmp	r0, r3
 800c784:	bfb8      	it	lt
 800c786:	4618      	movlt	r0, r3
 800c788:	e7a4      	b.n	800c6d4 <_printf_i+0x168>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4632      	mov	r2, r6
 800c78e:	4649      	mov	r1, r9
 800c790:	4640      	mov	r0, r8
 800c792:	47d0      	blx	sl
 800c794:	3001      	adds	r0, #1
 800c796:	d09b      	beq.n	800c6d0 <_printf_i+0x164>
 800c798:	3501      	adds	r5, #1
 800c79a:	68e3      	ldr	r3, [r4, #12]
 800c79c:	9903      	ldr	r1, [sp, #12]
 800c79e:	1a5b      	subs	r3, r3, r1
 800c7a0:	42ab      	cmp	r3, r5
 800c7a2:	dcf2      	bgt.n	800c78a <_printf_i+0x21e>
 800c7a4:	e7eb      	b.n	800c77e <_printf_i+0x212>
 800c7a6:	2500      	movs	r5, #0
 800c7a8:	f104 0619 	add.w	r6, r4, #25
 800c7ac:	e7f5      	b.n	800c79a <_printf_i+0x22e>
 800c7ae:	bf00      	nop
 800c7b0:	0800cbd1 	.word	0x0800cbd1
 800c7b4:	0800cbe2 	.word	0x0800cbe2

0800c7b8 <memmove>:
 800c7b8:	4288      	cmp	r0, r1
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	eb01 0402 	add.w	r4, r1, r2
 800c7c0:	d902      	bls.n	800c7c8 <memmove+0x10>
 800c7c2:	4284      	cmp	r4, r0
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	d807      	bhi.n	800c7d8 <memmove+0x20>
 800c7c8:	1e43      	subs	r3, r0, #1
 800c7ca:	42a1      	cmp	r1, r4
 800c7cc:	d008      	beq.n	800c7e0 <memmove+0x28>
 800c7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7d6:	e7f8      	b.n	800c7ca <memmove+0x12>
 800c7d8:	4402      	add	r2, r0
 800c7da:	4601      	mov	r1, r0
 800c7dc:	428a      	cmp	r2, r1
 800c7de:	d100      	bne.n	800c7e2 <memmove+0x2a>
 800c7e0:	bd10      	pop	{r4, pc}
 800c7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7ea:	e7f7      	b.n	800c7dc <memmove+0x24>

0800c7ec <_realloc_r>:
 800c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	4614      	mov	r4, r2
 800c7f4:	460e      	mov	r6, r1
 800c7f6:	b921      	cbnz	r1, 800c802 <_realloc_r+0x16>
 800c7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fc:	4611      	mov	r1, r2
 800c7fe:	f7ff bb55 	b.w	800beac <_malloc_r>
 800c802:	b92a      	cbnz	r2, 800c810 <_realloc_r+0x24>
 800c804:	f7ff fc9c 	bl	800c140 <_free_r>
 800c808:	4625      	mov	r5, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c810:	f000 f81b 	bl	800c84a <_malloc_usable_size_r>
 800c814:	4284      	cmp	r4, r0
 800c816:	4607      	mov	r7, r0
 800c818:	d802      	bhi.n	800c820 <_realloc_r+0x34>
 800c81a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c81e:	d812      	bhi.n	800c846 <_realloc_r+0x5a>
 800c820:	4621      	mov	r1, r4
 800c822:	4640      	mov	r0, r8
 800c824:	f7ff fb42 	bl	800beac <_malloc_r>
 800c828:	4605      	mov	r5, r0
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0ed      	beq.n	800c80a <_realloc_r+0x1e>
 800c82e:	42bc      	cmp	r4, r7
 800c830:	4622      	mov	r2, r4
 800c832:	4631      	mov	r1, r6
 800c834:	bf28      	it	cs
 800c836:	463a      	movcs	r2, r7
 800c838:	f7ff fb02 	bl	800be40 <memcpy>
 800c83c:	4631      	mov	r1, r6
 800c83e:	4640      	mov	r0, r8
 800c840:	f7ff fc7e 	bl	800c140 <_free_r>
 800c844:	e7e1      	b.n	800c80a <_realloc_r+0x1e>
 800c846:	4635      	mov	r5, r6
 800c848:	e7df      	b.n	800c80a <_realloc_r+0x1e>

0800c84a <_malloc_usable_size_r>:
 800c84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84e:	1f18      	subs	r0, r3, #4
 800c850:	2b00      	cmp	r3, #0
 800c852:	bfbc      	itt	lt
 800c854:	580b      	ldrlt	r3, [r1, r0]
 800c856:	18c0      	addlt	r0, r0, r3
 800c858:	4770      	bx	lr
	...

0800c85c <_init>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	bf00      	nop
 800c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c862:	bc08      	pop	{r3}
 800c864:	469e      	mov	lr, r3
 800c866:	4770      	bx	lr

0800c868 <_fini>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	bf00      	nop
 800c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86e:	bc08      	pop	{r3}
 800c870:	469e      	mov	lr, r3
 800c872:	4770      	bx	lr
